{"version":3,"file":"207.63dceced324c9baae177.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { SemVer } from \"semver\";\n\nimport AdminClient, { UpdateErrors } from \"../../../ApiClient/AdminClient\";\nimport {\n    AdministrationRights,\n    ServerUpdateResponse\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { hasAdminRight, resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps\n    extends RouteComponentProps<{\n        all: string;\n    }> {}\ninterface IState {\n    versions: TGSVersion[];\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    //manual entry\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            loading: true\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        if (\n            !hasAdminRight(\n                resolvePermissionSet(this.context.user),\n                AdministrationRights.ChangeVersion\n            )\n        ) {\n            return;\n        }\n\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        this.setState({\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async uploadVersion(): Promise<void> {\n        const inputPromise = new Promise<File | null>(resolve => {\n            const input = document.createElement(\"input\");\n            input.type = \"file\";\n            input.onchange = e => {\n                const files = (e.target as HTMLInputElement)?.files;\n                if (files) resolve(files[0]);\n                else resolve(null);\n            };\n            input.click();\n        });\n\n        const localFile = await inputPromise;\n        if (!localFile) return;\n\n        if (!localFile.name.toLowerCase().endsWith(\".zip\")) {\n            alert(\"Invalid zipfile!\");\n            return;\n        }\n\n        // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\n        const fileData = await localFile.arrayBuffer();\n\n        const targetVersionStr = prompt(\"Enter the TGS version semver:\");\n        if (!targetVersionStr) return;\n\n        const targetVersionSemver = new SemVer(targetVersionStr);\n\n        // reformat it for them in case they fucked up a little\n        const targetVersion = `${targetVersionSemver.major}.${targetVersionSemver.minor}.${targetVersionSemver.patch}`;\n\n        if (targetVersion != targetVersionStr) {\n            alert(\"Invalid semver!\");\n            return;\n        }\n\n        if (\n            !confirm(\n                `JUST WHAT DO YOU THINK YOU'RE DOING!? This is your only and final warning: Uploading a TGS Version .zip that is improperly formatted or that does not match the version you just entered (${targetVersion}) can brick your installation! Think carefully before pressing OK to continue.`\n            )\n        ) {\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.uploadVersion(targetVersion, fileData));\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.updateServer(this.state.selectedOption));\n    }\n\n    private async serverUpdated(\n        request: Promise<InternalStatus<ServerUpdateResponse, UpdateErrors>>\n    ): Promise<void> {\n        const response = await request;\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                return;\n            }\n            case StatusCode.OK: {\n                break;\n            }\n        }\n\n        ServerClient.autoLogin = false;\n        // i need that timer to be async\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        window.setInterval(async () => {\n            const response = await UserClient.getCurrentUser(true);\n            switch (response.code) {\n                //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                //in both cases, we should reboot\n                case StatusCode.ERROR: {\n                    window.location.reload();\n                }\n            }\n        }, 2000);\n        this.setState({\n            updating: true\n        });\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const permissionSet = resolvePermissionSet(this.context.user);\n        const canChangeVersion = hasAdminRight(permissionSet, AdministrationRights.ChangeVersion);\n        const canUploadVersion = hasAdminRight(permissionSet, AdministrationRights.UploadVersion);\n\n        const selectedVersionMarkdown = this.state.selectedVersion?.body\n            .replaceAll(\"\\r\", \"\")\n            .replaceAll(\"\\n\", \"\\n\\n\");\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                show={timing}>\n                                <Button onClick={this.updateServer} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown>{selectedVersionMarkdown!}</ReactMarkdown>\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        {canChangeVersion ? (\n                            <Col xs={8} md={6} className=\"mx-auto\">\n                                {this.state.versions.map((version, index) => {\n                                    return (\n                                        <InputGroup className=\"mb-3\" key={version.version}>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    id={version.version}\n                                                    name=\"version\"\n                                                    disabled={version.current}\n                                                    value={version.version}\n                                                    checked={\n                                                        this.state.selectedOption ===\n                                                        version.version\n                                                    }\n                                                    onChange={handleChange}\n                                                />\n                                            </InputGroup.Prepend>\n                                            <FormControl\n                                                as={\"label\"}\n                                                htmlFor={version.version}\n                                                disabled>\n                                                {version.version}\n                                                {version.current ? (\n                                                    <FormattedMessage id=\"view.admin.update.current\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                                {index == 0 ? (\n                                                    <FormattedMessage id=\"view.admin.update.latest\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormControl>\n                                        </InputGroup>\n                                    );\n                                })}\n                                <Button\n                                    variant=\"link\"\n                                    onClick={() => {\n                                        this.props.history.push(\n                                            (AppRoutes.admin_update.link ??\n                                                AppRoutes.admin_update.route) + \"all/\",\n                                            {\n                                                reload: true\n                                            }\n                                        );\n                                    }}\n                                    disabled={!!this.props.match.params.all}>\n                                    <FormattedMessage id=\"view.admin.update.showall\" />\n                                </Button>\n                                <br />\n                                <Button\n                                    onClick={this.loadNotes}\n                                    disabled={!this.state.selectedOption}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                </Button>\n                            </Col>\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.admin.update.selectversion.deny\" />\n                            </h4>\n                        )}\n                        <br />\n                        <OverlayTrigger\n                            overlay={\n                                <Tooltip id=\"create-instance-tooltip\">\n                                    <FormattedMessage id=\"view.admin.update.upload.deny\" />\n                                </Tooltip>\n                            }\n                            show={canUploadVersion ? false : undefined}>\n                            {({ ref, ...triggerHandler }) => (\n                                <Button\n                                    ref={ref}\n                                    className=\"mx-1\"\n                                    variant=\"success\"\n                                    onClick={() => void this.uploadVersion()}\n                                    disabled={!canUploadVersion}\n                                    {...triggerHandler}>\n                                    <div>\n                                        <FontAwesomeIcon className=\"mr-2\" icon={faUpload} />\n                                        <FormattedMessage id=\"view.admin.update.upload\" />\n                                    </div>\n                                </Button>\n                            )}\n                        </OverlayTrigger>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\" && match[1][0] !== \"5\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","Update","React","constructor","super","this","loadNotes","bind","updateServer","state","versions","errors","loading","loadVersions","setState","componentWillUnmount","timer","window","clearInterval","addError","error","prevState","Array","from","push","hasAdminRight","resolvePermissionSet","context","user","AdministrationRights","adminInfo","AdminClient","code","StatusCode","url","payload","trackedRepositoryUrl","results","exec","InternalError","ErrorCode","jsError","Error","body","version","current","old","versionInfo","GithubClient","owner","repo","serverInfo","all","match","params","console","log","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","inputPromise","Promise","resolve","input","document","createElement","type","onchange","e","files","target","click","localFile","toLowerCase","endsWith","alert","fileData","arrayBuffer","targetVersionStr","prompt","targetVersionSemver","SemVer","targetVersion","major","minor","patch","confirm","serverUpdated","request","response","ServerClient","async","UserClient","location","reload","updating","render","text","handleChange","changeEvent","value","permissionSet","canChangeVersion","canUploadVersion","selectedVersionMarkdown","replaceAll","timing","map","err","index","key","onClose","prev","newarr","onClick","id","overlay","show","disabled","xs","md","checked","onChange","as","htmlFor","variant","history","AppRoutes","ref","triggerHandler","uploadVersion","icon","faUpload","contextType","GeneralContext","withRouter","hook","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","Object","assign","TypedEmitter","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","warn","method","retryCount","onAbuseLimit","oldversions","paginate","repos","listReleases","done","data","reduce","result","release","InternalStatus","transformPR","pr","number","title","author","login","merged_at","link","html_url","head","sha","tail","base","testmergelabel","labels","some","label","includes","wantedPRs","pulls","list","wantedPR","find","get","pull_number","wantedCommit","extraCommit","listCommits","per_page","commit","message","split","reverse","_extraCommit","getCommit","path","getContent","mediaType","format","isArray","raw","content","forEach","element","isDirectory"],"sourceRoot":""}