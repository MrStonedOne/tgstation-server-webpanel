{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/components/views/User/List.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Badge.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Table.js"],"names":["withRouter","props","state","errors","users","loading","canList","error","this","setState","prevState","Array","from","push","response","UserClient","code","StatusCode","resolvePermissionSet","payload","administrationRights","AdministrationRights","res","addError","text","className","variant","id","map","err","index","key","onClose","prev","newarr","undefined","striped","bordered","hover","responsive","value","createddate","Date","createdAt","createddiff","getTime","now","name","systemIdentifier","enabled","group","overlay","values","ref","triggerHandler","toLocaleString","numeric","updateIntervalInSeconds","createdBy","onClick","RouteData","history","AppRoutes","as","Link","to","React","Badge","_ref","bsPrefix","pill","_ref$as","Component","prefix","displayName","defaultProps","Table","borderless","size","decoratedBsPrefix","classes","table","responsiveClass"],"mappings":"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","file":"120.0c798bbbc396fb38107c.js","sourcesContent":["import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { AdministrationRights } from \"../../../ApiClient/generatedcode/_enums\";\nimport { UserResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    users: UserResponse[];\n    loading: boolean;\n    canList: boolean;\n}\n\nexport default withRouter(\n    class UserList extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                users: [],\n                loading: true,\n                canList: false\n            };\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        public async componentDidMount(): Promise<void> {\n            const response = await UserClient.getCurrentUser();\n            if (response.code == StatusCode.OK) {\n                const canList = !!(\n                    resolvePermissionSet(response.payload).administrationRights &\n                    AdministrationRights.ReadUsers\n                );\n                this.setState({\n                    canList\n                });\n\n                if (canList) {\n                    const res = await UserClient.listUsers();\n                    switch (res.code) {\n                        case StatusCode.OK: {\n                            this.setState({\n                                users: res.payload\n                            });\n                            break;\n                        }\n                        case StatusCode.ERROR: {\n                            this.addError(res.error);\n                        }\n                    }\n                } else {\n                    //if we cant list users, add our own user to the list\n                    this.setState({\n                        users: [response.payload]\n                    });\n                }\n            } else {\n                this.addError(response.error);\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.userlist\" />;\n            }\n            return (\n                <div className=\"text-center\">\n                    {!this.state.canList ? (\n                        <Alert className=\"clearfix\" variant=\"error\">\n                            <FormattedMessage id=\"view.user.list.cantlist\" />\n                        </Alert>\n                    ) : (\n                        \"\"\n                    )}\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <Table striped bordered hover variant=\"dark\" responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>\n                                    <FormattedMessage id=\"generic.name\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.details\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.group\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.created\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.createdby\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.action\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.users.map(value => {\n                                const createddate = new Date(value.createdAt);\n                                const createddiff = (createddate.getTime() - Date.now()) / 1000;\n\n                                return (\n                                    <tr key={value.id}>\n                                        <td>{value.id}</td>\n                                        <td>{value.name}</td>\n                                        <td>\n                                            {value.systemIdentifier ? (\n                                                <Badge variant=\"primary\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.system.short\" />\n                                                </Badge>\n                                            ) : (\n                                                <Badge variant=\"primary\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.tgs\" />\n                                                </Badge>\n                                            )}\n                                            {value.enabled ? (\n                                                <Badge variant=\"success\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.enabled\" />\n                                                </Badge>\n                                            ) : (\n                                                <Badge variant=\"danger\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.disabled\" />\n                                                </Badge>\n                                            )}\n                                            {value.group ? (\n                                                <Badge variant=\"warning\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.grouped\" />\n                                                </Badge>\n                                            ) : null}\n                                        </td>\n                                        {value.group ? (\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`${value.name}-tooltip-group`}>\n                                                        <FormattedMessage\n                                                            id=\"generic.groupid\"\n                                                            values={{ id: value.group.id }}\n                                                        />\n                                                    </Tooltip>\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <td {...triggerHandler}>\n                                                        <span\n                                                            ref={ref as React.Ref<HTMLSpanElement>}>\n                                                            {value.group!.name}\n                                                        </span>\n                                                    </td>\n                                                )}\n                                            </OverlayTrigger>\n                                        ) : (\n                                            <td />\n                                        )}\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${value.name}-tooltip`}>\n                                                    {createddate.toLocaleString()}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <td {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        <FormattedRelativeTime\n                                                            value={createddiff}\n                                                            numeric=\"auto\"\n                                                            updateIntervalInSeconds={1}\n                                                        />\n                                                    </span>\n                                                </td>\n                                            )}\n                                        </OverlayTrigger>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${value.name}-tooltip-createdby`}>\n                                                    <FormattedMessage id=\"generic.userid\" />\n                                                    {value.createdBy.id}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <td {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        {value.createdBy.name}\n                                                    </span>\n                                                </td>\n                                            )}\n                                        </OverlayTrigger>\n                                        <td className=\"align-middle p-0\">\n                                            <Button\n                                                onClick={() => {\n                                                    RouteData.selecteduserid = value.id;\n                                                    this.props.history.push(\n                                                        AppRoutes.useredit.link ??\n                                                            AppRoutes.useredit.route\n                                                    );\n                                                }}>\n                                                <FormattedMessage id=\"generic.edit\" />\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <Button as={Link} to={AppRoutes.usercreate.link ?? AppRoutes.usercreate.route}>\n                        <FormattedMessage id=\"routes.usercreate\" />\n                    </Button>\n                </div>\n            );\n        }\n    }\n);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;"],"sourceRoot":""}