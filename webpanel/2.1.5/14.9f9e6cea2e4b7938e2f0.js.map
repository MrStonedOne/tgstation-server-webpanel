{"version":3,"sources":["webpack:///./src/components/views/Administration.tsx"],"names":["Administration","props","restart","bind","state","busy","this","setState","tasks","console","time","push","loadAdminInfo","Promise","all","timeEnd","response","AdminClient","getAdminInfo","code","StatusCode","ERROR","error","OK","adminInfo","payload","showRebootModal","restartServer","window","location","reload","text","handleClose","canReboot","resolvePermissionSet","context","user","administrationRights","AdministrationRights","RestartHost","canUpdate","ChangeVersion","canLogs","DownloadLogs","Fragment","onClose","undefined","className","id","fixedWidth","icon","serverInfo","windowsHost","faWindows","faLinux","href","trackedRepositoryUrl","version","latestVersion","variant","disabled","onClick","history","AppRoutes","admin_update","link","route","admin_logs","show","onHide","size","centered","Header","closeButton","Title","Body","Footer","React","Component","contextType","GeneralContext","withRouter"],"mappings":"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","file":"14.9f9e6cea2e4b7938e2f0.js","sourcesContent":["import { faLinux } from \"@fortawesome/free-brands-svg-icons/faLinux\";\nimport { faWindows } from \"@fortawesome/free-brands-svg-icons/faWindows\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../ApiClient/AdminClient\";\nimport { AdministrationRights } from \"../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../contexts/GeneralContext\";\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport { AppRoutes } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    adminInfo?: Components.Schemas.AdministrationResponse;\n    error?: InternalError<ErrorCode>;\n    busy: boolean;\n    showRebootModal?: boolean;\n}\n\nclass Administration extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.restart = this.restart.bind(this);\n\n        this.state = {\n            busy: false\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.setState({\n            busy: true\n        });\n        const tasks = [];\n\n        console.time(\"DataLoad\");\n        tasks.push(this.loadAdminInfo());\n\n        await Promise.all(tasks);\n        console.timeEnd(\"DataLoad\");\n        this.setState({\n            busy: false\n        });\n    }\n\n    private async loadAdminInfo() {\n        console.time(\"AdminLoad\");\n        const response = await AdminClient.getAdminInfo();\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.setState({\n                    error: response.error\n                });\n                break;\n            }\n            case StatusCode.OK: {\n                this.setState({\n                    adminInfo: response.payload\n                });\n                break;\n            }\n        }\n        console.timeEnd(\"AdminLoad\");\n    }\n\n    private async restart() {\n        this.setState({\n            showRebootModal: false,\n            busy: true\n        });\n        console.time(\"Reboot\");\n        const response = await AdminClient.restartServer();\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.setState({\n                    error: response.error\n                });\n                break;\n            }\n            case StatusCode.OK: {\n                window.location.reload();\n            }\n        }\n        this.setState({\n            busy: false\n        });\n        console.timeEnd(\"Reboot\");\n    }\n\n    public render(): ReactNode {\n        if (this.state.busy) {\n            return <Loading text=\"loading.admin\" />;\n        }\n\n        const handleClose = () => this.setState({ showRebootModal: false });\n        const handleOpen = () => this.setState({ showRebootModal: true });\n\n        const canReboot = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.RestartHost\n        );\n        const canUpdate = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.ChangeVersion\n        );\n        const canLogs = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.DownloadLogs\n        );\n\n        return (\n            <React.Fragment>\n                <ErrorAlert\n                    error={this.state.error}\n                    onClose={() => this.setState({ error: undefined })}\n                />\n                {this.state.adminInfo ? (\n                    <div className=\"text-center\">\n                        <h3 className=\" text-secondary\">\n                            <FormattedMessage id=\"view.admin.hostos\" />\n                            <FontAwesomeIcon\n                                fixedWidth\n                                icon={this.context.serverInfo.windowsHost ? faWindows : faLinux}\n                            />\n                        </h3>\n                        <h5 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.remote\" />\n                            <a href={this.state.adminInfo.trackedRepositoryUrl}>\n                                {this.state.adminInfo.trackedRepositoryUrl}\n                            </a>\n                        </h5>\n                        <h3 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.version.current\" />\n                            <span\n                                className={\n                                    this.context.serverInfo.version <\n                                    this.state.adminInfo.latestVersion\n                                        ? \"text-danger\"\n                                        : \"\"\n                                }>\n                                {this.context.serverInfo.version}\n                            </span>\n                        </h3>\n                        <h3 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.version.latest\" />\n                            <span\n                                className={\n                                    this.context.serverInfo.version <\n                                    this.state.adminInfo.latestVersion\n                                        ? \"text-danger\"\n                                        : \"\"\n                                }>\n                                {this.state.adminInfo.latestVersion}\n                            </span>\n                        </h3>\n                        <hr />\n                        <Button\n                            className=\"mr-2\"\n                            variant=\"danger\"\n                            disabled={!canReboot}\n                            onClick={handleOpen}>\n                            <FormattedMessage id=\"view.admin.reboot.button\" />\n                        </Button>\n                        <Button\n                            className=\"mr-2\"\n                            variant=\"primary\"\n                            disabled={!canUpdate}\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.admin_update.link || AppRoutes.admin_update.route\n                                );\n                            }}>\n                            <FormattedMessage id=\"view.admin.update.button\" />\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            disabled={!canLogs}\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.admin_logs.link || AppRoutes.admin_logs.route\n                                );\n                            }}>\n                            <FormattedMessage id=\"view.admin.logs.button\" />\n                        </Button>\n                        <Modal\n                            show={this.state.showRebootModal}\n                            onHide={handleClose}\n                            size=\"lg\"\n                            centered>\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    <FormattedMessage id=\"view.admin.reboot.modal.title\" />\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <FormattedMessage id=\"view.admin.reboot.modal.body\" />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button onClick={handleClose}>\n                                    <FormattedMessage id=\"generic.close\" />\n                                </Button>\n                                <Button variant=\"danger\" onClick={this.restart}>\n                                    <FormattedMessage id=\"view.admin.reboot.button\" />\n                                </Button>\n                            </Modal.Footer>\n                        </Modal>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\nAdministration.contextType = GeneralContext;\nexport default withRouter(Administration);\n"],"sourceRoot":""}