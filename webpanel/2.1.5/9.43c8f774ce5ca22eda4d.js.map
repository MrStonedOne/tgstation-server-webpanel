{"version":3,"sources":["webpack:///./src/components/views/Admin/Logs.tsx"],"names":["withRouter","props","state","errors","loading","logs","param","this","match","params","name","res","AdminClient","getLog","code","StatusCode","OK","regex","RegExp","entries","exec","payload","content","push","time","setState","viewedLog","logFile","ERROR","addError","error","response","getLogs","prevState","Array","from","download","className","map","err","index","key","onClose","prev","newarr","undefined","text","as","Link","to","AppRoutes","admin_logs","link","route","id","onClick","style","height","display","striped","hover","variant","position","top","value","bordered","responsive","logdate","Date","lastModified","logdiff","getTime","now","overlay","toLocaleString","ref","triggerHandler","numeric","updateIntervalInSeconds","history","reload","downloadLog","catch","e","InternalError","ErrorCode","APP_FAIL","jsError","Component"],"mappings":"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","file":"9.43c8f774ce5ca22eda4d.js","sourcesContent":["import React, { Component, CSSProperties } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport AdminClient from \"../../../ApiClient/AdminClient\";\nimport { LogFileResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport { DownloadedLog } from \"../../../ApiClient/models/DownloadedLog\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { download } from \"../../../utils/misc\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ name: string | undefined }> {}\n\ninterface LogEntry {\n    time: string;\n    content: string;\n}\n\ninterface Log {\n    logFile: DownloadedLog;\n    entries: LogEntry[];\n}\n\ninterface IState {\n    logs: LogFileResponse[];\n    viewedLog?: Log;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n}\n\nexport default withRouter(\n    class Logs extends Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                loading: true,\n                logs: []\n            };\n        }\n        public async componentDidMount(): Promise<void> {\n            const param = this.props.match.params.name;\n            if (param) {\n                const res = await AdminClient.getLog(param);\n\n                switch (res.code) {\n                    case StatusCode.OK: {\n                        const regex = RegExp(\n                            /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{7}[-+]\\d{2}:\\d{2})\\s+(.*?)(?=(?:\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{7}[-+]\\d{2}:\\d{2}|$))/,\n                            \"gs\"\n                        );\n                        let match;\n                        const entries: LogEntry[] = [];\n                        while ((match = regex.exec(res.payload.content)) !== null) {\n                            entries.push({\n                                time: match[1],\n                                content: match[2]\n                            });\n                        }\n                        this.setState({\n                            viewedLog: {\n                                logFile: res.payload,\n                                entries: entries\n                            }\n                        });\n                        break;\n                    }\n                    case StatusCode.ERROR: {\n                        this.addError(res.error);\n                        break;\n                    }\n                }\n            }\n            const response = await AdminClient.getLogs();\n\n            switch (response.code) {\n                case StatusCode.OK: {\n                    this.setState({\n                        logs: response.payload\n                    });\n                    break;\n                }\n                case StatusCode.ERROR: {\n                    this.addError(response.error);\n                    break;\n                }\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        private async downloadLog(name: string): Promise<void> {\n            const res = await AdminClient.getLog(name);\n            switch (res.code) {\n                case StatusCode.OK: {\n                    download(name, res.payload.content);\n                    break;\n                }\n                case StatusCode.ERROR: {\n                    this.addError(res.error);\n                    break;\n                }\n            }\n        }\n\n        public render(): React.ReactNode {\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.loading ? (\n                        <Loading text=\"loading.logs\" />\n                    ) : this.props.match.params.name && this.state.viewedLog ? (\n                        <div className=\"mx-5 mt-5\">\n                            <h3>{this.props.match.params.name}</h3>\n                            <Button\n                                className=\"mr-1\"\n                                as={Link}\n                                to={AppRoutes.admin_logs.link || AppRoutes.admin_logs.route}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    download(\n                                        this.props.match.params.name!,\n                                        this.state.viewedLog!.logFile.content\n                                    );\n                                }}>\n                                <FormattedMessage id=\"generic.download\" />\n                            </Button>\n                            <hr />\n                            <div\n                                style={{\n                                    height: \"60vh\",\n                                    display: \"block\"\n                                }}\n                                className=\"table-responsive\">\n                                <Table striped hover variant=\"dark\" className=\"text-left\">\n                                    <thead\n                                        className=\"bg-dark\"\n                                        style={\n                                            {\n                                                position: \"sticky\",\n                                                top: 0\n                                            } as CSSProperties\n                                        }>\n                                        <th>\n                                            <FormattedMessage id=\"generic.datetime\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.entry\" />\n                                        </th>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.viewedLog.entries.map(value => {\n                                            return (\n                                                <tr key={value.time}>\n                                                    <td className=\"py-1\">{value.time}</td>\n                                                    <td className=\"py-1\">\n                                                        <pre className=\"mb-0\">{value.content}</pre>\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                    </tbody>\n                                </Table>\n                            </div>\n                        </div>\n                    ) : (\n                        <Container className=\"mt-5 mb-5\">\n                            <Table striped bordered hover variant=\"dark\" responsive>\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.name\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.datetime\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.action\" />\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.logs.map((value, index) => {\n                                        const logdate = new Date(value.lastModified);\n                                        const logdiff = (logdate.getTime() - Date.now()) / 1000;\n\n                                        return (\n                                            <tr key={value.name}>\n                                                <td>{index}</td>\n                                                <td>{value.name}</td>\n                                                <OverlayTrigger\n                                                    overlay={\n                                                        <Tooltip id={`${value.name}-tooltip`}>\n                                                            {logdate.toLocaleString()}\n                                                        </Tooltip>\n                                                    }>\n                                                    {({ ref, ...triggerHandler }) => (\n                                                        <td {...triggerHandler}>\n                                                            <span\n                                                                ref={\n                                                                    ref as React.Ref<HTMLSpanElement>\n                                                                }>\n                                                                <FormattedRelativeTime\n                                                                    value={logdiff}\n                                                                    numeric=\"auto\"\n                                                                    updateIntervalInSeconds={1}\n                                                                />\n                                                            </span>\n                                                        </td>\n                                                    )}\n                                                </OverlayTrigger>\n                                                <td className=\"align-middle p-0\">\n                                                    <Button\n                                                        className=\"mr-1\"\n                                                        onClick={() => {\n                                                            this.props.history.push(\n                                                                (AppRoutes.admin_logs.link ||\n                                                                    AppRoutes.admin_logs.route) +\n                                                                    value.name +\n                                                                    \"/\",\n                                                                {\n                                                                    reload: true\n                                                                }\n                                                            );\n                                                        }}>\n                                                        <FormattedMessage id=\"generic.view\" />\n                                                    </Button>\n                                                    <Button\n                                                        onClick={() => {\n                                                            this.downloadLog(value.name).catch(\n                                                                (e: Error) => {\n                                                                    this.addError(\n                                                                        new InternalError<ErrorCode.APP_FAIL>(\n                                                                            ErrorCode.APP_FAIL,\n                                                                            {\n                                                                                jsError: e\n                                                                            }\n                                                                        )\n                                                                    );\n                                                                }\n                                                            );\n                                                        }}>\n                                                        <FormattedMessage id=\"generic.download\" />\n                                                    </Button>\n                                                </td>\n                                            </tr>\n                                        );\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Container>\n                    )}\n                </div>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}