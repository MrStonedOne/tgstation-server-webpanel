{"version":3,"sources":["webpack:///./src/components/views/Instance/Hosting.tsx","webpack:///./src/components/utils/WIPNotice.tsx","webpack:///./src/utils/globalObjects.ts"],"names":["Hosting","props","loadInstance","bind","RouteData","instanceid","match","params","id","selectedinstancehostingtab","tab","state","errors","loading","prevProps","this","setState","error","prevState","Array","from","push","response","InstanceClient","getInstance","parseInt","code","StatusCode","OK","instance","payload","response2","InstancePermissionSetClient","getCurrentInstancePermissionSet","currentInstanceUser","addError","text","LoadSpin","ByondPage","loadable","fallback","className","map","err","index","key","onClose","prev","newarr","undefined","name","as","Link","to","AppRoutes","instancelist","link","route","activeKey","onSelect","newkey","GlobalObjects","setupMode","window","history","pushState","document","title","instancehosting","eventKey","selfPermissionSet","resolvePermissionSet","context","user","selfInstancePermissionSet","React","Component","contextType","GeneralContext","withRouter","WIPNotice","border","Header","Body","Title","href","Text","VERSION","MODE","location","toString"],"mappings":"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","file":"7.baf6b5a80d8b1d762e9e.js","sourcesContent":["import loadable from \"@loadable/component\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { GlobalObjects } from \"../../../utils/globalObjects\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\n\ninterface IProps extends RouteComponentProps<{ id: string; tab?: string }> {}\n\ninterface IState {\n    instance?: Components.Schemas.InstanceResponse;\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    tab: string;\n    currentInstanceUser?: Components.Schemas.InstancePermissionSetResponse;\n}\n\nclass Hosting extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadInstance = this.loadInstance.bind(this);\n\n        RouteData.instanceid = props.match.params.id;\n        RouteData.selectedinstancehostingtab = props.match.params.tab;\n\n        this.state = {\n            tab: props.match.params.tab || \"byond\",\n            errors: [],\n            loading: true\n        };\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (prevProps.match.params.tab !== this.props.match.params.tab) {\n            this.setState({\n                tab: this.props.match.params.tab || \"byond\"\n            });\n        }\n    }\n\n    public async componentDidMount() {\n        this.setState({\n            loading: true\n        });\n\n        await this.loadInstance();\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async loadInstance() {\n        this.setState({\n            loading: true\n        });\n        const response = await InstanceClient.getInstance(parseInt(this.props.match.params.id));\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                response.payload.id\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    currentInstanceUser: response2.payload\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        // noinspection DuplicatedCode\n        const changetabs = (newkey: string | null) => {\n            if (!newkey) return;\n\n            RouteData.instanceid = this.props.match.params.id;\n            RouteData.selectedinstancehostingtab = newkey;\n            if (!GlobalObjects.setupMode) {\n                window.history.pushState(\n                    null,\n                    window.document.title,\n                    AppRoutes.instancehosting.link || AppRoutes.instancehosting.route\n                );\n            }\n            this.setState({\n                tab: newkey\n            });\n        };\n        const LoadSpin = <Loading text={\"loading.page\"} />;\n\n        //should always be a react component\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        const ByondPage = loadable(() => import(`./Hosting/Byond`), {\n            fallback: LoadSpin\n        });\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.instance ? (\n                    <h3>{`${this.state.instance.name} (${this.state.instance.id})`}</h3>\n                ) : (\n                    <h3>\n                        <FormattedMessage id=\"generic.assert.noinstance\" />\n                    </h3>\n                )}\n                <Button as={Link} to={AppRoutes.instancelist.link || AppRoutes.instancelist.route}>\n                    <FormattedMessage id=\"generic.goback\" />\n                </Button>\n                {!this.state.instance ? (\n                    <FormattedMessage id=\"generic.assert.noinstance\" />\n                ) : !this.state.currentInstanceUser ? (\n                    <FormattedMessage id=\"generic.assert.nopermissionset\" />\n                ) : (\n                    <Tabs\n                        className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\"\n                        activeKey={this.state.tab}\n                        onSelect={changetabs}>\n                        <Tab\n                            eventKey=\"byond\"\n                            title={<FormattedMessage id=\"view.instance.hosting.byond\" />}>\n                            <ByondPage\n                                instance={this.state.instance}\n                                selfPermissionSet={resolvePermissionSet(this.context.user)}\n                                selfInstancePermissionSet={this.state.currentInstanceUser}\n                            />\n                        </Tab>\n                        <Tab\n                            eventKey=\"users\"\n                            title={<FormattedMessage id=\"view.instance.config.instanceusers\" />}>\n                            <WIPNotice />\n                        </Tab>\n                        <Tab\n                            eventKey=\"chatbots\"\n                            title={<FormattedMessage id=\"view.instance.config.chatbots\" />}>\n                            <WIPNotice />\n                        </Tab>\n                    </Tabs>\n                )}\n            </div>\n        );\n    }\n}\nHosting.contextType = GeneralContext;\nexport default withRouter(Hosting);\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","//this should be a proper data store thing eventually but it will do 4 now\nimport Translation from \"../translations/Translation\";\n\nexport interface GlobalObjects {\n    translation?: Translation;\n    setupMode?: boolean;\n}\n\nexport const GlobalObjects: GlobalObjects = {};\n"],"sourceRoot":""}