{"version":3,"sources":["webpack:///./src/components/views/Administration.tsx"],"names":["withRouter","props","restart","bind","state","busy","canReboot","canUpdate","canLogs","this","setState","tasks","console","time","push","loadAdminInfo","loadServerInfo","checkRebootRights","checkUpdateRights","checkLogsRights","Promise","all","timeEnd","response","ServerClient","getServerInfo","code","StatusCode","ERROR","error","OK","serverInfo","payload","AdminClient","getAdminInfo","adminInfo","UserClient","getCurrentUser","resolvePermissionSet","administrationRights","AdministrationRights","RestartHost","ChangeVersion","DownloadLogs","showRebootModal","restartServer","window","location","reload","text","handleClose","Fragment","onClose","undefined","className","id","fixedWidth","icon","windowsHost","faWindows","faLinux","href","trackedRepositoryUrl","version","latestVersion","variant","disabled","onClick","history","AppRoutes","admin_update","link","route","admin_logs","show","onHide","size","centered","Header","closeButton","Title","Body","Footer","React","Component"],"mappings":"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","file":"14.165a7a0f459053467071.js","sourcesContent":["import { faLinux } from \"@fortawesome/free-brands-svg-icons/faLinux\";\nimport { faWindows } from \"@fortawesome/free-brands-svg-icons/faWindows\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../ApiClient/AdminClient\";\nimport { AdministrationRights } from \"../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport { AppRoutes } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    adminInfo?: Components.Schemas.AdministrationResponse;\n    serverInfo?: Components.Schemas.ServerInformationResponse;\n    error?: InternalError<ErrorCode>;\n    busy: boolean;\n    canReboot: boolean;\n    canUpdate: boolean;\n    canLogs: boolean;\n    showRebootModal?: boolean;\n}\n\nexport default withRouter(\n    class Administration extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n            this.restart = this.restart.bind(this);\n\n            this.state = {\n                busy: false,\n                canReboot: false,\n                canUpdate: false,\n                canLogs: false\n            };\n        }\n\n        public async componentDidMount(): Promise<void> {\n            this.setState({\n                busy: true\n            });\n            const tasks = [];\n\n            console.time(\"DataLoad\");\n            tasks.push(this.loadAdminInfo());\n            tasks.push(this.loadServerInfo());\n            tasks.push(this.checkRebootRights());\n            tasks.push(this.checkUpdateRights());\n            tasks.push(this.checkLogsRights());\n\n            await Promise.all(tasks);\n            console.timeEnd(\"DataLoad\");\n            this.setState({\n                busy: false\n            });\n        }\n\n        private async loadServerInfo() {\n            console.time(\"ServerLoad\");\n            const response = await ServerClient.getServerInfo();\n            switch (response.code) {\n                case StatusCode.ERROR: {\n                    this.setState({\n                        error: response.error\n                    });\n                    break;\n                }\n                case StatusCode.OK: {\n                    this.setState({\n                        serverInfo: response.payload\n                    });\n                    break;\n                }\n            }\n            console.timeEnd(\"ServerLoad\");\n        }\n\n        private async loadAdminInfo() {\n            console.time(\"AdminLoad\");\n            const response = await AdminClient.getAdminInfo();\n            switch (response.code) {\n                case StatusCode.ERROR: {\n                    this.setState({\n                        error: response.error\n                    });\n                    break;\n                }\n                case StatusCode.OK: {\n                    this.setState({\n                        adminInfo: response.payload\n                    });\n                    break;\n                }\n            }\n            console.timeEnd(\"AdminLoad\");\n        }\n\n        private async checkRebootRights() {\n            const response = await UserClient.getCurrentUser();\n\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    canReboot: !!(\n                        resolvePermissionSet(response.payload).administrationRights &\n                        AdministrationRights.RestartHost\n                    )\n                });\n            }\n        }\n\n        private async checkUpdateRights() {\n            const response = await UserClient.getCurrentUser();\n\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    canUpdate: !!(\n                        resolvePermissionSet(response.payload).administrationRights &\n                        AdministrationRights.ChangeVersion\n                    )\n                });\n            }\n        }\n\n        private async checkLogsRights() {\n            const response = await UserClient.getCurrentUser();\n\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    canLogs: !!(\n                        resolvePermissionSet(response.payload).administrationRights &\n                        AdministrationRights.DownloadLogs\n                    )\n                });\n            }\n        }\n\n        private async restart() {\n            this.setState({\n                showRebootModal: false,\n                busy: true\n            });\n            console.time(\"Reboot\");\n            const response = await AdminClient.restartServer();\n            switch (response.code) {\n                case StatusCode.ERROR: {\n                    this.setState({\n                        error: response.error\n                    });\n                    break;\n                }\n                case StatusCode.OK: {\n                    window.location.reload();\n                }\n            }\n            this.setState({\n                busy: false\n            });\n            console.timeEnd(\"Reboot\");\n        }\n\n        public render(): ReactNode {\n            if (this.state.busy) {\n                return <Loading text=\"loading.admin\" />;\n            }\n\n            const handleClose = () => this.setState({ showRebootModal: false });\n            const handleOpen = () => this.setState({ showRebootModal: true });\n\n            return (\n                <React.Fragment>\n                    <ErrorAlert\n                        error={this.state.error}\n                        onClose={() => this.setState({ error: undefined })}\n                    />\n                    {this.state.adminInfo && this.state.serverInfo ? (\n                        <div className=\"text-center\">\n                            <h3 className=\" text-secondary\">\n                                <FormattedMessage id=\"view.admin.hostos\" />\n                                <FontAwesomeIcon\n                                    fixedWidth\n                                    icon={this.state.serverInfo.windowsHost ? faWindows : faLinux}\n                                />\n                            </h3>\n                            <h5 className=\"text-secondary\">\n                                <FormattedMessage id=\"view.admin.remote\" />\n                                <a href={this.state.adminInfo.trackedRepositoryUrl}>\n                                    {this.state.adminInfo.trackedRepositoryUrl}\n                                </a>\n                            </h5>\n                            <h3 className=\"text-secondary\">\n                                <FormattedMessage id=\"view.admin.version.current\" />\n                                <span\n                                    className={\n                                        this.state.serverInfo.version <\n                                        this.state.adminInfo.latestVersion\n                                            ? \"text-danger\"\n                                            : \"\"\n                                    }>\n                                    {this.state.serverInfo.version}\n                                </span>\n                            </h3>\n                            <h3 className=\"text-secondary\">\n                                <FormattedMessage id=\"view.admin.version.latest\" />\n                                <span\n                                    className={\n                                        this.state.serverInfo.version <\n                                        this.state.adminInfo.latestVersion\n                                            ? \"text-danger\"\n                                            : \"\"\n                                    }>\n                                    {this.state.adminInfo.latestVersion}\n                                </span>\n                            </h3>\n                            <hr />\n                            <Button\n                                className=\"mr-2\"\n                                variant=\"danger\"\n                                disabled={!this.state.canReboot}\n                                onClick={handleOpen}>\n                                <FormattedMessage id=\"view.admin.reboot.button\" />\n                            </Button>\n                            <Button\n                                className=\"mr-2\"\n                                variant=\"primary\"\n                                disabled={!this.state.canUpdate}\n                                onClick={() => {\n                                    this.props.history.push(\n                                        AppRoutes.admin_update.link || AppRoutes.admin_update.route\n                                    );\n                                }}>\n                                <FormattedMessage id=\"view.admin.update.button\" />\n                            </Button>\n                            <Button\n                                variant=\"primary\"\n                                disabled={!this.state.canLogs}\n                                onClick={() => {\n                                    this.props.history.push(\n                                        AppRoutes.admin_logs.link || AppRoutes.admin_logs.route\n                                    );\n                                }}>\n                                <FormattedMessage id=\"view.admin.logs.button\" />\n                            </Button>\n                            <Modal\n                                show={this.state.showRebootModal}\n                                onHide={handleClose}\n                                size=\"lg\"\n                                centered>\n                                <Modal.Header closeButton>\n                                    <Modal.Title>\n                                        <FormattedMessage id=\"view.admin.reboot.modal.title\" />\n                                    </Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body>\n                                    <FormattedMessage id=\"view.admin.reboot.modal.body\" />\n                                </Modal.Body>\n                                <Modal.Footer>\n                                    <Button onClick={handleClose}>\n                                        <FormattedMessage id=\"generic.close\" />\n                                    </Button>\n                                    <Button variant=\"danger\" onClick={this.restart}>\n                                        <FormattedMessage id=\"view.admin.reboot.button\" />\n                                    </Button>\n                                </Modal.Footer>\n                            </Modal>\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </React.Fragment>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}