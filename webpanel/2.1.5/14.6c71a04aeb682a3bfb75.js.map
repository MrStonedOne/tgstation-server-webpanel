{"version":3,"sources":["webpack:///./src/components/views/Administration.tsx"],"names":["Administration","props","restart","bind","state","busy","this","setState","tasks","console","time","push","loadAdminInfo","loadServerInfo","Promise","all","timeEnd","response","ServerClient","getServerInfo","code","StatusCode","ERROR","error","OK","serverInfo","payload","AdminClient","getAdminInfo","adminInfo","showRebootModal","restartServer","window","location","reload","text","context","loading","handleClose","canReboot","resolvePermissionSet","user","administrationRights","AdministrationRights","RestartHost","canUpdate","ChangeVersion","canLogs","DownloadLogs","Fragment","onClose","undefined","className","id","fixedWidth","icon","windowsHost","faWindows","faLinux","href","trackedRepositoryUrl","version","latestVersion","variant","disabled","onClick","history","AppRoutes","admin_update","link","route","admin_logs","show","onHide","size","centered","Header","closeButton","Title","Body","Footer","React","Component","contextType","UserContext","withRouter"],"mappings":"0wDA+BMA,E,8QAGF,WAAmBC,GAAe,a,4FAAA,UAC9B,cAAMA,IACDC,QAAU,EAAKA,QAAQC,KAAb,MAEf,EAAKC,MAAQ,CACTC,MAAM,GALoB,E,oDASlC,YACIC,KAAKC,SAAS,CACVF,MAAM,IAEV,IAAMG,EAAQ,GAEdC,QAAQC,KAAK,YACbF,EAAMG,KAAKL,KAAKM,iBAChBJ,EAAMG,KAAKL,KAAKO,wBAEVC,QAAQC,IAAIP,GAClBC,QAAQO,QAAQ,YAChBV,KAAKC,SAAS,CACVF,MAAM,O,+EAId,YACII,QAAQC,KAAK,cACb,IAAMO,QAAiBC,IAAaC,gBACpC,OAAQF,EAASG,MACb,KAAKC,IAAWC,MACZhB,KAAKC,SAAS,CACVgB,MAAON,EAASM,QAEpB,MAEJ,KAAKF,IAAWG,GACZlB,KAAKC,SAAS,CACVkB,WAAYR,EAASS,UAKjCjB,QAAQO,QAAQ,iB,8EAGpB,YACIP,QAAQC,KAAK,aACb,IAAMO,QAAiBU,IAAYC,eACnC,OAAQX,EAASG,MACb,KAAKC,IAAWC,MACZhB,KAAKC,SAAS,CACVgB,MAAON,EAASM,QAEpB,MAEJ,KAAKF,IAAWG,GACZlB,KAAKC,SAAS,CACVsB,UAAWZ,EAASS,UAKhCjB,QAAQO,QAAQ,gB,wEAGpB,YACIV,KAAKC,SAAS,CACVuB,iBAAiB,EACjBzB,MAAM,IAEVI,QAAQC,KAAK,UACb,IAAMO,QAAiBU,IAAYI,gBACnC,OAAQd,EAASG,MACb,KAAKC,IAAWC,MACZhB,KAAKC,SAAS,CACVgB,MAAON,EAASM,QAEpB,MAEJ,KAAKF,IAAWG,GACZQ,OAAOC,SAASC,SAGxB5B,KAAKC,SAAS,CACVF,MAAM,IAEVI,QAAQO,QAAQ,a,iEAGpB,WAA2B,WACvB,GAAIV,KAAKF,MAAMC,KACX,OAAO,kBAAC,IAAD,CAAS8B,KAAK,kBAGzB,GAAI7B,KAAK8B,QAAQC,QACb,OAAO,kBAAC,IAAD,CAASF,KAAK,sBAGzB,IAAMG,EAAc,kBAAM,EAAK/B,SAAS,CAAEuB,iBAAiB,KAGrDS,KACFC,YAAqBlC,KAAK8B,QAAQK,MAAMC,qBACxCC,IAAqBC,aAEnBC,KACFL,YAAqBlC,KAAK8B,QAAQK,MAAMC,qBACxCC,IAAqBG,eAEnBC,KACFP,YAAqBlC,KAAK8B,QAAQK,MAAMC,qBACxCC,IAAqBK,cAGzB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CACI1B,MAAOjB,KAAKF,MAAMmB,MAClB2B,QAAS,kBAAM,EAAK3C,SAAS,CAAEgB,WAAO4B,OAEzC7C,KAAKF,MAAMyB,WAAavB,KAAKF,MAAMqB,WAChC,yBAAK2B,UAAU,eACX,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAkBC,GAAG,sBACrB,kBAAC,IAAD,CACIC,YAAU,EACVC,KAAMjD,KAAKF,MAAMqB,WAAW+B,YAAcC,YAAYC,aAG9D,wBAAIN,UAAU,kBACV,kBAAC,IAAD,CAAkBC,GAAG,sBACrB,uBAAGM,KAAMrD,KAAKF,MAAMyB,UAAU+B,sBACzBtD,KAAKF,MAAMyB,UAAU+B,uBAG9B,wBAAIR,UAAU,kBACV,kBAAC,IAAD,CAAkBC,GAAG,+BACrB,0BACID,UACI9C,KAAKF,MAAMqB,WAAWoC,QACtBvD,KAAKF,MAAMyB,UAAUiC,cACf,cACA,IAETxD,KAAKF,MAAMqB,WAAWoC,UAG/B,wBAAIT,UAAU,kBACV,kBAAC,IAAD,CAAkBC,GAAG,8BACrB,0BACID,UACI9C,KAAKF,MAAMqB,WAAWoC,QACtBvD,KAAKF,MAAMyB,UAAUiC,cACf,cACA,IAETxD,KAAKF,MAAMyB,UAAUiC,gBAG9B,6BACA,kBAAC,IAAD,CACIV,UAAU,OACVW,QAAQ,SACRC,UAAWzB,EACX0B,QAjED,kBAAM,EAAK1D,SAAS,CAAEuB,iBAAiB,MAkEtC,kBAAC,IAAD,CAAkBuB,GAAG,8BAEzB,kBAAC,IAAD,CACID,UAAU,OACVW,QAAQ,UACRC,UAAWnB,EACXoB,QAAS,WACL,EAAKhE,MAAMiE,QAAQvD,KACfwD,IAAUC,aAAaC,MAAQF,IAAUC,aAAaE,SAG9D,kBAAC,IAAD,CAAkBjB,GAAG,8BAEzB,kBAAC,IAAD,CACIU,QAAQ,UACRC,UAAWjB,EACXkB,QAAS,WACL,EAAKhE,MAAMiE,QAAQvD,KACfwD,IAAUI,WAAWF,MAAQF,IAAUI,WAAWD,SAG1D,kBAAC,IAAD,CAAkBjB,GAAG,4BAEzB,kBAAC,IAAD,CACImB,KAAMlE,KAAKF,MAAM0B,gBACjB2C,OAAQnC,EACRoC,KAAK,KACLC,UAAQ,GACR,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACrB,kBAAC,IAAMC,MAAP,KACI,kBAAC,IAAD,CAAkBzB,GAAG,oCAG7B,kBAAC,IAAM0B,KAAP,KACI,kBAAC,IAAD,CAAkB1B,GAAG,kCAEzB,kBAAC,IAAM2B,OAAP,KACI,kBAAC,IAAD,CAAQf,QAAS3B,GACb,kBAAC,IAAD,CAAkBe,GAAG,mBAEzB,kBAAC,IAAD,CAAQU,QAAQ,SAASE,QAAS3D,KAAKJ,SACnC,kBAAC,IAAD,CAAkBmD,GAAG,iCAMrC,S,8BAxNS4B,IAAMC,WA8NnClF,EAAemF,YAAcC,IACdC,sBAAWrF","file":"14.6c71a04aeb682a3bfb75.js","sourcesContent":["import { faLinux } from \"@fortawesome/free-brands-svg-icons/faLinux\";\nimport { faWindows } from \"@fortawesome/free-brands-svg-icons/faWindows\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../ApiClient/AdminClient\";\nimport { AdministrationRights } from \"../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport { AppRoutes } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    adminInfo?: Components.Schemas.AdministrationResponse;\n    serverInfo?: Components.Schemas.ServerInformationResponse;\n    error?: InternalError<ErrorCode>;\n    busy: boolean;\n    showRebootModal?: boolean;\n}\n\nclass Administration extends React.Component<IProps, IState> {\n    public declare context: UserContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.restart = this.restart.bind(this);\n\n        this.state = {\n            busy: false\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.setState({\n            busy: true\n        });\n        const tasks = [];\n\n        console.time(\"DataLoad\");\n        tasks.push(this.loadAdminInfo());\n        tasks.push(this.loadServerInfo());\n\n        await Promise.all(tasks);\n        console.timeEnd(\"DataLoad\");\n        this.setState({\n            busy: false\n        });\n    }\n\n    private async loadServerInfo() {\n        console.time(\"ServerLoad\");\n        const response = await ServerClient.getServerInfo();\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.setState({\n                    error: response.error\n                });\n                break;\n            }\n            case StatusCode.OK: {\n                this.setState({\n                    serverInfo: response.payload\n                });\n                break;\n            }\n        }\n        console.timeEnd(\"ServerLoad\");\n    }\n\n    private async loadAdminInfo() {\n        console.time(\"AdminLoad\");\n        const response = await AdminClient.getAdminInfo();\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.setState({\n                    error: response.error\n                });\n                break;\n            }\n            case StatusCode.OK: {\n                this.setState({\n                    adminInfo: response.payload\n                });\n                break;\n            }\n        }\n        console.timeEnd(\"AdminLoad\");\n    }\n\n    private async restart() {\n        this.setState({\n            showRebootModal: false,\n            busy: true\n        });\n        console.time(\"Reboot\");\n        const response = await AdminClient.restartServer();\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.setState({\n                    error: response.error\n                });\n                break;\n            }\n            case StatusCode.OK: {\n                window.location.reload();\n            }\n        }\n        this.setState({\n            busy: false\n        });\n        console.timeEnd(\"Reboot\");\n    }\n\n    public render(): ReactNode {\n        if (this.state.busy) {\n            return <Loading text=\"loading.admin\" />;\n        }\n\n        if (this.context.loading) {\n            return <Loading text=\"loading.user.load\" />;\n        }\n\n        const handleClose = () => this.setState({ showRebootModal: false });\n        const handleOpen = () => this.setState({ showRebootModal: true });\n\n        const canReboot = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.RestartHost\n        );\n        const canUpdate = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.ChangeVersion\n        );\n        const canLogs = !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.DownloadLogs\n        );\n\n        return (\n            <React.Fragment>\n                <ErrorAlert\n                    error={this.state.error}\n                    onClose={() => this.setState({ error: undefined })}\n                />\n                {this.state.adminInfo && this.state.serverInfo ? (\n                    <div className=\"text-center\">\n                        <h3 className=\" text-secondary\">\n                            <FormattedMessage id=\"view.admin.hostos\" />\n                            <FontAwesomeIcon\n                                fixedWidth\n                                icon={this.state.serverInfo.windowsHost ? faWindows : faLinux}\n                            />\n                        </h3>\n                        <h5 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.remote\" />\n                            <a href={this.state.adminInfo.trackedRepositoryUrl}>\n                                {this.state.adminInfo.trackedRepositoryUrl}\n                            </a>\n                        </h5>\n                        <h3 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.version.current\" />\n                            <span\n                                className={\n                                    this.state.serverInfo.version <\n                                    this.state.adminInfo.latestVersion\n                                        ? \"text-danger\"\n                                        : \"\"\n                                }>\n                                {this.state.serverInfo.version}\n                            </span>\n                        </h3>\n                        <h3 className=\"text-secondary\">\n                            <FormattedMessage id=\"view.admin.version.latest\" />\n                            <span\n                                className={\n                                    this.state.serverInfo.version <\n                                    this.state.adminInfo.latestVersion\n                                        ? \"text-danger\"\n                                        : \"\"\n                                }>\n                                {this.state.adminInfo.latestVersion}\n                            </span>\n                        </h3>\n                        <hr />\n                        <Button\n                            className=\"mr-2\"\n                            variant=\"danger\"\n                            disabled={!canReboot}\n                            onClick={handleOpen}>\n                            <FormattedMessage id=\"view.admin.reboot.button\" />\n                        </Button>\n                        <Button\n                            className=\"mr-2\"\n                            variant=\"primary\"\n                            disabled={!canUpdate}\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.admin_update.link || AppRoutes.admin_update.route\n                                );\n                            }}>\n                            <FormattedMessage id=\"view.admin.update.button\" />\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            disabled={!canLogs}\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.admin_logs.link || AppRoutes.admin_logs.route\n                                );\n                            }}>\n                            <FormattedMessage id=\"view.admin.logs.button\" />\n                        </Button>\n                        <Modal\n                            show={this.state.showRebootModal}\n                            onHide={handleClose}\n                            size=\"lg\"\n                            centered>\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    <FormattedMessage id=\"view.admin.reboot.modal.title\" />\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <FormattedMessage id=\"view.admin.reboot.modal.body\" />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button onClick={handleClose}>\n                                    <FormattedMessage id=\"generic.close\" />\n                                </Button>\n                                <Button variant=\"danger\" onClick={this.restart}>\n                                    <FormattedMessage id=\"view.admin.reboot.button\" />\n                                </Button>\n                            </Modal.Footer>\n                        </Modal>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\nAdministration.contextType = UserContext;\nexport default withRouter(Administration);\n"],"sourceRoot":""}