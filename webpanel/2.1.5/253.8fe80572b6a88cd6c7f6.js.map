{"version":3,"sources":["webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Tabs.js","webpack://tgstation-server-control-panel/./src/utils/globalObjects.ts","webpack://tgstation-server-control-panel/./src/components/views/User/Edit.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Badge.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Row.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Tab.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabContainer.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabContent.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabPane.js"],"names":["renderTab","child","_child$props","props","title","eventKey","disabled","tabClassName","id","NavItem","as","NavLink","className","Tabs","_useUncontrolled","activeKey","onSelect","transition","mountOnEnter","unmountOnExit","children","_useUncontrolled$acti","defaultActiveKey","getDefaultActiveKey","controlledProps","TabContainer","Nav","role","TabContent","childProps","TabPane","defaultProps","variant","displayName","GlobalObjects","UserEdit","context","createGroup","bind","changeGroup","user","Error","state","errors","loading","saving","permsadmin","permsinstance","tab","match","params","groups","group","Object","assign","users","createGroupName","newOAuthConnections","RouteData","parseInt","resolvePermissionSet","this","administrationRights","AdministrationRights","userid","prevProps","setState","response","UserClient","code","StatusCode","addError","error","loadUser","payload","loadGroups","canRead","UserGroupClient","oAuthConnections","Array","from","loadEnums","entries","forEach","k","v","isNaN","key","toLowerCase","val","currentVal","prevState","bitflag","InstanceManagerRights","instanceManagerRights","push","Loading","text","map","err","index","ErrorAlert","onClose","prev","newarr","undefined","canEdit","Alert","systemIdentifier","Badge","enabled","name","Button","Link","to","AppRoutes","newkey","setupMode","history","Tab","Col","lg","Row","xs","md","toString","OverlayTrigger","overlay","Tooltip","Date","createdAt","toLocaleString","ref","triggerHandler","value","getTime","now","numeric","updateIntervalInSeconds","createdBy","canEditOwnPassword","onClick","renderPerms","renderGroups","renderOAuth","oAuthProviderInfos","serverInfo","currentOAuthConnections","keys","length","save","InternalError","ErrorCode","jsError","canEditOauth","canEditOwnOAuth","oAuthConnection","idx","InputGroup","Form","custom","onChange","event","provider","target","idx2","txt","selected","FormControl","externalUserId","hidden","filter","icon","faTrash","some","x","trim","every","htmlFor","defaultChecked","values","count","show","deleteGroup","faPlus","e","permissionSet","realID","substr","concat","enumname","permprefix","inputs","setBold","inputRef","fieldRef","defaultVal","current","checked","classList","add","remove","setAll","permname","refs","input","field","newset","response2","xl","perm","React","inline","type","label","fixedWidth","contextType","GeneralContext","withRouter","_ref","bsPrefix","pill","_ref$as","Component","prefix","InputGroupAppend","InputGroupPrepend","InputGroupText","size","InputGroupWithExtras","Text","Radio","Checkbox","Append","Prepend","DEVICE_SIZES","noGutters","decoratedBsPrefix","sizePrefix","classes","brkPoint","cols","propValue","infix","_React$Component","apply","arguments","prototype","render","Container","Content","Pane","generateCustomChildId","generateChildId","useMemo","tabContext","getControlledId","getControllerId","_useTabContext","useContext","rest","shouldTransition","active","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","pane","in"],"mappings":"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","file":"253.8fe80572b6a88cd6c7f6.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport requiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport { useUncontrolled } from 'uncontrollable';\nimport Nav from './Nav';\nimport NavLink from './NavLink';\nimport NavItem from './NavItem';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\nimport { forEach, map } from './ElementChildren';\nvar defaultProps = {\n  variant: 'tabs',\n  mountOnEnter: false,\n  unmountOnExit: false\n};\n\nfunction getDefaultActiveKey(children) {\n  var defaultActiveKey;\n  forEach(children, function (child) {\n    if (defaultActiveKey == null) {\n      defaultActiveKey = child.props.eventKey;\n    }\n  });\n  return defaultActiveKey;\n}\n\nfunction renderTab(child) {\n  var _child$props = child.props,\n      title = _child$props.title,\n      eventKey = _child$props.eventKey,\n      disabled = _child$props.disabled,\n      tabClassName = _child$props.tabClassName,\n      id = _child$props.id;\n\n  if (title == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(NavItem, {\n    as: NavLink,\n    eventKey: eventKey,\n    disabled: disabled,\n    id: id,\n    className: tabClassName\n  }, title);\n}\n\nvar Tabs = function Tabs(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      onSelect = _useUncontrolled.onSelect,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children,\n      _useUncontrolled$acti = _useUncontrolled.activeKey,\n      activeKey = _useUncontrolled$acti === void 0 ? getDefaultActiveKey(children) : _useUncontrolled$acti,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"id\", \"onSelect\", \"transition\", \"mountOnEnter\", \"unmountOnExit\", \"children\", \"activeKey\"]);\n\n  return /*#__PURE__*/React.createElement(TabContainer, {\n    id: id,\n    activeKey: activeKey,\n    onSelect: onSelect,\n    transition: transition,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, /*#__PURE__*/React.createElement(Nav, _extends({}, controlledProps, {\n    role: \"tablist\",\n    as: \"nav\"\n  }), map(children, renderTab)), /*#__PURE__*/React.createElement(TabContent, null, map(children, function (child) {\n    var childProps = _extends({}, child.props);\n\n    delete childProps.title;\n    delete childProps.disabled;\n    delete childProps.tabClassName;\n    return /*#__PURE__*/React.createElement(TabPane, childProps);\n  })));\n};\n\nTabs.defaultProps = defaultProps;\nTabs.displayName = 'Tabs';\nexport default Tabs;","//this should be a proper data store thing eventually but it will do 4 now\nimport Translation from \"../translations/Translation\";\n\nexport interface GlobalObjects {\n    translation?: Translation;\n    setupMode?: boolean;\n}\n\nexport const GlobalObjects: GlobalObjects = {};\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons/faTrash\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FormEvent } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n    AdministrationRights,\n    InstanceManagerRights,\n    OAuthProvider\n} from \"../../../ApiClient/generatedcode/_enums\";\nimport {\n    OAuthConnection,\n    PermissionSet,\n    UserGroup,\n    UserGroupResponse,\n    UserResponse\n} from \"../../../ApiClient/generatedcode/schemas\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport UserGroupClient from \"../../../ApiClient/UserGroupClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { GlobalObjects } from \"../../../utils/globalObjects\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string; tab?: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    user?: UserResponse;\n    newOAuthConnections: OAuthConnection[];\n    loading: boolean;\n    saving: boolean;\n    permsadmin: { [key: string]: Permission };\n    permsinstance: { [key: string]: Permission };\n    tab: string;\n    groups: UserGroupResponse[];\n    createGroupName: string;\n}\n\ninterface Permission {\n    readonly bitflag: number;\n    readonly currentVal: boolean;\n}\n\nclass UserEdit extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n\n        this.createGroup = this.createGroup.bind(this);\n        this.changeGroup = this.changeGroup.bind(this);\n\n        if (!context.user) {\n            throw Error(\"UserEdit: this.context.user is null!\");\n        }\n\n        this.state = {\n            errors: [],\n            loading: true,\n            saving: false,\n            permsadmin: {},\n            permsinstance: {},\n            tab: props.match.params.tab || \"info\",\n            groups: context.user.group ? [Object.assign({ users: [] }, context.user.group)] : [],\n            createGroupName: \"\",\n            newOAuthConnections: []\n        };\n\n        RouteData.selecteduserid = parseInt(props.match.params.id);\n        RouteData.selectedusertab = props.match.params.tab;\n    }\n\n    private get canEdit() {\n        return (\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.WriteUsers\n        );\n    }\n\n    private get canRead() {\n        return !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.ReadUsers\n        );\n    }\n\n    private get canEditOwnPassword() {\n        const userid = parseInt(this.props.match.params.id);\n        return (\n            !!(\n                resolvePermissionSet(this.context.user).administrationRights &\n                AdministrationRights.EditOwnPassword\n            ) && this.context.user.id === userid\n        );\n    }\n\n    private get canEditOwnOAuth() {\n        const userid = parseInt(this.props.match.params.id);\n        return (\n            !!(\n                resolvePermissionSet(this.context.user).administrationRights &\n                AdministrationRights.EditOwnOAuthConnections\n            ) && this.context.user.id === userid\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (prevProps.match.params.tab !== this.props.match.params.tab) {\n            this.setState({\n                tab: this.props.match.params.tab || \"info\"\n            });\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const userid = parseInt(this.props.match.params.id);\n        const response = await UserClient.getUser(userid);\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                break;\n            }\n            case StatusCode.OK: {\n                this.loadUser(response.payload);\n                break;\n            }\n        }\n\n        await this.loadGroups();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async loadGroups() {\n        if (!this.canRead) return;\n        const groups = await UserGroupClient.listGroups();\n        if (groups.code === StatusCode.OK) {\n            this.setState({\n                groups: groups.payload\n            });\n        } else {\n            this.addError(groups.error);\n        }\n    }\n\n    private loadUser(user: UserResponse) {\n        this.setState({\n            user,\n            newOAuthConnections: user.oAuthConnections ? Array.from(user.oAuthConnections) : []\n        });\n        this.loadEnums();\n    }\n\n    private loadEnums(): void {\n        // noinspection DuplicatedCode\n        Object.entries(AdministrationRights).forEach(([k, v]) => {\n            /* enums are objects that are reverse mapped, for example, an enum with a = 1 and b = 2 would look like this:\n             * {\n             *   \"a\": 1,\n             *   \"b\": 2,\n             *   1: \"a\",\n             *   2: \"b\"\n             * }\n             * so we need to drop everything that doesnt resolve to a string because otherwise we end up with twice the values\n             */\n            if (!isNaN(parseInt(k))) return;\n\n            const key = k.toLowerCase();\n            const val = v as number;\n\n            //we dont care about nothing\n            if (key == \"none\") return;\n\n            const currentVal = !!(\n                resolvePermissionSet(this.state.user!).administrationRights & val\n            );\n            this.setState(prevState => {\n                return {\n                    permsadmin: {\n                        ...prevState.permsadmin,\n                        [key]: {\n                            currentVal: currentVal,\n                            bitflag: val\n                        }\n                    }\n                };\n            });\n        });\n        // noinspection DuplicatedCode\n        Object.entries(InstanceManagerRights).forEach(([k, v]) => {\n            if (!isNaN(parseInt(k))) return;\n\n            const key = k.toLowerCase();\n            const val = v as number;\n\n            //we dont care about nothing\n            if (key == \"none\") return;\n\n            const currentVal = !!(\n                resolvePermissionSet(this.state.user!).instanceManagerRights & val\n            );\n            this.setState(prevState => {\n                return {\n                    permsinstance: {\n                        ...prevState.permsinstance,\n                        [key]: {\n                            currentVal: currentVal,\n                            bitflag: val\n                        }\n                    }\n                };\n            });\n        });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.user.load\" />;\n        }\n        if (this.state.saving) {\n            return <Loading text=\"loading.user.save\" />;\n        }\n\n        // noinspection DuplicatedCode\n        const changetabs = (newkey: string | null) => {\n            if (!newkey) return;\n\n            RouteData.selectedusertab = newkey;\n            if (!GlobalObjects.setupMode) {\n                this.props.history.push(AppRoutes.useredit.link || AppRoutes.useredit.route);\n            }\n            this.setState({\n                tab: newkey\n            });\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.user ? (\n                    <React.Fragment>\n                        {!this.canEdit ? (\n                            <Alert className=\"clearfix\" variant=\"error\">\n                                <FormattedMessage id=\"view.user.edit.cantedit\" />\n                            </Alert>\n                        ) : (\n                            \"\"\n                        )}\n                        {this.state.user.systemIdentifier ? (\n                            <Badge variant=\"primary\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.system.short\" />\n                            </Badge>\n                        ) : (\n                            <Badge variant=\"primary\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.tgs\" />\n                            </Badge>\n                        )}\n                        {this.state.user.enabled ? (\n                            <Badge variant=\"success\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.enabled\" />\n                            </Badge>\n                        ) : (\n                            <Badge variant=\"danger\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.disabled\" />\n                            </Badge>\n                        )}\n                        {this.state.user.group ? (\n                            <Badge variant=\"warning\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.grouped\" />\n                            </Badge>\n                        ) : null}\n                        <h3 className=\"text-capitalize\">{this.state.user.name}</h3>\n                        <Button as={Link} to={AppRoutes.userlist.link || AppRoutes.userlist.route}>\n                            <FormattedMessage id=\"generic.goback\" />\n                        </Button>\n                        <Tabs\n                            activeKey={this.state.tab}\n                            onSelect={changetabs}\n                            id=\"test\"\n                            className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\">\n                            <Tab eventKey=\"info\" title={<FormattedMessage id=\"generic.info\" />}>\n                                <Col lg={5} className=\"text-center text-md-left mx-auto\">\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.userid\" />\n                                            </h5>\n                                        </Col>\n                                        <Col className=\"text-capitalize mb-2\">\n                                            {this.state.user.id}\n                                        </Col>\n                                    </Row>\n                                    {this.state.user.systemIdentifier ? (\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.systemidentifier\" />\n                                                </h5>\n                                            </Col>\n                                            <Col className=\"mb-2 text-sm-break\">\n                                                {this.state.user.systemIdentifier}\n                                            </Col>\n                                        </Row>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.enabled\" />\n                                            </h5>\n                                        </Col>\n                                        <Col className=\"text-capitalize mb-2\">\n                                            {this.state.user.enabled.toString()}\n                                        </Col>\n                                    </Row>\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.created\" />\n                                            </h5>\n                                        </Col>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${this.state.user.name}-tooltip`}>\n                                                    {new Date(\n                                                        this.state.user.createdAt\n                                                    ).toLocaleString()}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <Col\n                                                    className=\"text-capitalize mb-2\"\n                                                    {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        <FormattedRelativeTime\n                                                            value={\n                                                                (new Date(\n                                                                    this.state.user!.createdAt\n                                                                ).getTime() -\n                                                                    Date.now()) /\n                                                                1000\n                                                            }\n                                                            numeric=\"auto\"\n                                                            updateIntervalInSeconds={1}\n                                                        />\n                                                    </span>\n                                                </Col>\n                                            )}\n                                        </OverlayTrigger>\n                                    </Row>\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.createdby\" />\n                                            </h5>\n                                        </Col>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip\n                                                    id={`${this.state.user.name}-tooltip-createdby`}>\n                                                    <FormattedMessage id=\"generic.userid\" />\n                                                    {this.state.user.createdBy.id}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <Col\n                                                    className=\"text-capitalize mb-2\"\n                                                    {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        {this.state.user!.createdBy.name}\n                                                    </span>\n                                                </Col>\n                                            )}\n                                        </OverlayTrigger>\n                                    </Row>\n                                    <div className=\"text-center mt-3\">\n                                        {this.canEdit || this.canEditOwnPassword ? (\n                                            <Button\n                                                className=\"mr-2\"\n                                                as={Link}\n                                                to={\n                                                    (AppRoutes.passwd.link ||\n                                                        AppRoutes.passwd.route) +\n                                                    this.state.user.id.toString()\n                                                }>\n                                                <FormattedMessage id=\"routes.passwd\" />\n                                            </Button>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                        {this.canEdit ? (\n                                            <Button\n                                                variant={\n                                                    this.state.user.enabled ? \"danger\" : \"success\"\n                                                }\n                                                onClick={async () => {\n                                                    this.setState({\n                                                        saving: true\n                                                    });\n\n                                                    const response = await UserClient.editUser({\n                                                        enabled: !this.state.user!.enabled,\n                                                        id: this.state.user!.id\n                                                    });\n                                                    if (response.code == StatusCode.OK) {\n                                                        this.loadUser(response.payload);\n                                                    } else {\n                                                        this.addError(response.error);\n                                                    }\n\n                                                    this.setState({\n                                                        saving: false\n                                                    });\n                                                }}>\n                                                <FormattedMessage\n                                                    id={\n                                                        this.state.user.enabled\n                                                            ? \"generic.disable\"\n                                                            : \"generic.enable\"\n                                                    }\n                                                />\n                                            </Button>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </div>\n                                </Col>\n                            </Tab>\n                            <Tab\n                                eventKey=\"adminperms\"\n                                title={<FormattedMessage id=\"perms.admin\" />}>\n                                {this.renderPerms(\"permsadmin\", \"admin\")}\n                            </Tab>\n                            <Tab\n                                eventKey=\"instanceperms\"\n                                title={<FormattedMessage id=\"perms.instance\" />}>\n                                {this.renderPerms(\"permsinstance\", \"instance\")}\n                            </Tab>\n                            <Tab eventKey=\"group\" title={<FormattedMessage id=\"perms.group\" />}>\n                                {this.renderGroups()}\n                            </Tab>\n                            {this.renderOAuth()}\n                        </Tabs>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n            </div>\n        );\n    }\n\n    private renderOAuth(): React.ReactNode {\n        const oAuthProviderInfos = this.context.serverInfo.oAuthProviderInfos;\n        const currentOAuthConnections =\n            this.state.newOAuthConnections || this.state.user?.oAuthConnections;\n        if (\n            this.state.user?.name.toLowerCase() === \"admin\" || // admin user can't have OAuthConnections\n            currentOAuthConnections == null ||\n            !oAuthProviderInfos ||\n            !Object.keys(oAuthProviderInfos).length\n        )\n            return null;\n\n        const save = async () => {\n            this.setState({\n                saving: true\n            });\n\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                oAuthConnections: this.state.newOAuthConnections\n            });\n            if (response.code == StatusCode.OK) {\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n\n            this.setState({\n                saving: false\n            });\n        };\n\n        const canEditOauth = this.canEdit || this.canEditOwnOAuth;\n\n        return (\n            <Tab\n                eventKey=\"oauth\"\n                title={<FormattedMessage id=\"view.user.edit.oauth.connections\" />}>\n                <h3 className=\"mb-3\">\n                    <FormattedMessage id=\"view.user.edit.oauth.current\" />\n                </h3>\n                <div>\n                    {this.state.newOAuthConnections.map((oAuthConnection, idx) => (\n                        <div className=\"justify-content-center d-flex\" key={idx}>\n                            <InputGroup className=\"w-75 mb-1\">\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>\n                                        <span>\n                                            <FormattedMessage id=\"view.user.edit.oauth.provider\" />\n                                        </span>\n                                    </InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control\n                                    className=\"flex-grow-1 flex-md-grow-0 w-50 w-md-auto \"\n                                    as=\"select\"\n                                    custom\n                                    disabled={!canEditOauth}\n                                    onChange={event => {\n                                        const provider = event.target.value as OAuthProvider;\n                                        this.setState(prev => {\n                                            return {\n                                                newOAuthConnections: prev.newOAuthConnections.map(\n                                                    (val, idx2) => {\n                                                        if (idx2 !== idx) return val;\n                                                        return {\n                                                            ...val,\n                                                            provider: provider\n                                                        };\n                                                    }\n                                                )\n                                            };\n                                        });\n                                    }}>\n                                    {Object.keys(oAuthProviderInfos).map(key => {\n                                        return (\n                                            <FormattedMessage\n                                                key={key}\n                                                id={`view.user.edit.oauth.provider.${key.toLowerCase()}`}>\n                                                {txt => (\n                                                    <option\n                                                        value={key}\n                                                        selected={oAuthConnection.provider === key}>\n                                                        {txt}\n                                                    </option>\n                                                )}\n                                            </FormattedMessage>\n                                        );\n                                    })}\n                                </Form.Control>\n                                <InputGroup.Text className=\"rounded-0\">\n                                    <FormattedMessage id=\"view.user.edit.oauth.id\" />\n                                </InputGroup.Text>\n                                <FormControl\n                                    className=\"\"\n                                    value={oAuthConnection.externalUserId}\n                                    onChange={event => {\n                                        const externalUserId = event.target.value;\n                                        this.setState(prev => {\n                                            return {\n                                                newOAuthConnections: prev.newOAuthConnections.map(\n                                                    (val, idx2) => {\n                                                        if (idx2 !== idx) return val;\n                                                        return {\n                                                            ...val,\n                                                            externalUserId: externalUserId\n                                                        };\n                                                    }\n                                                )\n                                            };\n                                        });\n                                    }}\n                                    disabled={!canEditOauth}\n                                />\n                                <InputGroup.Append className=\"\">\n                                    <Button\n                                        variant=\"danger\"\n                                        className=\"text-darker\"\n                                        hidden={!canEditOauth}\n                                        onClick={() => {\n                                            this.setState(prev => {\n                                                return {\n                                                    newOAuthConnections: prev.newOAuthConnections.filter(\n                                                        (val, idx2) => idx !== idx2\n                                                    )\n                                                };\n                                            });\n                                        }}>\n                                        <div>\n                                            <FontAwesomeIcon icon={faTrash} />\n                                        </div>\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n                    ))}\n                </div>\n                {canEditOauth ? (\n                    <div className=\"text-center mt-3\">\n                        <Button\n                            className=\"mr-2\"\n                            onClick={() => {\n                                this.setState(prev => {\n                                    return {\n                                        newOAuthConnections: [\n                                            ...prev.newOAuthConnections,\n                                            {\n                                                provider: Object.keys(\n                                                    oAuthProviderInfos\n                                                )[0] as OAuthProvider,\n                                                externalUserId: \"\"\n                                            }\n                                        ]\n                                    };\n                                });\n                            }}>\n                            <FormattedMessage id=\"view.user.edit.oauth.add\" />\n                        </Button>\n                        <Button\n                            onClick={save}\n                            variant=\"success\"\n                            disabled={\n                                this.state.newOAuthConnections.some(\n                                    x => x.externalUserId.trim().length === 0\n                                ) ||\n                                //If all values match up, and the lenght is the same, there has been no change, disable the button\n                                (this.state.newOAuthConnections.every(\n                                    (val, idx) =>\n                                        val.externalUserId ===\n                                            (this.state.user?.oAuthConnections || [])[idx]\n                                                ?.externalUserId &&\n                                        val.provider ===\n                                            (this.state.user?.oAuthConnections || [])[idx]?.provider\n                                ) &&\n                                    this.state.newOAuthConnections.length ===\n                                        this.state.user?.oAuthConnections?.length)\n                            }>\n                            <FormattedMessage id=\"generic.savepage\" />\n                        </Button>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n            </Tab>\n        );\n    }\n\n    private renderGroups(): React.ReactNode {\n        //We can't use addError() here because that would trigger a rerender which would call this again and add another error and so on\n        if (!this.state.user || !this.state.groups) {\n            return (\n                <ErrorAlert\n                    error={\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(\"Assertion failed, user or group is null\")\n                        })\n                    }\n                />\n            );\n        }\n\n        return (\n            <div>\n                {!this.canRead ? (\n                    <Alert className=\"clearfix\" variant=\"error\">\n                        <FormattedMessage id=\"perms.group.cantlist\" />\n                    </Alert>\n                ) : null}\n                <h3 className=\"mb-3\">\n                    <FormattedMessage id=\"perms.group.current\" />\n                    {this.state.user.group ? (\n                        this.state.user.group.name\n                    ) : (\n                        <FormattedMessage id=\"perms.group.none\" />\n                    )}\n                </h3>\n                <div onChange={this.changeGroup}>\n                    <InputGroup\n                        className=\"justify-content-center mb-3\"\n                        as=\"label\"\n                        htmlFor={\n                            \"group_none\" /*notice the underscore, the normal groups use a dash, this prevents conflict with groups named \"none\"*/\n                        }>\n                        <InputGroup.Prepend>\n                            <InputGroup.Radio\n                                id={\"group_none\"}\n                                name=\"group\"\n                                defaultChecked={this.state.user.group?.id === undefined}\n                                disabled={!this.canEdit}\n                            />\n                        </InputGroup.Prepend>\n                        <InputGroup.Append className=\"w-40 overflow-auto\">\n                            <InputGroup.Text className=\"flex-fill\">\n                                <FormattedMessage id=\"perms.group.none\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                    {this.state.groups.map(group => {\n                        return (\n                            <InputGroup className=\"justify-content-center mb-1\" key={group.id}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Radio\n                                        id={\"group-\" + group.id.toString()}\n                                        name=\"group\"\n                                        defaultChecked={this.state.user!.group?.id === group.id}\n                                        disabled={!this.canEdit}\n                                    />\n                                </InputGroup.Prepend>\n                                <InputGroup.Append className=\"w-40 overflow-auto\">\n                                    <InputGroup.Text\n                                        className=\"flex-fill\"\n                                        as=\"label\"\n                                        htmlFor={\"group-\" + group.id.toString()}>\n                                        <span>{group.name}</span>\n                                        <div className=\"text-right ml-auto\">\n                                            <FormattedMessage\n                                                id=\"generic.numusers\"\n                                                values={{\n                                                    count: this.canRead\n                                                        ? group.users?.length\n                                                        : \"???\"\n                                                }}\n                                            />\n                                        </div>\n                                    </InputGroup.Text>\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`${group.id}-tooltip`}>\n                                                <FormattedMessage id=\"perms.group.delete.warning\" />\n                                            </Tooltip>\n                                        }\n                                        show={\n                                            (!group.users?.length || !this.canEdit) &&\n                                            group.id !== this.state.user!.group?.id\n                                                ? false\n                                                : undefined\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <Button\n                                                variant=\"danger\"\n                                                className=\"text-darker\"\n                                                disabled={\n                                                    !!group.users?.length ||\n                                                    !this.canEdit ||\n                                                    group.id === this.state.user!.group?.id\n                                                }\n                                                onClick={() => void this.deleteGroup(group.id)}\n                                                {...triggerHandler}>\n                                                <div ref={ref as React.Ref<HTMLDivElement>}>\n                                                    <FontAwesomeIcon icon={faTrash} />\n                                                </div>\n                                            </Button>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        );\n                    })}\n                </div>\n                {/*<hr />\n                    <h4 className=\"mt-3\">\n                        <FormattedMessage id=\"perms.group.create\" />\n                    </h4>*/}\n                <InputGroup className=\"justify-content-center mb-1 mt-5\">\n                    <InputGroup.Prepend>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.createGroup}\n                            disabled={!this.canEdit || !this.state.createGroupName.length}>\n                            <FontAwesomeIcon icon={faPlus} />\n                        </Button>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        className=\"w-40 overflow-auto flex-grow-0\"\n                        value={this.state.createGroupName}\n                        onChange={event => {\n                            this.setState({\n                                createGroupName: event.target.value\n                            });\n                        }}\n                        disabled={!this.canEdit}\n                    />\n                </InputGroup>\n            </div>\n        );\n    }\n\n    private async changeGroup(e: FormEvent<HTMLDivElement>) {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"this.state.user is null in changegroup\")\n                })\n            );\n            return;\n        }\n\n        this.setState({\n            loading: true\n        });\n        const id = (e.target as HTMLInputElement).id;\n        if (id === \"group_none\") {\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                permissionSet: resolvePermissionSet(this.state.user)\n            });\n            if (response.code === StatusCode.OK) {\n                await this.loadGroups();\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        } else {\n            const realID = parseInt(id.substr(6));\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                group: {\n                    id: realID\n                } as UserGroup\n            });\n            if (response.code === StatusCode.OK) {\n                await this.loadGroups();\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteGroup(id: number) {\n        this.setState({\n            loading: true\n        });\n        const response = await UserGroupClient.deleteGroup(id);\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    groups: prev.groups.filter(group => group.id !== id)\n                };\n            });\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async createGroup() {\n        this.setState({\n            loading: true\n        });\n        const response = await UserGroupClient.createGroup(\n            this.state.createGroupName,\n            resolvePermissionSet(this.state.user!)\n        );\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    groups: prev.groups.concat([response.payload])\n                };\n            });\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private renderPerms(\n        enumname: \"permsadmin\" | \"permsinstance\",\n        permprefix: string\n    ): React.ReactNode {\n        const inputs: Record<\n            string,\n            { input: React.RefObject<HTMLInputElement>; field: React.RefObject<HTMLDivElement> }\n        > = {};\n        const setBold = (\n            inputRef: React.RefObject<HTMLInputElement>,\n            fieldRef: React.RefObject<HTMLDivElement>,\n            defaultVal: boolean\n        ) => {\n            if (!inputRef.current || !fieldRef.current) return;\n            if (inputRef.current.checked !== defaultVal) {\n                fieldRef.current.classList.add(\"font-weight-bold\");\n            } else {\n                fieldRef.current.classList.remove(\"font-weight-bold\");\n            }\n        };\n        const setAll = (val: boolean): (() => void) => {\n            return () => {\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) return;\n\n                    refs.input.current.checked = val;\n                    setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                }\n            };\n        };\n        const resetAll = () => {\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                refs.input.current.checked = this.state[enumname][permname].currentVal;\n                setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n            }\n        };\n        const save = async () => {\n            this.setState({\n                saving: true\n            });\n            let bitflag = 0;\n\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                bitflag += refs.input.current.checked ? this.state[enumname][permname].bitflag : 0;\n            }\n\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            if (this.state.user.group) {\n                const newset = Object.assign(\n                    Object.assign({}, this.state.user.group.permissionSet),\n                    {\n                        [enumname == \"permsadmin\"\n                            ? \"AdministrationRights\"\n                            : \"InstanceManagerRights\"]: bitflag\n                    } as\n                        | { AdministrationRights: AdministrationRights }\n                        | { InstanceManagerRights: InstanceManagerRights }\n                ) as PermissionSet;\n                const response = await UserGroupClient.updateGroup({\n                    id: this.state.user.group.id,\n                    permissionSet: newset\n                });\n                if (response.code == StatusCode.OK) {\n                    const response2 = await UserClient.getUser(this.state.user.id);\n                    if (response2.code == StatusCode.OK) {\n                        this.loadUser(response2.payload);\n                    } else {\n                        this.addError(response2.error);\n                    }\n                } else {\n                    this.addError(response.error);\n                }\n            } else {\n                const newset = Object.assign(Object.assign({}, this.state.user.permissionSet), {\n                    [enumname == \"permsadmin\"\n                        ? \"AdministrationRights\"\n                        : \"InstanceManagerRights\"]: bitflag\n                } as { AdministrationRights: AdministrationRights } | { InstanceManagerRights: InstanceManagerRights });\n                const response = await UserClient.editUser({\n                    id: this.state.user.id,\n                    permissionSet: newset\n                });\n                if (response.code == StatusCode.OK) {\n                    this.loadUser(response.payload);\n                } else {\n                    this.addError(response.error);\n                }\n            }\n\n            this.setState({\n                saving: false\n            });\n        };\n        return (\n            <React.Fragment>\n                {this.state.user?.group ? (\n                    <Alert variant=\"warning\">\n                        <FormattedMessage\n                            id=\"perms.group.warning\"\n                            values={{\n                                group: `${this.state.user.group.name} (${this.state.user.group.id})`\n                            }}\n                        />\n                    </Alert>\n                ) : null}\n                {this.canEdit ? (\n                    <React.Fragment>\n                        <h5>\n                            <FormattedMessage id=\"generic.setall\" />\n                        </h5>\n                        <Button onClick={setAll(true)}>\n                            <FormattedMessage id=\"generic.true\" />\n                        </Button>{\" \"}\n                        <Button onClick={setAll(false)}>\n                            <FormattedMessage id=\"generic.false\" />\n                        </Button>{\" \"}\n                        <Button onClick={resetAll}>\n                            <FormattedMessage id=\"generic.reset\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n                <Col md={8} lg={7} xl={6} className=\"mx-auto\">\n                    <hr />\n                    {Object.entries(this.state[enumname]).map(([perm, value]) => {\n                        const inputRef = React.createRef<HTMLInputElement>();\n                        const fieldRef = React.createRef<HTMLDivElement>();\n                        inputs[perm] = { input: inputRef, field: fieldRef };\n                        return (\n                            <InputGroup key={perm} as=\"label\" htmlFor={perm} className=\"mb-0\">\n                                <InputGroup.Prepend className=\"flex-grow-1 overflow-auto\">\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`perms.${permprefix}.${perm}.desc`}>\n                                                <FormattedMessage\n                                                    id={`perms.${permprefix}.${perm}.desc`}\n                                                />\n                                            </Tooltip>\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"flex-fill\" ref={fieldRef}>\n                                                <div {...triggerHandler}>\n                                                    <FormattedMessage\n                                                        id={`perms.${permprefix}.${perm}`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-auto d-flex align-items-center\">\n                                                    <Form.Check\n                                                        inline\n                                                        type=\"switch\"\n                                                        custom\n                                                        id={perm}\n                                                        className=\"d-flex justify-content-center align-content-center mx-2\"\n                                                        label=\"\"\n                                                        ref={inputRef}\n                                                        disabled={!this.canEdit}\n                                                        defaultChecked={value.currentVal}\n                                                        onChange={() => {\n                                                            setBold(\n                                                                inputRef,\n                                                                fieldRef,\n                                                                value.currentVal\n                                                            );\n                                                        }}\n                                                    />\n                                                    <div\n                                                        {...triggerHandler}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                </div>\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Prepend>\n                            </InputGroup>\n                        );\n                    })}\n                    <hr />\n                </Col>\n                {this.canEdit ? (\n                    <Button onClick={save}>\n                        <FormattedMessage id=\"generic.savepage\" />\n                    </Button>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUserEdit.contextType = GeneralContext;\nexport default withRouter(UserEdit);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"noGutters\", \"as\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"as\", \"className\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, [\"activeKey\", \"getControlledId\", \"getControllerId\"]);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;"],"sourceRoot":""}