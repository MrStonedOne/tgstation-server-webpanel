{"version":3,"sources":["webpack:///./src/components/views/Configuration.tsx"],"names":["Configuration","props","save","bind","state","values","ConfigController","saveconfig","this","setState","config","Object","entries","configOptions","Fragment","map","innerid","key","currentVal","valueRef","React","createRef","enumRef","value","updateValue","obj","type","current","selectedOptions","checked","prevstate","random","Math","toString","id","Prepend","className","overlay","ref","triggerHandler","Text","fixedWidth","icon","onChange","defaultValue","possibleValues","possiblevalue","message","htmlFor","Check","inline","custom","label","Append","onClick","prevState","filtered","innerkey","val","disabled","keys","length","Component"],"mappings":"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","file":"16.03efee7abea863cb5067.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport configOptions, { ConfigMap, ConfigOption } from \"../../ApiClient/util/config\";\nimport ConfigController from \"../../ApiClient/util/ConfigController\";\n\ninterface IProps {}\ninterface IState {\n    values: { [key: string]: ConfigOption };\n    //if youre adding some state, make sure it doesnt get sent to be saved\n}\n\nexport default class Configuration extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.save = this.save.bind(this);\n\n        this.state = {\n            values: {}\n        };\n    }\n\n    private save() {\n        ConfigController.saveconfig(this.state.values);\n        this.setState({\n            values: {}\n        });\n    }\n\n    public render(): ReactNode {\n        const config = Object.entries(configOptions);\n\n        return (\n            <React.Fragment>\n                {config.map(([key, currentVal]) => {\n                    //const persistRef = React.createRef<HTMLInputElement>();\n                    const valueRef = React.createRef<HTMLInputElement>();\n                    const enumRef = React.createRef<HTMLSelectElement>();\n                    const value = this.state.values[key] || currentVal;\n                    const reset = () => {\n                        this.setState((prevState: IState) => {\n                            const filtered: ConfigMap = {};\n                            for (const [innerkey, val] of Object.entries(prevState.values)) {\n                                if (innerkey === key) continue;\n                                filtered[innerkey] = val;\n                            }\n                            return {\n                                values: filtered\n                            };\n                        });\n                    };\n\n                    const updateValue = () => {\n                        const obj: ConfigOption = this.state.values[key] || {\n                            ...currentVal\n                        };\n                        //obj.persist = persistRef.current!.checked;\n                        obj.value =\n                            value.type === \"enum\"\n                                ? enumRef.current!.selectedOptions[0].value\n                                : value.type === \"bool\"\n                                ? valueRef.current!.checked\n                                : valueRef.current!.value;\n                        this.setState(prevstate => {\n                            return {\n                                values: {\n                                    ...prevstate.values,\n                                    [key]: obj\n                                }\n                            };\n                        });\n                    };\n\n                    const tooltip = (innerid: string) => {\n                        return (\n                            <Tooltip id={innerid}>\n                                <FormattedMessage id={innerid} />\n                            </Tooltip>\n                        );\n                    };\n\n                    const random = Math.random().toString();\n\n                    return (\n                        <InputGroup key={value.id}>\n                            <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                                {/*<InputGroup.Text\n                                    as=\"label\"\n                                    htmlFor={value.id}\n                                    className={this.state.values[key] ? 'font-weight-bold' : ''}>\n                                    <Form.Check\n                                        id={value.id}\n                                        inline\n                                        label={<FormattedMessage id=\"generic.persist\" />}\n                                        type=\"switch\"\n                                        custom\n                                        onChange={updateValue}\n                                        ref={persistRef}\n                                        checked={value.persist}\n                                        value={''}\n                                    />\n                                </InputGroup.Text>*/}\n                                <OverlayTrigger overlay={tooltip(value.id + \".desc\")}>\n                                    {({ ref, ...triggerHandler }) => (\n                                        <InputGroup.Text\n                                            className={`flex-fill ${\n                                                this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                            }`}\n                                            {...triggerHandler}>\n                                            <FormattedMessage id={value.id} />\n                                            <div\n                                                className=\"ml-auto\"\n                                                ref={ref as React.Ref<HTMLDivElement>}>\n                                                <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                            </div>\n                                        </InputGroup.Text>\n                                    )}\n                                </OverlayTrigger>\n                            </InputGroup.Prepend>\n                            <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                                {value.type === \"enum\" ? (\n                                    <select\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        ref={enumRef}\n                                        onChange={updateValue}\n                                        defaultValue={value.value}>\n                                        {Object.values(value.possibleValues).map(possiblevalue => (\n                                            <FormattedMessage\n                                                key={possiblevalue}\n                                                id={`${value.id}.enum.${possiblevalue}`}>\n                                                {message => (\n                                                    <option value={possiblevalue}>{message}</option>\n                                                )}\n                                            </FormattedMessage>\n                                        ))}\n                                    </select>\n                                ) : value.type === \"bool\" ? (\n                                    <label\n                                        htmlFor={random}\n                                        className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                                        <Form.Check\n                                            inline\n                                            type=\"switch\"\n                                            custom\n                                            id={random}\n                                            className=\"m-auto\"\n                                            label=\"\"\n                                            ref={valueRef}\n                                            onChange={updateValue}\n                                            checked={value.value}\n                                        />\n                                    </label>\n                                ) : (\n                                    <FormControl\n                                        custom\n                                        type={\n                                            value.type === \"num\"\n                                                ? \"number\"\n                                                : value.type === \"pwd\"\n                                                ? \"password\"\n                                                : \"text\"\n                                        }\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        ref={valueRef}\n                                        onChange={updateValue}\n                                        value={value.value}\n                                    />\n                                )}\n                                {this.state.values[key] ? (\n                                    <InputGroup.Append onClick={reset}>\n                                        <InputGroup.Text>\n                                            <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                                        </InputGroup.Text>\n                                    </InputGroup.Append>\n                                ) : (\n                                    \"\"\n                                )}\n                            </div>\n                        </InputGroup>\n                    );\n                })}\n\n                <br />\n\n                <div className=\"text-center\">\n                    <Button\n                        className=\"px-5\"\n                        onClick={this.save}\n                        disabled={!Object.keys(this.state.values).length}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}