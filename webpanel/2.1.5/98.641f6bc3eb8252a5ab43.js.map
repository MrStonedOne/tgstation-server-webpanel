{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/ApiClient/UserGroupClient.ts"],"names":["group","response","ServerClient","e","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","pageSize","page","content","name","permissionSet","id","ApiClient"],"mappings":"s4CAqBA,QAAe,a,kOAAA,U,IAAA,Q,IAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,gCACX,UACIA,GAIA,IAAIC,QAFEC,gBAGN,IACID,QAAiBC,yCAAmD,KAAMF,GAC5E,MAAOG,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQF,EAASO,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAASR,EAASS,OAG1B,KAAK,IACD,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,qBAA2B,CAChDC,aAAcZ,EAASS,SAInC,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAeb,GACjBA,SArCT,4EA4CX,YAGI,IAAIA,QAFEC,gBAGN,IACID,QAAiBC,uCAAiD,CAC9Da,SAAU,IACVC,KAAM,IAEZ,MAAOb,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQF,EAASO,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAUR,EAASS,KAAoCO,UAG/D,QACI,OAAO,IAAIb,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAeb,GACjBA,SAzET,4EAgFX,UACIiB,EACAC,GAIA,IAAIlB,QAFEC,gBAGN,IACID,QAAiBC,yCAAmD,KAAM,CACtEgB,KAAMA,EACNC,cAAeA,IAErB,MAAOhB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQF,EAASO,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAASR,EAASS,OAG1B,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAeb,GACjBA,SAhHT,+EAuHX,UAAyBmB,GAGrB,IAAInB,QAFEC,gBAGN,IACID,QAAiBC,yCAAmD,CAAEkB,GAAIA,IAC5E,MAAOjB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQF,EAASO,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAS,OAGjB,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,qBAA2B,CAChDC,aAAcZ,EAASS,SAInC,KAAK,IACD,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,qBAA2B,CAChDC,aAAcZ,EAASS,SAInC,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAeb,GACjBA,SAjKT,iD,iBAAA,EAAI,CAA+BoB","file":"98.641f6bc3eb8252a5ab43.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    PaginatedUserGroupResponse,\n    PermissionSet,\n    UserGroupCreateRequest,\n    UserGroupResponse,\n    UserGroupUpdateRequest\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type UpdateGroupErrors = GenericErrors | ErrorCode.GROUP_NOT_FOUND;\nexport type listGroupsErrors = GenericErrors;\nexport type CreateGroupErrors = GenericErrors;\nexport type DeleteGroupErrors =\n    | GenericErrors\n    | ErrorCode.GROUP_NOT_FOUND\n    | ErrorCode.GROUP_NOT_EMPTY;\n\nexport default new (class UserGroupClient extends ApiClient {\n    public async updateGroup(\n        group: UserGroupUpdateRequest\n    ): Promise<InternalStatus<UserGroupResponse, UpdateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Update(null, group);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listGroups(): Promise<InternalStatus<UserGroupResponse[], listGroupsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_List({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as PaginatedUserGroupResponse).content\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createGroup(\n        name: string,\n        permissionSet?: PermissionSet\n    ): Promise<InternalStatus<UserGroupResponse, CreateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Create(null, {\n                name: name,\n                permissionSet: permissionSet\n            } as UserGroupCreateRequest);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteGroup(id: number): Promise<InternalStatus<null, DeleteGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Delete({ id: id });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_EMPTY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}