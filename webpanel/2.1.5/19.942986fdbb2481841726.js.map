{"version":3,"sources":["webpack:///./src/components/utils/InputField.tsx","webpack:///./src/components/views/Instance/Config/InstanceSettings.tsx"],"names":["InputField","props","state","currentValue","defaultValue","innerid","random","Math","toString","changed","this","commit","_value","value","type","onChange","InputGroup","Prepend","className","OverlayTrigger","overlay","tooltip","Tooltip","id","Fragment","show","undefined","ref","triggerHandler","Text","name","fixedWidth","icon","event","setEditLock","instantCommit","target","selectedOptions","setState","disabled","editLock","Object","values","enum","filter","val","isNaN","parseInt","map","possiblevalue","key","message","htmlFor","Form","Check","inline","custom","label","currentTarget","checked","FormControl","newValue","Append","style","opacity","pointerEvents","onClick","React","Component","withRouter","loading","errors","error","prevState","Array","from","push","instance","response","InstanceClient","editInstance","code","StatusCode","OK","loadInstance","addError","_editInstance","Loading","text","checkIMFlag","flag","selfPermissionSet","instanceManagerRights","err","index","ErrorAlert","onClose","prev","newarr","newval","InstanceManagerRights","Rename","path","Relocate","chatBotLimit","SetChatBotLimit","autoUpdateInterval","SetAutoUpdate","ConfigurationType","configurationType","SetConfiguration"],"mappings":"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","file":"19.942986fdbb2481841726.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IState {\n    currentValue: string | boolean | number;\n}\n\ntype IProps = {\n    name: string;\n    disabled?: boolean;\n    setEditLock?: (value: boolean) => void;\n    editLock?: boolean;\n    tooltip?: string;\n    instantCommit?: boolean;\n} & (\n    | {\n          name: string;\n          defaultValue: boolean;\n          onChange: (newvalue: boolean) => void;\n          type: \"bool\";\n      }\n    | {\n          name: string;\n          defaultValue: number;\n          onChange: (newvalue: number) => void;\n          type: \"num\";\n      }\n    | {\n          name: string;\n          defaultValue: string;\n          onChange: (newvalue: string) => void;\n          type: \"str\";\n      }\n    | {\n          name: string;\n          defaultValue: string | number;\n          onChange: (newvalue: string) => void;\n          type: \"enum\";\n          enum: Record<string, string | number>;\n      }\n);\n\nexport default class InputField extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            currentValue: props.defaultValue\n        };\n    }\n\n    public render(): React.ReactNode {\n        const random = Math.random().toString();\n        const changed = this.state.currentValue !== this.props.defaultValue;\n\n        const commit = (_value?: string | number | boolean) => {\n            const value = _value || this.state.currentValue;\n\n            switch (this.props.type) {\n                case \"str\":\n                    this.props.onChange(value as string);\n                    break;\n                case \"num\":\n                    this.props.onChange(value as number);\n                    break;\n                case \"bool\":\n                    this.props.onChange(value as boolean);\n                    break;\n                case \"enum\":\n                    this.props.onChange(value as string);\n                    break;\n            }\n        };\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <InputGroup>\n                <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                    <OverlayTrigger\n                        overlay={tooltip(this.props.tooltip)}\n                        show={this.props.tooltip ? undefined : false}>\n                        {({ ref, ...triggerHandler }) => (\n                            <InputGroup.Text\n                                className={`flex-fill ${changed ? \"font-weight-bold\" : \"\"}`}\n                                {...triggerHandler}>\n                                <FormattedMessage id={`fields.${this.props.name}`} />\n                                {this.props.tooltip ? (\n                                    <div\n                                        className={\"ml-auto\"}\n                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                    </div>\n                                ) : null}\n                            </InputGroup.Text>\n                        )}\n                    </OverlayTrigger>\n                </InputGroup.Prepend>\n                <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                    {this.props.type === \"enum\" ? (\n                        <select\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (\n                                        changed &&\n                                        event.target.selectedOptions[0].value ===\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(false);\n                                    } else if (\n                                        !changed &&\n                                        event.target.selectedOptions[0].value !==\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(event.target.selectedOptions[0].value);\n                                } else {\n                                    this.setState({\n                                        currentValue: event.target.selectedOptions[0].value\n                                    });\n                                }\n                            }}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            defaultValue={this.props.defaultValue}>\n                            {Object.values(this.props.enum)\n                                .filter(val => isNaN(parseInt(val as string)))\n                                .map(possiblevalue => (\n                                    <FormattedMessage\n                                        key={possiblevalue}\n                                        id={`fields.${this.props.name}.${possiblevalue}`}>\n                                        {message => (\n                                            <option value={possiblevalue}>{message}</option>\n                                        )}\n                                    </FormattedMessage>\n                                ))}\n                        </select>\n                    ) : this.props.type === \"bool\" ? (\n                        <label\n                            htmlFor={random}\n                            className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                            <Form.Check\n                                inline\n                                type=\"switch\"\n                                custom\n                                id={random}\n                                className=\"m-auto\"\n                                label=\"\"\n                                onChange={event => {\n                                    if (this.props.setEditLock && !this.props.instantCommit) {\n                                        if (\n                                            changed &&\n                                            event.currentTarget.checked === this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(false);\n                                        } else if (\n                                            !changed &&\n                                            event.currentTarget.checked !== this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(true);\n                                        }\n                                    }\n\n                                    if (this.props.instantCommit) {\n                                        commit(event.currentTarget.checked);\n                                    } else {\n                                        this.setState({\n                                            currentValue: event.currentTarget.checked\n                                        });\n                                    }\n                                }}\n                                checked={this.state.currentValue as boolean}\n                                disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            />\n                        </label>\n                    ) : (\n                        <FormControl\n                            custom\n                            type={this.props.type === \"num\" ? \"number\" : \"text\"}\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                const newValue =\n                                    this.props.type == \"num\"\n                                        ? parseInt(event.currentTarget.value)\n                                        : event.currentTarget.value;\n\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (changed && newValue === this.props.defaultValue) {\n                                        this.props.setEditLock(false);\n                                    } else if (!changed && newValue !== this.props.defaultValue) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(newValue);\n                                } else {\n                                    this.setState({\n                                        currentValue: newValue\n                                    });\n                                }\n                            }}\n                            value={this.state.currentValue as string | number}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                        />\n                    )}\n                    <React.Fragment>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                if (this.props.setEditLock) {\n                                    this.props.setEditLock(false);\n                                }\n\n                                this.setState({\n                                    currentValue: this.props.defaultValue\n                                });\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                commit();\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"check\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </React.Fragment>\n                </div>\n            </InputGroup>\n        );\n    }\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField from \"../../../utils/InputField\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {\n    instance: Components.Schemas.InstanceResponse;\n    loadInstance: () => unknown;\n    selfPermissionSet: Components.Schemas.PermissionSet;\n}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    editLock: boolean;\n}\n\nexport default withRouter(\n    class InstanceSettings extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                loading: false,\n                editLock: false,\n                errors: []\n            };\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        private async _editInstance(\n            instance: Omit<Components.Schemas.InstanceUpdateRequest, \"id\">\n        ) {\n            const response = await InstanceClient.editInstance({\n                ...instance,\n                id: this.props.instance.id\n            });\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    loading: true\n                });\n                await this.props.loadInstance();\n                this.setState({\n                    loading: false\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        private editInstance(instance: Omit<Components.Schemas.InstanceUpdateRequest, \"id\">) {\n            void this._editInstance(instance);\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.instance\" />;\n            }\n\n            const checkIMFlag = (flag: InstanceManagerRights) => {\n                return this.props.selfPermissionSet.instanceManagerRights & flag;\n            };\n\n            const setEditLock = (value: boolean) => {\n                this.setState({\n                    editLock: value\n                });\n            };\n\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n\n                    <InputField\n                        name=\"instance.name\"\n                        defaultValue={this.props.instance.name}\n                        type=\"str\"\n                        onChange={newval => {\n                            this.editInstance({ name: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.Rename)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.path\"\n                        defaultValue={this.props.instance.path}\n                        type=\"str\"\n                        onChange={newval => {\n                            this.editInstance({ path: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.Relocate)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.chatbotlimit\"\n                        defaultValue={this.props.instance.chatBotLimit}\n                        type=\"num\"\n                        onChange={newval => {\n                            this.editInstance({ chatBotLimit: newval });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetChatBotLimit)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.autoupdate\"\n                        defaultValue={this.props.instance.autoUpdateInterval}\n                        type=\"num\"\n                        onChange={newval => {\n                            this.editInstance({\n                                autoUpdateInterval: newval\n                            });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetAutoUpdate)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                    <InputField\n                        name=\"instance.filemode\"\n                        defaultValue={ConfigurationType[this.props.instance.configurationType]}\n                        type=\"enum\"\n                        enum={ConfigurationType}\n                        onChange={newval => {\n                            this.editInstance({\n                                // @ts-expect-error typescript isnt a fan of using enums like this\n                                configurationType: ConfigurationType[newval] as 0 | 1 | 2\n                            });\n                        }}\n                        disabled={!checkIMFlag(InstanceManagerRights.SetConfiguration)}\n                        setEditLock={setEditLock}\n                        editLock={this.state.editLock}\n                    />\n                </div>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}