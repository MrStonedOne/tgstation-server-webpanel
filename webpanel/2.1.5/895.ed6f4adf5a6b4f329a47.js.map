{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"names":["InputField","props","state","currentValue","defaultValue","innerid","random","Math","toString","changed","this","commit","_value","value","type","onChange","InputGroup","className","OverlayTrigger","overlay","tooltip","Tooltip","id","show","undefined","ref","triggerHandler","name","fixedWidth","icon","event","setEditLock","instantCommit","target","selectedOptions","setState","disabled","editLock","Object","values","enum","filter","val","isNaN","parseInt","map","possiblevalue","key","message","htmlFor","Form","inline","custom","label","currentTarget","checked","FormControl","newValue","style","opacity","pointerEvents","onClick","React","InstanceSettings","errors","error","prevState","Array","from","push","instance","response","InstanceClient","context","code","StatusCode","reloadInstance","addError","_editInstance","checkIMFlag","flag","resolvePermissionSet","user","instanceManagerRights","err","index","ErrorAlert","onClose","prev","newarr","newval","editInstance","InstanceManagerRights","path","chatBotLimit","autoUpdateInterval","ConfigurationType","configurationType","contextType","InstanceEditContext","withRouter","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","_ref","bsPrefix","size","_ref$as","as","displayName","InputGroupWithExtras","Text","Radio","Checkbox","Append","Prepend"],"mappings":"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","file":"895.ed6f4adf5a6b4f329a47.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IState {\n    currentValue: string | boolean | number;\n}\n\ntype IProps = {\n    name: string;\n    disabled?: boolean;\n    setEditLock?: (value: boolean) => void;\n    editLock?: boolean;\n    tooltip?: string;\n    instantCommit?: boolean;\n} & (\n    | {\n          name: string;\n          defaultValue: boolean;\n          onChange: (newvalue: boolean) => void;\n          type: \"bool\";\n      }\n    | {\n          name: string;\n          defaultValue: number;\n          onChange: (newvalue: number) => void;\n          type: \"num\";\n      }\n    | {\n          name: string;\n          defaultValue: string;\n          onChange: (newvalue: string) => void;\n          type: \"str\";\n      }\n    | {\n          name: string;\n          defaultValue: string | number;\n          onChange: (newvalue: string) => void;\n          type: \"enum\";\n          enum: Record<string, string | number>;\n      }\n);\n\nexport default class InputField extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            currentValue: props.defaultValue\n        };\n    }\n\n    public render(): React.ReactNode {\n        const random = Math.random().toString();\n        const changed = this.state.currentValue !== this.props.defaultValue;\n\n        const commit = (_value?: string | number | boolean) => {\n            const value = _value || this.state.currentValue;\n\n            switch (this.props.type) {\n                case \"str\":\n                    this.props.onChange(value as string);\n                    break;\n                case \"num\":\n                    this.props.onChange(value as number);\n                    break;\n                case \"bool\":\n                    this.props.onChange(value as boolean);\n                    break;\n                case \"enum\":\n                    this.props.onChange(value as string);\n                    break;\n            }\n        };\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <InputGroup>\n                <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                    <OverlayTrigger\n                        overlay={tooltip(this.props.tooltip)}\n                        show={this.props.tooltip ? undefined : false}>\n                        {({ ref, ...triggerHandler }) => (\n                            <InputGroup.Text\n                                className={`flex-fill ${changed ? \"font-weight-bold\" : \"\"}`}\n                                {...triggerHandler}>\n                                <FormattedMessage id={`fields.${this.props.name}`} />\n                                {this.props.tooltip ? (\n                                    <div\n                                        className={\"ml-auto\"}\n                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                    </div>\n                                ) : null}\n                            </InputGroup.Text>\n                        )}\n                    </OverlayTrigger>\n                </InputGroup.Prepend>\n                <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                    {this.props.type === \"enum\" ? (\n                        <select\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (\n                                        changed &&\n                                        event.target.selectedOptions[0].value ===\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(false);\n                                    } else if (\n                                        !changed &&\n                                        event.target.selectedOptions[0].value !==\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(event.target.selectedOptions[0].value);\n                                } else {\n                                    this.setState({\n                                        currentValue: event.target.selectedOptions[0].value\n                                    });\n                                }\n                            }}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            defaultValue={this.props.defaultValue}>\n                            {Object.values(this.props.enum)\n                                .filter(val => isNaN(parseInt(val as string)))\n                                .map(possiblevalue => (\n                                    <FormattedMessage\n                                        key={possiblevalue}\n                                        id={`fields.${this.props.name}.${possiblevalue}`}>\n                                        {message => (\n                                            <option value={possiblevalue}>{message}</option>\n                                        )}\n                                    </FormattedMessage>\n                                ))}\n                        </select>\n                    ) : this.props.type === \"bool\" ? (\n                        <label\n                            htmlFor={random}\n                            className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                            <Form.Check\n                                inline\n                                type=\"switch\"\n                                custom\n                                id={random}\n                                className=\"m-auto\"\n                                label=\"\"\n                                onChange={event => {\n                                    if (this.props.setEditLock && !this.props.instantCommit) {\n                                        if (\n                                            changed &&\n                                            event.currentTarget.checked === this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(false);\n                                        } else if (\n                                            !changed &&\n                                            event.currentTarget.checked !== this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(true);\n                                        }\n                                    }\n\n                                    if (this.props.instantCommit) {\n                                        commit(event.currentTarget.checked);\n                                    } else {\n                                        this.setState({\n                                            currentValue: event.currentTarget.checked\n                                        });\n                                    }\n                                }}\n                                checked={this.state.currentValue as boolean}\n                                disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            />\n                        </label>\n                    ) : (\n                        <FormControl\n                            custom\n                            type={this.props.type === \"num\" ? \"number\" : \"text\"}\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                const newValue =\n                                    this.props.type == \"num\"\n                                        ? parseInt(event.currentTarget.value)\n                                        : event.currentTarget.value;\n\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (changed && newValue === this.props.defaultValue) {\n                                        this.props.setEditLock(false);\n                                    } else if (!changed && newValue !== this.props.defaultValue) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(newValue);\n                                } else {\n                                    this.setState({\n                                        currentValue: newValue\n                                    });\n                                }\n                            }}\n                            value={this.state.currentValue as string | number}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                        />\n                    )}\n                    <React.Fragment>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                if (this.props.setEditLock) {\n                                    this.props.setEditLock(false);\n                                }\n\n                                this.setState({\n                                    currentValue: this.props.defaultValue\n                                });\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                commit();\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"check\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </React.Fragment>\n                </div>\n            </InputGroup>\n        );\n    }\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { InstanceUpdateRequest } from \"../../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField from \"../../../utils/InputField\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    editLock: boolean;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            editLock: false,\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async _editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    private editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        void this._editInstance(instance);\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return resolvePermissionSet(this.context.user).instanceManagerRights & flag;\n        };\n\n        const setEditLock = (value: boolean) => {\n            this.setState({\n                editLock: value\n            });\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputField\n                    name=\"instance.name\"\n                    defaultValue={this.context.instance.name}\n                    type=\"str\"\n                    onChange={newval => {\n                        this.editInstance({ name: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.Rename)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.path\"\n                    defaultValue={this.context.instance.path}\n                    type=\"str\"\n                    onChange={newval => {\n                        this.editInstance({ path: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.Relocate)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.chatbotlimit\"\n                    defaultValue={this.context.instance.chatBotLimit}\n                    type=\"num\"\n                    onChange={newval => {\n                        this.editInstance({ chatBotLimit: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetChatBotLimit)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.autoupdate\"\n                    defaultValue={this.context.instance.autoUpdateInterval}\n                    type=\"num\"\n                    onChange={newval => {\n                        this.editInstance({\n                            autoUpdateInterval: newval\n                        });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetAutoUpdate)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.filemode\"\n                    defaultValue={ConfigurationType[this.context.instance.configurationType]}\n                    type=\"enum\"\n                    enum={ConfigurationType}\n                    onChange={newval => {\n                        this.editInstance({\n                            // @ts-expect-error typescript isnt a fan of using enums like this\n                            configurationType: ConfigurationType[newval] as 0 | 1 | 2\n                        });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetConfiguration)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React from \"react\";\n\nimport {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/schemas\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;"],"sourceRoot":""}