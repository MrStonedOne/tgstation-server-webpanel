{"version":3,"sources":["webpack:///./src/components/views/Instance/Edit/Byond.tsx","webpack:///./src/components/utils/InputField.tsx","webpack:///./src/components/views/Instance/Edit/Config.tsx","webpack:///./src/components/views/Instance/InstanceEdit.tsx","webpack:///./src/contexts/InstanceEditContext.ts","webpack:///./src/components/utils/WIPNotice.tsx"],"names":["Byond","props","state","versions","errors","activeVersion","latestVersion","selectedVersion","loading","error","this","setState","prevState","Array","from","push","response","ByondClient","listAllVersions","context","instance","id","code","StatusCode","OK","payload","content","response2","getActiveVersion","version","addError","loadVersions","fetch","then","res","text","data","split","catch","e","InternalError","ErrorCode","APP_FAIL","jsError","Error","instancePermissionSet","byondRights","ByondRights","ListInstalled","ReadActive","className","map","err","index","key","onClose","prev","newarr","undefined","onChange","switchActive","target","value","Prepend","Radio","disabled","InstallOfficialOrChangeActiveVersion","name","defaultChecked","Append","as","htmlFor","overlay","innerid","Fragment","show","endsWith","ref","triggerHandler","Text","substr","length","fixedWidth","icon","type","defaultValue","arr","join","variant","onClick","customFile","arrayBuffer","ERROR","File","custom","label","accept","files","React","Component","contextType","InstanceEditContext","InputField","currentValue","random","Math","toString","changed","commit","_value","InputGroup","OverlayTrigger","tooltip","Tooltip","event","setEditLock","instantCommit","selectedOptions","editLock","Object","values","enum","filter","val","isNaN","parseInt","possiblevalue","message","Form","Check","inline","currentTarget","checked","FormControl","newValue","style","opacity","pointerEvents","InstanceSettings","InstanceClient","editInstance","reloadInstance","_editInstance","checkIMFlag","flag","resolvePermissionSet","user","instanceManagerRights","ErrorAlert","newval","InstanceManagerRights","Rename","path","Relocate","chatBotLimit","SetChatBotLimit","autoUpdateInterval","SetAutoUpdate","ConfigurationType","configurationType","SetConfiguration","withRouter","InstanceEdit","bind","deleteContextError","RouteData","selectedinstanceid","match","params","tab","tabs","Set","deleteError","instanceid","newSet","delete","getInstance","InstancePermissionSetClient","getCurrentInstancePermissionSet","add","nav","vertical","active","find","onSelect","eventKey","selectedinstanceedittab","history","AppRoutes","instanceedit","link","route","Toggle","Menu","popperConfig","modifiers","enabled","phase","fn","placement","reset","Item","defaultActiveKey","fill","activeKey","tabKey","component","Link","bsPrefix","Provider","assign","serverInfo","Header","instancename","Container","mountOnEnter","unmountOnExit","Body","Content","Comp","Pane","GeneralContext","createContext","WIPNotice","border","Title","href","VERSION","MODE","window","location"],"mappings":"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","file":"4.7bec6018957e1029952e.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport ByondClient from \"../../../../ApiClient/ByondClient\";\nimport { ByondRights } from \"../../../../ApiClient/generatedcode/_enums\";\nimport { ByondResponse } from \"../../../../ApiClient/generatedcode/schemas\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport AccessDenied from \"../../../utils/AccessDenied\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: ByondResponse[];\n    activeVersion?: string | null;\n    latestVersion: string;\n    selectedVersion: string;\n    loading: boolean;\n    customFile?: File | null;\n}\n\nclass Byond extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            activeVersion: \"\",\n            latestVersion: \"\",\n            selectedVersion: \"\",\n            loading: true\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        const response = await ByondClient.listAllVersions(this.context.instance.id);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                versions: response.payload.content\n            });\n\n            const response2 = await ByondClient.getActiveVersion(this.context.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.version\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                this.setState({\n                    latestVersion: version,\n                    selectedVersion: version,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n                this.setState({\n                    loading: false\n                });\n            });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        // noinspection JSBitwiseOperatorUsage\n        if (\n            !(\n                this.context.instancePermissionSet.byondRights & ByondRights.ListInstalled &&\n                this.context.instancePermissionSet.byondRights & ByondRights.ReadActive\n            )\n        ) {\n            return <AccessDenied />;\n        }\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.hosting.byond\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <div\n                    onChange={async (e: ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            loading: true\n                        });\n                        const response = await ByondClient.switchActive(\n                            this.context.instance.id,\n                            e.target.value\n                        );\n                        if (response.code === StatusCode.OK) {\n                            await this.loadVersions();\n                        } else {\n                            this.addError(response.error);\n                        }\n                        this.setState({\n                            loading: false\n                        });\n                    }}>\n                    {this.state.versions.map(version => {\n                        // noinspection JSBitwiseOperatorUsage\n                        return (\n                            <InputGroup className=\"w-25 mb-1 mx-auto d-flex\" key={version.version}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Radio\n                                        disabled={\n                                            !(\n                                                this.context.instancePermissionSet.byondRights &\n                                                ByondRights.InstallOfficialOrChangeActiveVersion\n                                            )\n                                        }\n                                        name=\"byond\"\n                                        id={version.version!}\n                                        value={version.version!}\n                                        defaultChecked={\n                                            version.version! === this.state.activeVersion\n                                        }\n                                    />\n                                </InputGroup.Prepend>\n                                <InputGroup.Append\n                                    className=\"flex-grow-1 m-0\"\n                                    as=\"label\"\n                                    htmlFor={version.version!}>\n                                    <OverlayTrigger\n                                        overlay={tooltip(\"view.instance.hosting.byond.custom\")}\n                                        show={!version.version!.endsWith(\".0\") ? undefined : false}>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"w-100\" {...triggerHandler}>\n                                                {version.version!.endsWith(\".0\")\n                                                    ? version.version!.substr(\n                                                          0,\n                                                          version.version!.length - 2\n                                                      )\n                                                    : version.version}\n                                                {!version.version!.endsWith(\".0\") ? (\n                                                    <div\n                                                        className={\"ml-auto\"}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                ) : null}\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        );\n                    })}\n                </div>\n                <hr />\n                <h4>\n                    <FormattedMessage id=\"view.instance.hosting.byond.add\" />\n                </h4>\n                <InputGroup className=\"w-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"success\"\n                            onClick={async () => {\n                                this.setState({\n                                    loading: true\n                                });\n                                const response = await ByondClient.switchActive(\n                                    this.context.instance.id,\n                                    this.state.selectedVersion,\n                                    this.state.customFile\n                                        ? await this.state.customFile.arrayBuffer()\n                                        : undefined\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    this.addError(response.error);\n                                } else {\n                                    this.setState({\n                                        customFile: null\n                                    });\n                                    await this.loadVersions();\n                                }\n                                this.setState({\n                                    loading: false\n                                });\n                            }}>\n                            <FontAwesomeIcon icon=\"plus\" />\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <Form.File\n                        custom\n                        id=\"test\"\n                        className=\"w-25 text-left\"\n                        label={\n                            this.state.customFile ? (\n                                this.state.customFile.name\n                            ) : (\n                                <FormattedMessage id=\"view.instance.hosting.byond.upload\" />\n                            )\n                        }\n                        accept=\".zip\"\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            this.setState({\n                                customFile: e.target.files ? e.target.files[0] : null\n                            });\n                        }}\n                    />\n                </Form>\n            </div>\n        );\n    }\n}\nByond.contextType = InstanceEditContext;\nexport default Byond;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IState {\n    currentValue: string | boolean | number;\n}\n\ntype IProps = {\n    name: string;\n    disabled?: boolean;\n    setEditLock?: (value: boolean) => void;\n    editLock?: boolean;\n    tooltip?: string;\n    instantCommit?: boolean;\n} & (\n    | {\n          name: string;\n          defaultValue: boolean;\n          onChange: (newvalue: boolean) => void;\n          type: \"bool\";\n      }\n    | {\n          name: string;\n          defaultValue: number;\n          onChange: (newvalue: number) => void;\n          type: \"num\";\n      }\n    | {\n          name: string;\n          defaultValue: string;\n          onChange: (newvalue: string) => void;\n          type: \"str\";\n      }\n    | {\n          name: string;\n          defaultValue: string | number;\n          onChange: (newvalue: string) => void;\n          type: \"enum\";\n          enum: Record<string, string | number>;\n      }\n);\n\nexport default class InputField extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            currentValue: props.defaultValue\n        };\n    }\n\n    public render(): React.ReactNode {\n        const random = Math.random().toString();\n        const changed = this.state.currentValue !== this.props.defaultValue;\n\n        const commit = (_value?: string | number | boolean) => {\n            const value = _value || this.state.currentValue;\n\n            switch (this.props.type) {\n                case \"str\":\n                    this.props.onChange(value as string);\n                    break;\n                case \"num\":\n                    this.props.onChange(value as number);\n                    break;\n                case \"bool\":\n                    this.props.onChange(value as boolean);\n                    break;\n                case \"enum\":\n                    this.props.onChange(value as string);\n                    break;\n            }\n        };\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <InputGroup>\n                <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                    <OverlayTrigger\n                        overlay={tooltip(this.props.tooltip)}\n                        show={this.props.tooltip ? undefined : false}>\n                        {({ ref, ...triggerHandler }) => (\n                            <InputGroup.Text\n                                className={`flex-fill ${changed ? \"font-weight-bold\" : \"\"}`}\n                                {...triggerHandler}>\n                                <FormattedMessage id={`fields.${this.props.name}`} />\n                                {this.props.tooltip ? (\n                                    <div\n                                        className={\"ml-auto\"}\n                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                    </div>\n                                ) : null}\n                            </InputGroup.Text>\n                        )}\n                    </OverlayTrigger>\n                </InputGroup.Prepend>\n                <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                    {this.props.type === \"enum\" ? (\n                        <select\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (\n                                        changed &&\n                                        event.target.selectedOptions[0].value ===\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(false);\n                                    } else if (\n                                        !changed &&\n                                        event.target.selectedOptions[0].value !==\n                                            this.props.defaultValue\n                                    ) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(event.target.selectedOptions[0].value);\n                                } else {\n                                    this.setState({\n                                        currentValue: event.target.selectedOptions[0].value\n                                    });\n                                }\n                            }}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            defaultValue={this.props.defaultValue}>\n                            {Object.values(this.props.enum)\n                                .filter(val => isNaN(parseInt(val as string)))\n                                .map(possiblevalue => (\n                                    <FormattedMessage\n                                        key={possiblevalue}\n                                        id={`fields.${this.props.name}.${possiblevalue}`}>\n                                        {message => (\n                                            <option value={possiblevalue}>{message}</option>\n                                        )}\n                                    </FormattedMessage>\n                                ))}\n                        </select>\n                    ) : this.props.type === \"bool\" ? (\n                        <label\n                            htmlFor={random}\n                            className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                            <Form.Check\n                                inline\n                                type=\"switch\"\n                                custom\n                                id={random}\n                                className=\"m-auto\"\n                                label=\"\"\n                                onChange={event => {\n                                    if (this.props.setEditLock && !this.props.instantCommit) {\n                                        if (\n                                            changed &&\n                                            event.currentTarget.checked === this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(false);\n                                        } else if (\n                                            !changed &&\n                                            event.currentTarget.checked !== this.props.defaultValue\n                                        ) {\n                                            this.props.setEditLock(true);\n                                        }\n                                    }\n\n                                    if (this.props.instantCommit) {\n                                        commit(event.currentTarget.checked);\n                                    } else {\n                                        this.setState({\n                                            currentValue: event.currentTarget.checked\n                                        });\n                                    }\n                                }}\n                                checked={this.state.currentValue as boolean}\n                                disabled={this.props.disabled || (!changed && this.props.editLock)}\n                            />\n                        </label>\n                    ) : (\n                        <FormControl\n                            custom\n                            type={this.props.type === \"num\" ? \"number\" : \"text\"}\n                            className={`flex-fill mb-0 ${changed ? \"font-weight-bold\" : \"\"}`}\n                            onChange={event => {\n                                const newValue =\n                                    this.props.type == \"num\"\n                                        ? parseInt(event.currentTarget.value)\n                                        : event.currentTarget.value;\n\n                                if (this.props.setEditLock && !this.props.instantCommit) {\n                                    if (changed && newValue === this.props.defaultValue) {\n                                        this.props.setEditLock(false);\n                                    } else if (!changed && newValue !== this.props.defaultValue) {\n                                        this.props.setEditLock(true);\n                                    }\n                                }\n\n                                if (this.props.instantCommit) {\n                                    commit(newValue);\n                                } else {\n                                    this.setState({\n                                        currentValue: newValue\n                                    });\n                                }\n                            }}\n                            value={this.state.currentValue as string | number}\n                            disabled={this.props.disabled || (!changed && this.props.editLock)}\n                        />\n                    )}\n                    <React.Fragment>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                if (this.props.setEditLock) {\n                                    this.props.setEditLock(false);\n                                }\n\n                                this.setState({\n                                    currentValue: this.props.defaultValue\n                                });\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                        <InputGroup.Append\n                            style={\n                                !changed\n                                    ? {\n                                          opacity: 0,\n                                          pointerEvents: \"none\"\n                                      }\n                                    : {}\n                            }\n                            onClick={() => {\n                                commit();\n                            }}>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon fixedWidth icon=\"check\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </React.Fragment>\n                </div>\n            </InputGroup>\n        );\n    }\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { InstanceUpdateRequest } from \"../../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField from \"../../../utils/InputField\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    editLock: boolean;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            editLock: false,\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async _editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    private editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        void this._editInstance(instance);\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return resolvePermissionSet(this.context.user).instanceManagerRights & flag;\n        };\n\n        const setEditLock = (value: boolean) => {\n            this.setState({\n                editLock: value\n            });\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputField\n                    name=\"instance.name\"\n                    defaultValue={this.context.instance.name}\n                    type=\"str\"\n                    onChange={newval => {\n                        this.editInstance({ name: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.Rename)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.path\"\n                    defaultValue={this.context.instance.path}\n                    type=\"str\"\n                    onChange={newval => {\n                        this.editInstance({ path: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.Relocate)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.chatbotlimit\"\n                    defaultValue={this.context.instance.chatBotLimit}\n                    type=\"num\"\n                    onChange={newval => {\n                        this.editInstance({ chatBotLimit: newval });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetChatBotLimit)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.autoupdate\"\n                    defaultValue={this.context.instance.autoUpdateInterval}\n                    type=\"num\"\n                    onChange={newval => {\n                        this.editInstance({\n                            autoUpdateInterval: newval\n                        });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetAutoUpdate)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n                <InputField\n                    name=\"instance.filemode\"\n                    defaultValue={ConfigurationType[this.context.instance.configurationType]}\n                    type=\"enum\"\n                    enum={ConfigurationType}\n                    onChange={newval => {\n                        this.editInstance({\n                            // @ts-expect-error typescript isnt a fan of using enums like this\n                            configurationType: ConfigurationType[newval] as 0 | 1 | 2\n                        });\n                    }}\n                    disabled={!checkIMFlag(InstanceManagerRights.SetConfiguration)}\n                    setEditLock={setEditLock}\n                    editLock={this.state.editLock}\n                />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Modifier } from \"@popperjs/core\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport Byond from \"./Edit/Byond\";\nimport InstanceSettings from \"./Edit/Config\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n    public static tabs: [string, IconProp, ComponentType?][] = [\n        [\"info\", \"info\"],\n        [\"repository\", \"code-branch\"],\n        [\"deployment\", \"hammer\"],\n        [\"byond\", \"list-ul\", Byond],\n        [\"chatbots\", \"comments\"],\n        [\"files\", \"folder-open\"],\n        [\"users\", \"users\"],\n        [\"config\", \"cogs\", InstanceSettings]\n    ];\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab || InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.reloadInstance();\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = (vertical: boolean) => {\n            if (vertical) {\n                const active = InstanceEdit.tabs.find(value => value[0] === this.state.tab);\n\n                if (!active) throw \"InstanceEdit: unable to find active tab\";\n\n                // eslint-disable-next-line @typescript-eslint/ban-types\n                const bottomPlacement: Modifier<\"bottomPlacement\", {}> = {\n                    name: \"bottomPlacement\",\n                    enabled: true,\n                    phase: \"beforeMain\",\n                    fn: ({ state }) => {\n                        if (state.placement != \"bottom\") {\n                            state.placement = \"bottom\";\n                            state.reset = true;\n                        }\n                    }\n                };\n\n                return (\n                    <Dropdown\n                        onSelect={eventKey => {\n                            eventKey = eventKey || InstanceEdit.tabs[0][0];\n                            RouteData.selectedinstanceedittab = eventKey;\n                            this.props.history.push(\n                                AppRoutes.instanceedit.link || AppRoutes.instanceedit.route\n                            );\n                            this.setState({ tab: eventKey || InstanceEdit.tabs[0][0] });\n                        }}>\n                        <Dropdown.Toggle\n                            variant=\"secondary\"\n                            id=\"tabselect\"\n                            className=\"d-block mx-auto w-75 text-center\">\n                            <FontAwesomeIcon icon={active[1]} className=\"mr-1\" />\n                            <FormattedMessage id={`view.instanceedit.tabs.${active[0]}`} />\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu\n                            popperConfig={{ modifiers: [bottomPlacement] }}\n                            className=\"d-block mx-auto w-75 text-center\">\n                            {InstanceEdit.tabs.map(value => {\n                                if (value === active) return;\n                                if (value[2] === undefined) return;\n\n                                return (\n                                    <Dropdown.Item key={value[0]} eventKey={value[0]}>\n                                        <FontAwesomeIcon icon={value[1]} className=\"mr-1\" />\n                                        <FormattedMessage\n                                            id={`view.instanceedit.tabs.${value[0]}`}\n                                        />\n                                    </Dropdown.Item>\n                                );\n                            })}\n                        </Dropdown.Menu>\n                    </Dropdown>\n                );\n            }\n\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey || InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link || AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey || InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className=\"flex-nowrap text-nowrap overflow-auto \">\n                    {InstanceEdit.tabs.map(([tabKey, icon, component]) => {\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab \"\n                                    className={!component ? \"wip text-white\" : \"\"}>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon icon={icon} className=\"mr-1\" />\n                                        <FormattedMessage id={`view.instanceedit.tabs.${tabKey}`} />\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card>\n                    <Card.Header className=\"text-center mb-2\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <Card.Body>\n                            <div className=\"d-block d-xl-none\">{nav(true)}</div>\n                            <div className=\"d-none d-xl-block\">{nav(false)}</div>\n                        </Card.Body>\n                        <Card.Body className=\"bg-body\">\n                            <Tab.Content>\n                                {InstanceEdit.tabs.map(([tabKey, , Comp]) => {\n                                    return (\n                                        <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                            {Comp ? <Comp /> : <WIPNotice />}\n                                        </Tab.Pane>\n                                    );\n                                })}\n                            </Tab.Content>\n                        </Card.Body>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n","import React from \"react\";\n\nimport {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/schemas\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n"],"sourceRoot":""}