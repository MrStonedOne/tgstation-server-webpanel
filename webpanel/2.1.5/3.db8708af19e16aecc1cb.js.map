{"version":3,"sources":["webpack:///./src/ApiClient/ByondClient.ts"],"names":["instance","response","ServerClient","wait4Init","apiClient","ByondController_Read","Instance","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","ByondController_List","page","pageSize","version","file","ByondController_Update","uploadCustomZip","responseData","fileTicket","response2","TransferClient","Upload","APP_FAIL","jsError","Error","ApiClient"],"mappings":"4uDAWe,qB,kOAAA,U,MAAA,0E,EAAA,G,EAAA,qCACX,UACIA,GAIA,IAAIC,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWC,qBAAqB,CAAEC,SAAUN,IAC5E,MAAOO,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQN,EAASY,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASd,EAASe,OAG1B,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUC,mBACV,CAAEC,cAAenB,GACjBA,SA7BT,iFAoCX,UACID,GAIA,IAAIC,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWiB,qBAAqB,CAC1Df,SAAUN,EACVsB,KAAM,EACNC,SAAU,MAEhB,MAAOhB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQN,EAASY,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASd,EAASe,OAG1B,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUC,mBACV,CAAEC,cAAenB,GACjBA,SApET,8EA2EX,UACID,EACAwB,EACAC,GAIA,IAAIxB,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWsB,uBACrC,CAAEpB,SAAUN,GACZ,CAAEwB,QAASA,EAASG,kBAAmBF,IAE7C,MAAOlB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQN,EAASY,QACb,KAAK,IACL,KAAK,IACD,IAAMe,EAAe3B,EAASe,KAC9B,GAAIY,EAAaC,WAAY,CACzB,GAAIJ,EAAM,CACN,IAAMK,QAAkBC,IAAeC,OACnCJ,EAAaC,WACbJ,GAEJ,OAAIK,EAAUrB,OAASC,IAAWI,GACvB,IAAIN,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASa,IAGN,IAAIpB,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOkB,EAAUlB,QAIzB,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUe,SAAU,CACzCC,QAASC,MACL,2FAOpB,OAAO,IAAI3B,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASd,EAASe,OAG1B,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUC,mBACV,CAAEC,cAAenB,GACjBA,SA3IT,qD,2BAAA,GAA+BmC","file":"3.db8708af19e16aecc1cb.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ByondInstallResponse,\n    ByondResponse,\n    PaginatedByondResponse\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { UploadErrors } from \"./TransferClient\";\n\nexport default new (class ByondClient extends ApiClient {\n    public async getActiveVersion(\n        instance: number\n    ): Promise<InternalStatus<ByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_Read({ Instance: instance });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listAllVersions(\n        instance: number\n    ): Promise<InternalStatus<PaginatedByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_List({\n                Instance: instance,\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async switchActive(\n        instance: number,\n        version: string,\n        file?: ArrayBuffer\n    ): Promise<InternalStatus<ByondInstallResponse, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_Update(\n                { Instance: instance },\n                { version: version, uploadCustomZip: !!file }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const responseData = response.data as ByondInstallResponse;\n                if (responseData.fileTicket) {\n                    if (file) {\n                        const response2 = await TransferClient.Upload(\n                            responseData.fileTicket,\n                            file\n                        );\n                        if (response2.code === StatusCode.OK) {\n                            return new InternalStatus({\n                                code: StatusCode.OK,\n                                payload: responseData\n                            });\n                        } else {\n                            return new InternalStatus({\n                                code: StatusCode.ERROR,\n                                error: response2.error\n                            });\n                        }\n                    } else {\n                        return new InternalStatus({\n                            code: StatusCode.ERROR,\n                            error: new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\n                                    \"switchActive is uploading a custom zip without actually having a zip file to upload\"\n                                )\n                            })\n                        });\n                    }\n                }\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondInstallResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}