{"version":3,"sources":["webpack:///./src/components/views/ChangePassword.tsx"],"names":["ChangePassword","props","context","id","user","Error","match","params","parseInt","state","errors","password1","password2","userId","currentUser","loading","submit","bind","res","ServerClient","getServerInfo","code","StatusCode","ERROR","this","addError","error","OK","setState","serverInfo","payload","UserClient","getUser","prevState","Array","from","push","event","preventDefault","err","length","minimumPasswordLength","lengthError","matchError","pwdload","editUser","password","login","type","CredentialsType","Password","userName","name","history","goBack","InternalError","ErrorCode","APP_FAIL","jsError","text","onSubmit","className","lg","md","map","index","key","onClose","prev","newarr","undefined","Fragment","Group","controlId","Label","Control","onChange","target","value","isInvalid","Feedback","React","Component","contextType","UserContext","withRouter"],"mappings":"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","file":"15.0eb234754ac118edd434.js","sourcesContent":["import React, { ChangeEvent, FormEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../ApiClient/generatedcode/_generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport { UserContext } from \"../../contexts/UserContext\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    serverInfo?: Components.Schemas.ServerInformationResponse;\n    loading: boolean;\n    pwdload?: boolean;\n    user?: Components.Schemas.UserResponse;\n    userId: number;\n    currentUser: boolean;\n}\n\nclass ChangePassword extends React.Component<IProps, IState> {\n    public declare context: UserContext;\n\n    public constructor(props: IProps, context: UserContext) {\n        super(props);\n\n        if (!context?.user) {\n            throw Error(\"ChangePassword: this.context?.user is null!\");\n        }\n\n        let id: number;\n        if (props.match.params.id) {\n            id = parseInt(props.match.params.id);\n        } else {\n            id = context.user.id;\n        }\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            userId: id,\n            currentUser: context.user.id === id,\n            loading: true\n        };\n\n        this.submit = this.submit.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const res = await ServerClient.getServerInfo();\n\n        switch (res.code) {\n            case StatusCode.ERROR: {\n                this.addError(res.error);\n                break;\n            }\n            case StatusCode.OK: {\n                this.setState({\n                    serverInfo: res.payload\n                });\n                break;\n            }\n        }\n\n        const user = await UserClient.getUser(this.state.userId);\n        if (user.code == StatusCode.OK) {\n            this.setState({\n                user: user.payload\n            });\n        } else {\n            this.addError(user.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    // noinspection DuplicatedCode\n    private async submit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"changepassword submit: this.user is falsy\")\n                })\n            );\n            return;\n        }\n\n        event.preventDefault();\n        let err = false;\n        if (this.state.password1.length < this.state.serverInfo!.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        if (err) return;\n\n        this.setState({\n            pwdload: true\n        });\n\n        const res = await UserClient.editUser({\n            password: this.state.password1,\n            id: this.state.user.id\n        });\n        switch (res.code) {\n            case StatusCode.OK: {\n                if (this.state.currentUser) {\n                    // noinspection ES6MissingAwait //we just dont care about what happens, it can fail or succeed\n                    void ServerClient.login({\n                        type: CredentialsType.Password,\n                        userName: this.state.user.name,\n                        password: this.state.password1\n                    });\n                }\n\n                this.props.history.goBack();\n                break;\n            }\n            case StatusCode.ERROR: {\n                this.addError(res.error);\n                //we only unset it here because its going to get redirected anyways\n                this.setState({\n                    pwdload: false\n                });\n                break;\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.info\" />;\n        }\n        if (this.state.pwdload) {\n            return <Loading text=\"loading.passwd\" />;\n        }\n\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <Form onSubmit={this.submit}>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.user ? (\n                        <React.Fragment>\n                            <h3>\n                                <FormattedMessage id=\"view.user.passwd.title\" />\n                                {this.state.user.name}({this.state.user.id})\n                            </h3>\n                            <hr />\n                            <Form.Group controlId=\"password1\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd1Input}\n                                    value={this.state.password1}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.lengthError ? (\n                                        <React.Fragment>\n                                            <FormattedMessage id=\"login.password.repeat.short\" />\n                                            {this.state.serverInfo!.minimumPasswordLength}\n                                        </React.Fragment>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId=\"password2\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password.repeat\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd2Input}\n                                    value={this.state.password2}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.matchError ? (\n                                        <FormattedMessage id=\"login.password.repeat.match\" />\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                </Col>\n            </Form>\n        );\n    }\n}\nChangePassword.contextType = UserContext;\nexport default withRouter(ChangePassword);\n"],"sourceRoot":""}