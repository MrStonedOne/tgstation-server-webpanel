{"version":3,"sources":["webpack:///./src/ApiClient/UserGroupClient.ts"],"names":["group","response","ServerClient","wait4Init","apiClient","UserGroupController_Update","e","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","GROUP_NOT_FOUND","errorMessage","UNHANDLED_RESPONSE","axiosResponse","UserGroupController_List","pageSize","page","content","name","permissionSet","UserGroupController_Create","id","UserGroupController_Delete","GROUP_NOT_EMPTY","ApiClient"],"mappings":"muDAqBe,qB,kOAAA,U,MAAA,4E,EAAA,G,EAAA,gCACX,UACIA,GAIA,IAAIC,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWC,2BAA2B,KAAML,GAC5E,MAAOM,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQL,EAASW,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASb,EAASc,OAG1B,KAAK,IACD,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUC,gBAAiB,CAChDC,aAAclB,EAASc,SAInC,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAepB,GACjBA,SArCT,4EA4CX,YAGI,IAAIA,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWkB,yBAAyB,CAC9DC,SAAU,IACVC,KAAM,IAEZ,MAAOlB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQL,EAASW,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAUb,EAASc,KAAoCU,UAG/D,QACI,OAAO,IAAIlB,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAepB,GACjBA,SAzET,4EAgFX,UACIyB,EACAC,GAIA,IAAI1B,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWwB,2BAA2B,KAAM,CACtEF,KAAMA,EACNC,cAAeA,IAErB,MAAOrB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQL,EAASW,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAASb,EAASc,OAG1B,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAepB,GACjBA,SAhHT,+EAuHX,UAAyB4B,GAGrB,IAAI5B,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAW0B,2BAA2B,CAAED,GAAIA,IAC5E,MAAOvB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQL,EAASW,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAS,OAGjB,KAAK,IACD,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUc,gBAAiB,CAChDZ,aAAclB,EAASc,SAInC,KAAK,IACD,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUC,gBAAiB,CAChDC,aAAclB,EAASc,SAInC,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAepB,GACjBA,SAjKT,iD,2BAAA,GAAmC+B","file":"8.07a50fe02728adba49e1.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    PaginatedUserGroupResponse,\n    PermissionSet,\n    UserGroupCreateRequest,\n    UserGroupResponse,\n    UserGroupUpdateRequest\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type UpdateGroupErrors = GenericErrors | ErrorCode.GROUP_NOT_FOUND;\nexport type listGroupsErrors = GenericErrors;\nexport type CreateGroupErrors = GenericErrors;\nexport type DeleteGroupErrors =\n    | GenericErrors\n    | ErrorCode.GROUP_NOT_FOUND\n    | ErrorCode.GROUP_NOT_EMPTY;\n\nexport default new (class UserGroupClient extends ApiClient {\n    public async updateGroup(\n        group: UserGroupUpdateRequest\n    ): Promise<InternalStatus<UserGroupResponse, UpdateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Update(null, group);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listGroups(): Promise<InternalStatus<UserGroupResponse[], listGroupsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_List({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as PaginatedUserGroupResponse).content\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createGroup(\n        name: string,\n        permissionSet?: PermissionSet\n    ): Promise<InternalStatus<UserGroupResponse, CreateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Create(null, {\n                name: name,\n                permissionSet: permissionSet\n            } as UserGroupCreateRequest);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteGroup(id: number): Promise<InternalStatus<null, DeleteGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Delete({ id: id });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_EMPTY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}