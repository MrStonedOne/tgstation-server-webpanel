{"version":3,"sources":["webpack:///./src/components/views/User/Create.tsx"],"names":["withRouter","props","state","errors","password1","password2","username","sysuser","loading","submitTGS","bind","submitSYS","res","ServerClient","getServerInfo","code","StatusCode","ERROR","this","addError","error","OK","setState","serverInfo","payload","err","length","minimumPasswordLength","lengthError","matchError","event","preventDefault","validate","creating","user","UserClient","createUser","name","password","postCreateAction","history","systemIdentifier","prevState","Array","from","push","text","className","map","index","key","onClose","prev","newarr","undefined","id","lg","md","onSubmit","Group","controlId","Label","Control","required","onChange","target","value","type","isInvalid","Feedback","Fragment","React","Component","defaultProps","RouteData","selecteduserid","AppRoutes","useredit","link","route"],"mappings":"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","file":"23.487f5164015f5ff43bf5.js","sourcesContent":["import { History as LibHistory } from \"history\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    username: string;\n    sysuser: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    serverInfo?: Components.Schemas.ServerInformationResponse;\n    loading: boolean;\n    creating?: boolean;\n    redirect?: boolean;\n}\ninterface IProps extends RouteComponentProps {\n    postCreateAction?: (user: Components.Schemas.UserResponse, history: LibHistory) => void;\n}\n\nexport default withRouter(\n    class UserCreate extends React.Component<IProps, IState> {\n        public static defaultProps = {\n            postCreateAction: (user: Components.Schemas.UserResponse, history: LibHistory) => {\n                RouteData.selecteduserid = user.id;\n                history.push(AppRoutes.useredit.link || AppRoutes.useredit.route);\n            }\n        };\n\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                password1: \"\",\n                password2: \"\",\n                username: \"\",\n                sysuser: \"\",\n                loading: true\n            };\n\n            this.submitTGS = this.submitTGS.bind(this);\n            this.submitSYS = this.submitSYS.bind(this);\n        }\n\n        public async componentDidMount(): Promise<void> {\n            const res = await ServerClient.getServerInfo();\n\n            switch (res.code) {\n                case StatusCode.ERROR: {\n                    this.addError(res.error);\n                    break;\n                }\n                case StatusCode.OK: {\n                    this.setState({\n                        serverInfo: res.payload\n                    });\n                    break;\n                }\n            }\n\n            this.setState({\n                loading: false\n            });\n        }\n\n        // noinspection DuplicatedCode\n        private validate(): boolean {\n            let err = false;\n            if (this.state.password1.length < this.state.serverInfo!.minimumPasswordLength) {\n                err = true;\n                this.setState({\n                    lengthError: true\n                });\n            } else {\n                this.setState({\n                    lengthError: false\n                });\n            }\n            if (this.state.password2 !== this.state.password1) {\n                err = true;\n                this.setState({\n                    matchError: true\n                });\n            } else {\n                this.setState({\n                    matchError: false\n                });\n            }\n            return err;\n        }\n\n        private async submitTGS(event: FormEvent<HTMLFormElement>) {\n            event.preventDefault();\n\n            //validation\n            if (this.validate()) return;\n            if (!this.state.username) return;\n\n            this.setState({\n                creating: true\n            });\n\n            const user = await UserClient.createUser({\n                name: this.state.username,\n                password: this.state.password1\n            });\n            // noinspection DuplicatedCode\n            if (user.code == StatusCode.OK) {\n                this.props.postCreateAction!(user.payload, this.props.history);\n            } else {\n                this.addError(user.error);\n                this.setState({\n                    creating: false\n                });\n            }\n        }\n\n        private async submitSYS(event: FormEvent<HTMLFormElement>) {\n            event.preventDefault();\n\n            //validation\n            if (!this.state.sysuser) return;\n\n            this.setState({\n                creating: true\n            });\n\n            const user = await UserClient.createUser({\n                systemIdentifier: this.state.sysuser\n            });\n            // noinspection DuplicatedCode\n            if (user.code == StatusCode.OK) {\n                this.props.postCreateAction!(user.payload, this.props.history);\n            } else {\n                this.addError(user.error);\n                this.setState({\n                    creating: false\n                });\n            }\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        public render(): ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.info\" />;\n            }\n            if (this.state.creating) {\n                return <Loading text=\"loading.user.create\" />;\n            }\n\n            const handleUsernameInput = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ username: event.target.value });\n            const handleSysuserInput = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ sysuser: event.target.value });\n            const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ password1: event.target.value });\n            const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ password2: event.target.value });\n\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <h3>\n                        <FormattedMessage id=\"routes.usercreate\" />\n                    </h3>\n                    <Col className=\"mx-auto\" lg={5} md={8}>\n                        <Form onSubmit={this.submitTGS}>\n                            <Form.Group controlId=\"username\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.username\" />\n                                </Form.Label>\n                                <Form.Control\n                                    required\n                                    onChange={handleUsernameInput}\n                                    value={this.state.username}\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"password1\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd1Input}\n                                    value={this.state.password1}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.lengthError ? (\n                                        <React.Fragment>\n                                            <FormattedMessage id=\"login.password.repeat.short\" />\n                                            {this.state.serverInfo!.minimumPasswordLength}\n                                        </React.Fragment>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId=\"password2\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password.repeat\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd2Input}\n                                    value={this.state.password2}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.matchError ? (\n                                        <FormattedMessage id=\"login.password.repeat.match\" />\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"view.user.create.tgs\" />\n                            </Button>\n                        </Form>\n                        <hr />\n                        <Form onSubmit={this.submitSYS}>\n                            <Form.Group controlId=\"sysuser\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"generic.systemidentifier\" />\n                                </Form.Label>\n                                <Form.Control\n                                    required\n                                    onChange={handleSysuserInput}\n                                    value={this.state.sysuser}\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"view.user.create.sys\" />\n                            </Button>\n                        </Form>\n                    </Col>\n                </div>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}