{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/components/views/User/Create.tsx"],"names":["UserCreate","props","state","errors","password1","password2","username","sysuser","submitTGS","bind","submitSYS","err","this","length","context","serverInfo","minimumPasswordLength","setState","lengthError","matchError","event","preventDefault","validate","creating","user","UserClient","name","password","code","StatusCode","postCreateAction","payload","history","addError","error","systemIdentifier","prevState","Array","from","push","text","className","map","index","key","onClose","prev","newarr","undefined","id","lg","md","onSubmit","controlId","required","onChange","target","value","type","isInvalid","React","defaultProps","RouteData","AppRoutes","contextType","GeneralContext","withRouter"],"mappings":"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","file":"257.d43b2144ba4ee050e351.js","sourcesContent":["import { History as LibHistory } from \"history\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { UserResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    username: string;\n    sysuser: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    creating?: boolean;\n    redirect?: boolean;\n}\ninterface IProps extends RouteComponentProps {\n    postCreateAction?: (user: UserResponse, history: LibHistory) => void;\n}\n\nclass UserCreate extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public static defaultProps = {\n        postCreateAction: (user: UserResponse, history: LibHistory) => {\n            RouteData.selecteduserid = user.id;\n            history.push(AppRoutes.useredit.link || AppRoutes.useredit.route);\n        }\n    };\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            username: \"\",\n            sysuser: \"\"\n        };\n\n        this.submitTGS = this.submitTGS.bind(this);\n        this.submitSYS = this.submitSYS.bind(this);\n    }\n\n    // noinspection DuplicatedCode\n    private validate(): boolean {\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        return err;\n    }\n\n    private async submitTGS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (this.validate()) return;\n        if (!this.state.username) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            name: this.state.username,\n            password: this.state.password1\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private async submitSYS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (!this.state.sysuser) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            systemIdentifier: this.state.sysuser\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        if (this.state.creating) {\n            return <Loading text=\"loading.user.create\" />;\n        }\n\n        const handleUsernameInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handleSysuserInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ sysuser: event.target.value });\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"routes.usercreate\" />\n                </h3>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    <Form onSubmit={this.submitTGS}>\n                        <Form.Group controlId=\"username\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.username\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleUsernameInput}\n                                value={this.state.username}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"password1\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd1Input}\n                                value={this.state.password1}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.lengthError ? (\n                                    <React.Fragment>\n                                        <FormattedMessage id=\"login.password.repeat.short\" />\n                                        {this.context.serverInfo.minimumPasswordLength}\n                                    </React.Fragment>\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"password2\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password.repeat\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd2Input}\n                                value={this.state.password2}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.matchError ? (\n                                    <FormattedMessage id=\"login.password.repeat.match\" />\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.tgs\" />\n                        </Button>\n                    </Form>\n                    <hr />\n                    <Form onSubmit={this.submitSYS}>\n                        <Form.Group controlId=\"sysuser\">\n                            <Form.Label>\n                                <FormattedMessage id=\"generic.systemidentifier\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleSysuserInput}\n                                value={this.state.sysuser}\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.sys\" />\n                        </Button>\n                    </Form>\n                </Col>\n            </div>\n        );\n    }\n}\nUserCreate.contextType = GeneralContext;\nexport default withRouter(UserCreate);\n"],"sourceRoot":""}