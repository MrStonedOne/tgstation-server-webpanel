{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/components/views/Admin/Logs.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Table.js"],"names":["withRouter","props","state","errors","loading","logs","param","this","match","params","name","res","AdminClient","code","StatusCode","regex","RegExp","entries","exec","payload","content","push","time","setState","viewedLog","logFile","addError","error","response","prevState","Array","from","download","className","map","err","index","key","onClose","prev","newarr","undefined","text","as","Link","to","AppRoutes","id","onClick","style","height","display","striped","hover","variant","position","top","value","bordered","responsive","logdate","Date","lastModified","logdiff","getTime","now","overlay","toLocaleString","ref","triggerHandler","numeric","updateIntervalInSeconds","history","reload","downloadLog","catch","e","InternalError","ErrorCode","jsError","Component","Table","_ref","bsPrefix","borderless","size","decoratedBsPrefix","classes","table","responsiveClass"],"mappings":"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","file":"105.4118758d5ba09df81a01.js","sourcesContent":["import React, { Component, CSSProperties } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport AdminClient from \"../../../ApiClient/AdminClient\";\nimport { LogFileResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport { DownloadedLog } from \"../../../ApiClient/models/DownloadedLog\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { download } from \"../../../utils/misc\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ name: string | undefined }> {}\n\ninterface LogEntry {\n    time: string;\n    content: string;\n}\n\ninterface Log {\n    logFile: DownloadedLog;\n    entries: LogEntry[];\n}\n\ninterface IState {\n    logs: LogFileResponse[];\n    viewedLog?: Log;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n}\n\nexport default withRouter(\n    class Logs extends Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                loading: true,\n                logs: []\n            };\n        }\n        public async componentDidMount(): Promise<void> {\n            const param = this.props.match.params.name;\n            if (param) {\n                const res = await AdminClient.getLog(param);\n\n                switch (res.code) {\n                    case StatusCode.OK: {\n                        const regex = RegExp(\n                            /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{7}[-+]\\d{2}:\\d{2})\\s+(.*?)(?=(?:\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{7}[-+]\\d{2}:\\d{2}|$))/,\n                            \"gs\"\n                        );\n                        let match;\n                        const entries: LogEntry[] = [];\n                        while ((match = regex.exec(res.payload.content)) !== null) {\n                            entries.push({\n                                time: match[1],\n                                content: match[2]\n                            });\n                        }\n                        this.setState({\n                            viewedLog: {\n                                logFile: res.payload,\n                                entries: entries\n                            }\n                        });\n                        break;\n                    }\n                    case StatusCode.ERROR: {\n                        this.addError(res.error);\n                        break;\n                    }\n                }\n            }\n            const response = await AdminClient.getLogs();\n\n            switch (response.code) {\n                case StatusCode.OK: {\n                    this.setState({\n                        logs: response.payload\n                    });\n                    break;\n                }\n                case StatusCode.ERROR: {\n                    this.addError(response.error);\n                    break;\n                }\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        private async downloadLog(name: string): Promise<void> {\n            const res = await AdminClient.getLog(name);\n            switch (res.code) {\n                case StatusCode.OK: {\n                    download(name, res.payload.content);\n                    break;\n                }\n                case StatusCode.ERROR: {\n                    this.addError(res.error);\n                    break;\n                }\n            }\n        }\n\n        public render(): React.ReactNode {\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.loading ? (\n                        <Loading text=\"loading.logs\" />\n                    ) : this.props.match.params.name && this.state.viewedLog ? (\n                        <div className=\"mx-5 mt-5\">\n                            <h3>{this.props.match.params.name}</h3>\n                            <Button\n                                className=\"mr-1\"\n                                as={Link}\n                                to={AppRoutes.admin_logs.link || AppRoutes.admin_logs.route}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    download(\n                                        this.props.match.params.name!,\n                                        this.state.viewedLog!.logFile.content\n                                    );\n                                }}>\n                                <FormattedMessage id=\"generic.download\" />\n                            </Button>\n                            <hr />\n                            <div\n                                style={{\n                                    height: \"60vh\",\n                                    display: \"block\"\n                                }}\n                                className=\"table-responsive\">\n                                <Table striped hover variant=\"dark\" className=\"text-left\">\n                                    <thead\n                                        className=\"bg-dark\"\n                                        style={\n                                            {\n                                                position: \"sticky\",\n                                                top: 0\n                                            } as CSSProperties\n                                        }>\n                                        <th>\n                                            <FormattedMessage id=\"generic.datetime\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.entry\" />\n                                        </th>\n                                    </thead>\n                                    <tbody>\n                                        {this.state.viewedLog.entries.map(value => {\n                                            return (\n                                                <tr key={value.time}>\n                                                    <td className=\"py-1\">{value.time}</td>\n                                                    <td className=\"py-1\">\n                                                        <pre className=\"mb-0\">{value.content}</pre>\n                                                    </td>\n                                                </tr>\n                                            );\n                                        })}\n                                    </tbody>\n                                </Table>\n                            </div>\n                        </div>\n                    ) : (\n                        <Container className=\"mt-5 mb-5\">\n                            <Table striped bordered hover variant=\"dark\" responsive>\n                                <thead>\n                                    <tr>\n                                        <th>#</th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.name\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.datetime\" />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage id=\"generic.action\" />\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {this.state.logs.map((value, index) => {\n                                        const logdate = new Date(value.lastModified);\n                                        const logdiff = (logdate.getTime() - Date.now()) / 1000;\n\n                                        return (\n                                            <tr key={value.name}>\n                                                <td>{index}</td>\n                                                <td>{value.name}</td>\n                                                <OverlayTrigger\n                                                    overlay={\n                                                        <Tooltip id={`${value.name}-tooltip`}>\n                                                            {logdate.toLocaleString()}\n                                                        </Tooltip>\n                                                    }>\n                                                    {({ ref, ...triggerHandler }) => (\n                                                        <td {...triggerHandler}>\n                                                            <span\n                                                                ref={\n                                                                    ref as React.Ref<HTMLSpanElement>\n                                                                }>\n                                                                <FormattedRelativeTime\n                                                                    value={logdiff}\n                                                                    numeric=\"auto\"\n                                                                    updateIntervalInSeconds={1}\n                                                                />\n                                                            </span>\n                                                        </td>\n                                                    )}\n                                                </OverlayTrigger>\n                                                <td className=\"align-middle p-0\">\n                                                    <Button\n                                                        className=\"mr-1\"\n                                                        onClick={() => {\n                                                            this.props.history.push(\n                                                                (AppRoutes.admin_logs.link ||\n                                                                    AppRoutes.admin_logs.route) +\n                                                                    value.name +\n                                                                    \"/\",\n                                                                {\n                                                                    reload: true\n                                                                }\n                                                            );\n                                                        }}>\n                                                        <FormattedMessage id=\"generic.view\" />\n                                                    </Button>\n                                                    <Button\n                                                        onClick={() => {\n                                                            this.downloadLog(value.name).catch(\n                                                                (e: Error) => {\n                                                                    this.addError(\n                                                                        new InternalError<ErrorCode.APP_FAIL>(\n                                                                            ErrorCode.APP_FAIL,\n                                                                            {\n                                                                                jsError: e\n                                                                            }\n                                                                        )\n                                                                    );\n                                                                }\n                                                            );\n                                                        }}>\n                                                        <FormattedMessage id=\"generic.download\" />\n                                                    </Button>\n                                                </td>\n                                            </tr>\n                                        );\n                                    })}\n                                </tbody>\n                            </Table>\n                        </Container>\n                    )}\n                </div>\n            );\n        }\n    }\n);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;"],"sourceRoot":""}