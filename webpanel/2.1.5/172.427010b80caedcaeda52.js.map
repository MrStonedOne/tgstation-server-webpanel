{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/ApiClient/InstanceClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/InstancePermissionSetClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/ServerClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/UserClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/_base.ts","webpack://tgstation-server-control-panel/./src/ApiClient/generatedcode/_enums.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/ICredentials.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/InternalComms/InternalError.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/InternalComms/InternalStatus.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/ConfigController.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/CredentialsProvider.ts","webpack://tgstation-server-control-panel/./src/ApiClient/JobsClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/JobsController.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/LoginHooks.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/config.ts"],"names":["response","page","pageSize","configOptions","ServerClient","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","axiosResponse","instance","this","emit","id","errorMessage","instanceid","ApiClient","_cachedInstancePermissionSet","Map","loadingInstancePermissionSetInfo","clear","has","get","Promise","resolve","on","resolver","user","removeListener","set","Instance","res","apiClient","api","initialized","loadingServerInfo","_serverInfo","autoLogin","loggingIn","getServerInfo","bind","LoginHooks","undefined","CredentialsProvider","console","log","initApi","then","catch","window","location","reload","time","defObj","default","OpenAPIClientAxios","definition","axiosConfigDefaults","baseURL","withCredentials","headers","Accept","Api","API_VERSION","VERSION","validateStatus","globalHandledCodes","includes","init","interceptors","request","use","value","errorobj","void","reject","url","tok","wait4Token","bearer","val","snowflake","err","jsError","config","method","login","client","logout","setTimeout","timeEnd","token","newCreds","wait4Init","oauthAutoLogin","type","CredentialsType","info","HomeController_CreateToken","OAuthProvider","auth","username","password","Authorization","_token","bypassCache","HomeController_Home","cache","_cachedUser","loadingUserInfo","createAllUsersWithAA","getCurrentUser","newUser","current","thing","content","sort","a","b","newuser","enabled","instanceManagerRights","administrationRights","Object","values","InstanceManagerRights","perm","AdministrationRights","clients","constructor","name","TypedEmitter","ByondRights","ChatBotRights","ChatProvider","ConfigurationRights","ConfigurationType","DreamDaemonRights","DreamDaemonSecurity","DreamMakerRights","InstancePermissionSetRights","RemoteGitProvider","RepositoryRights","RightsType","WatchdogStatus","DescType","addon","origin","desc","extendedInfo","originalErrorMessage","TEXT","TGSErrorCode","errorCode","message","additionalData","stack","Error","debuginfo","JSON","stringify","replace","replaceAll","breakonerror","args","freeze","assign","getconfig","newconfig","entries","key","setconfig","option","deleteconfig","parseInt","Number","isNaN","min","max","callback","localStorage","setItem","e","getItem","json","parse","removeItem","credentials","newContent","map","job","jobid","fastmodecount","currentLoop","Date","accessibleInstances","Set","enableJobProgressWorkaround","errors","jobs","jobsByInstance","loop","reset","restartLoop","cycles","reloadAccessibleInstances","push","InstanceClient","SemverSatisfies","version","allInstances","instances1","i","totalPages","instances2","updatedSet","work","filter","online","InstancePermissionSetClient","permissionSet","add","all","initDate","now","loopid","totalActiveJobs","forEach","processJobs","instanceSet","remoteActive","manualIds","Array","from","stoppedAt","jobId","JobsClient","getJob","length","processError","delete","listActiveJobs","jobs2","reason","progress","progressedjob","canCancel","cancelRightsType","userInfo","UserClient","required","cancelRight","resolvePermissionSet","InstancePermissionSet","byondRights","chatBotRights","configurationRights","dreamDaemonRights","dreamMakerRights","instancePermissionSetRights","repositoryRights","onError","deleteInfo","deleteJob","promiseHooks","hook","jobsWidgetOptions","githubtoken","apipath","DEFAULT_APIPATH","jobpollinactive","jobpollactive","jobswidgetdisplay","possibleValues","AUTO","instanceprobetimer","itemsperpage"],"mappings":"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8DAAAA,I,wDAAAA,I,oEAAAA,I,8DAAAA,I,oEAAAA,I,8BAAAA,I,wBAAAA,I,4BAAAA,I,8BAAAA,I,8DAAAA,I,wDAAAA,I,8DAAAA,I,oDAAAA,I,8DAAAA,I,gEAAAA,I,sCAAAA,I,wDAAAA,I,sDAAAA,I,0EAAAA,I,kDAAAA,I,oDAAAA,I,8DAAAA,I,4BAAAA,I,4CAAAA,I,sDAAAA,I,0CAAAA,I,wDAAAA,I,wDAAAA,I,8DAAAA,I,gFAAAA,I,sCAAAA,I,gDAAAA,I,4CAAAA,I,oEAAAA,I,4EAAAA,I,0EAAAA,I,0EAAAA,I,sEAAAA,I,sDAAAA,I,oDAAAA,I,kDAAAA,I,sCAAAA,I,8DAAAA,I,kDAAAA,I,oDAAAA,I,oEAAAA,I,0DAAAA,I,0CAAAA,I,wDAAAA,I,kDAAAA,I,gEAAAA,I,kDAAAA,I,oDAAAA,I,gDAAAA,I,0CAAAA,I,4CAAAA,I,4CAAAA,I,gDAAAA,I,4CAAAA,I,4BAAAA,I,gCAAAA,I,gCAAAA,I,4DAAAA,I,kEAAAA,I,4CAAAA,I,sCAAAA,I,0DAAAA,I,gEAAAA,I,wCAAAA,I,wCAAAA,I,gDAAAA,I,kDAAAA,I,0CAAAA,I,0DAAAA,I,0CAAAA,I,yCAAAA,I,oDAAAA,M,cAyGAqH,O,eAAAA,I,eAAAA,I,mBAAAA,I,mBAAAA,I,uBAAAA,I,0BAAAA,I,oBAAAA,I,gBAAAA,I,yCAAAA,I,mCAAAA,I,uCAAAA,I,2CAAAA,M,cAeAe,O,eAAAA,I,eAAAA,I,iBAAAA,I,oBAAAA,M,cAOAzC,K,gBAAAA,E,kBAAAA,E,oBAAAA,E,qBAAAA,M,cAOA0C,O,qBAAAA,I,mBAAAA,I,oBAAAA,M,cAMAC,O,eAAAA,I,+CAAAA,I,yBAAAA,I,mBAAAA,I,uCAAAA,I,gCAAAA,I,sCAAAA,I,oDAAAA,I,2CAAAA,I,iCAAAA,I,iBAAAA,I,0DAAAA,I,sBAAAA,I,iCAAAA,M,cAiBAC,O,mCAAAA,I,qCAAAA,I,2BAAAA,I,iBAAAA,I,2BAAAA,I,6BAAAA,I,uBAAAA,I,iCAAAA,I,kDAAAA,M,cAYAC,O,qBAAAA,I,yBAAAA,I,mBAAAA,I,oCAAAA,M,y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","file":"172.427010b80caedcaeda52.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    InstanceCreateRequest,\n    InstanceResponse,\n    InstanceUpdateRequest,\n    PaginatedInstanceResponse\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\nexport type ListInstancesErrors = GenericErrors;\nexport type CreateInstanceErrors = GenericErrors;\nexport type EditInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\nexport type GetInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\n\ninterface IEvents {\n    instanceChange: (instanceId: number) => void;\n}\n\nexport default new (class InstanceClient extends ApiClient<IEvents> {\n    public async listInstances({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    } = {}): Promise<InternalStatus<PaginatedInstanceResponse, ListInstancesErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_List({\n                pageSize: pageSize,\n                page: page\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedInstanceResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async editInstance(\n        instance: InstanceUpdateRequest\n    ): Promise<InternalStatus<InstanceResponse, EditInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Update(null, instance);\n            this.emit(\"instanceChange\", instance.id);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const instance = response.data as InstanceResponse;\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createInstance(\n        instance: InstanceCreateRequest\n    ): Promise<InternalStatus<InstanceResponse, CreateInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Create(null, instance);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 201: {\n                const instance = response.data as InstanceResponse;\n\n                this.emit(\"instanceChange\", instance.id);\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 409:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.HTTP_DATA_INEGRITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getInstance(\n        instanceid: number\n    ): Promise<InternalStatus<InstanceResponse, GetInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_GetId({ id: instanceid });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as InstanceResponse\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { ApiClient } from \"./_base\";\nimport { InstancePermissionSetResponse } from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\ninterface IEvents {\n    loadInstancePermissionSet: (\n        user: InternalStatus<InstancePermissionSetResponse, GenericErrors>\n    ) => void;\n}\n\nexport type getCurrentInstancePermissionSetErrors = GenericErrors;\n\nexport default new (class InstancePermissionSetClient extends ApiClient<IEvents> {\n    private _cachedInstancePermissionSet: Map<\n        number,\n        InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>\n    > = new Map<number, InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>>();\n\n    private loadingInstancePermissionSetInfo: Map<number, boolean> = new Map<number, boolean>();\n\n    public constructor() {\n        super();\n\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedInstancePermissionSet.clear();\n        });\n    }\n\n    public async getCurrentInstancePermissionSet(\n        instanceid: number\n    ): Promise<\n        InternalStatus<InstancePermissionSetResponse, getCurrentInstancePermissionSetErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        if (this._cachedInstancePermissionSet.has(instanceid)) {\n            return this._cachedInstancePermissionSet.get(instanceid)!;\n        }\n\n        if (this.loadingInstancePermissionSetInfo.get(instanceid)) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<InstancePermissionSetResponse, GenericErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadInstancePermissionSet\", resolver);\n                };\n                this.on(\"loadInstancePermissionSet\", resolver);\n            });\n        }\n\n        this.loadingInstancePermissionSetInfo.set(instanceid, true);\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstancePermissionSetController_Read({\n                Instance: instanceid\n            });\n        } catch (stat) {\n            const res = new InternalStatus<InstancePermissionSetResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadInstancePermissionSet\", res);\n            this.loadingInstancePermissionSetInfo.set(instanceid, false);\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const res = new InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as InstancePermissionSetResponse\n                });\n\n                this._cachedInstancePermissionSet.set(instanceid, res);\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<InstancePermissionSetResponse, GenericErrors>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n        }\n    }\n})();\n","import { AxiosError, AxiosResponse, OpenAPIClientAxios } from \"openapi-client-axios\";\nimport { Document } from \"openapi-client-axios/types/client\";\n\nimport { API_VERSION, VERSION } from \"../definitions/constants\";\nimport { ApiClient } from \"./_base\";\nimport { Client } from \"./generatedcode/_generated\";\nimport {\n    ErrorMessageResponse,\n    ServerInformationResponse,\n    TokenResponse\n} from \"./generatedcode/schemas\";\nimport { CredentialsType, ICredentials } from \"./models/ICredentials\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport configOptions from \"./util/config\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    //self explainatory\n    logout: () => void;\n    //fired whenever something is denied access, shouldnt really be used\n    accessDenied: () => void;\n    //fired when the server info is first loaded\n    loadServerInfo: (\n        serverInfo: InternalStatus<ServerInformationResponse, ServerInfoErrors>\n    ) => void;\n    //fired when the api is loaded from the json file and loaded\n    initialized: () => void;\n    //purge all caches\n    purgeCache: () => void;\n    //internal event, queues logins\n    loadLoginInfo: (loginInfo: InternalStatus<TokenResponse, LoginErrors>) => void;\n    //internal event fired for wait4Token(), external things should be using LoginHooks#LoginSuccess or a login hook\n    tokenAvailable: (token: TokenResponse) => void;\n}\n\nexport type LoginErrors =\n    | GenericErrors\n    | ErrorCode.LOGIN_DISABLED\n    | ErrorCode.LOGIN_FAIL\n    | ErrorCode.LOGIN_NOCREDS\n    | ErrorCode.LOGIN_BAD_OAUTH\n    | ErrorCode.LOGIN_RATELIMIT;\n\nexport type ServerInfoErrors = GenericErrors;\n\nexport default new (class ServerClient extends ApiClient<IEvents> {\n    private static readonly globalHandledCodes = [400, 401, 403, 406, 409, 426, 500, 501, 503];\n\n    //api\n    public apiClient?: Client; //client to interface with the api\n    private api?: OpenAPIClientAxios; //api object, handles sending requests and configuring things\n    private initialized = false;\n    private loadingServerInfo = false;\n\n    public constructor() {\n        super();\n        this.getServerInfo = this.getServerInfo.bind(this);\n\n        LoginHooks.addHook(this.getServerInfo);\n        this.on(\"purgeCache\", () => {\n            this._serverInfo = undefined;\n            if (CredentialsProvider.token) {\n                void LoginHooks.runHooks(CredentialsProvider.token);\n            }\n        });\n\n        //Why is this here? Because otherwise it creates an import loop, grrrrr\n        configOptions.apipath.callback = (): void => {\n            console.log(\"Reinitializing API\");\n            this.initApi()\n                .then(() => {\n                    console.log(\"API Reinitialized\");\n                })\n                .catch(() => {\n                    //The API failing to initialize is a big nono, start all over again.\n                    window.location.reload();\n                });\n        };\n    }\n\n    //serverInfo\n    private _serverInfo?: InternalStatus<ServerInformationResponse, ErrorCode.OK>;\n\n    public get serverInfo() {\n        return this._serverInfo;\n    }\n\n    public autoLogin = true;\n    private loggingIn = false;\n\n    public async initApi() {\n        console.log(\"Initializing API client\");\n        console.time(\"APIInit\");\n        //Object is forced typecasted to Document because i really cant be assed to figure out why it doesn't accept the json\n        //The json is loaded with import to force webpack to bundle it alone\n        const defObj = ((await import(\"./generatedcode/swagger.json\"))\n            .default as unknown) as Document;\n\n        this.api = new OpenAPIClientAxios({\n            definition: defObj,\n            //Defaults for all requests sent by the apiClient, you may notice a lack of authorization headers,\n            // those are applied in the request interceptor\n            axiosConfigDefaults: {\n                //Yes this is only initialized once even if the configOption changes, this doesn't\n                baseURL: configOptions.apipath.value as string,\n                withCredentials: false,\n                headers: {\n                    Accept: \"application/json\",\n                    Api: `Tgstation.Server.Api/` + API_VERSION,\n                    \"Webpanel-Version\": VERSION\n                },\n                //Global errors are handled via the catch clause and endpoint specific response codes are handled normally\n                validateStatus: status => {\n                    return !ServerClient.globalHandledCodes.includes(status);\n                }\n            }\n        });\n        this.apiClient = await this.api.init<Client>();\n\n        //Oh lord here be shitcode, welcome to the land of interceptors, they as their name say\n        // intercept requests and changes them. It also intercepts responses and changes them\n        this.apiClient.interceptors.request.use(\n            async value => {\n                //Meta value that means theres no value, used in the github deployed version\n                if (configOptions.apipath.value === \"https://example.org:5000\") {\n                    const errorobj = new InternalError(ErrorCode.NO_APIPATH, {\n                        void: true\n                    });\n                    return Promise.reject(errorobj);\n                }\n\n                //This applies the authorization header, it will wait however long it needs until\n                // theres a token available. It obviously won't wait for a token before sending the request\n                // if its currently sending a request to the login endpoint...\n                if (!(value.url === \"/\" || value.url === \"\")) {\n                    const tok = await this.wait4Token();\n                    (value.headers as { [key: string]: string })[\"Authorization\"] =\n                        \"Bearer \" + tok.bearer;\n                }\n                return value;\n            },\n            error => {\n                return Promise.reject(error);\n            }\n        );\n\n        //I am sorry for what you will see before you, this is the response interceptor, it normalizes\n        // all the weird shit in the TGS api to make it *somewhat* easier to consume in the rest of the app\n        // onFulfilled here is a noop that returns its arguments because we only care to intercept errors\n        this.apiClient.interceptors.response.use(\n            val => val,\n            (error: AxiosError): Promise<AxiosResponse> => {\n                //THIS IS SNOWFLAKE KEKW\n                //As the above comment mentions, this shitcode is very snowflake\n                // it tries to typecast the \"response\" we got into an error then tries to check if that \"error\" is\n                // the snowflake no apipath github error, if it is, it rejects the promise to send it to the catch block\n                // all endpoints have which simply returns the error wrapped in a status object\n                const snowflake = (error as unknown) as InternalError<ErrorCode.NO_APIPATH>;\n                if (snowflake?.code === ErrorCode.NO_APIPATH) {\n                    return Promise.reject(snowflake);\n                }\n\n                //This was originally an else clause at the bottom but it made it hard to find\n                // if the promise rejected and its not because its a globally handled status code\n                // it means that axios created an error itself for an unknown reason(network failure,\n                // cors failure, user is navigating away, aborting requests, etc). Simply return the error\n                // as a globally handled error.\n                if (\n                    !(\n                        error.response &&\n                        error.response.status &&\n                        ServerClient.globalHandledCodes.includes(error.response.status)\n                    )\n                ) {\n                    const err = error as Error;\n                    const errorobj = new InternalError(\n                        ErrorCode.AXIOS,\n                        { jsError: err },\n                        error.response\n                    );\n                    return Promise.reject(errorobj);\n                }\n\n                //I am sorry, this is the bulk of the shitcode, its a massive switch that handles every single\n                // globally handled status code and sometimes not so globally because one endpoint decided it would be\n                const res = error.response as AxiosResponse<unknown>;\n                switch (error.response.status) {\n                    //Error code 400: Bad request, show message to user and instruct them to report it as its probably a bug\n                    case 400: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_BAD_REQUEST,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    //Error code 401: Access Denied, fired whenever a token expires, in that case, attempt to reauthenticate\n                    // using the last known working credentials, if that succeeds, reissue the request, otherwise logout the\n                    // user and kick them to the login page. Snowflake behaviour: Acts as a failed login for the login endpoint\n                    case 401: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        }\n\n                        if (this.autoLogin) {\n                            return this.login().then(status => {\n                                switch (status.code) {\n                                    case StatusCode.OK: {\n                                        return this.api!.client.request(error.config);\n                                    }\n                                    case StatusCode.ERROR: {\n                                        this.emit(\"accessDenied\");\n                                        //time to kick out the user\n                                        this.logout();\n                                        const errorobj = new InternalError(\n                                            ErrorCode.HTTP_ACCESS_DENIED,\n                                            {\n                                                void: true\n                                            },\n                                            res\n                                        );\n                                        return Promise.reject(errorobj);\n                                    }\n                                }\n                            });\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 403: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 406: {\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_NOT_ACCEPTABLE,\n                            {\n                                void: true\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 409: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n\n                        //Thanks for reusing a global erorr status cyber. Log operations can return 409\n                        const request = error.config;\n                        if (request.url === \"/Administration/Logs\" && request.method === \"get\") {\n                            return Promise.resolve(error.response);\n                        }\n\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_DATA_INEGRITY,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 426: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_API_MISMATCH,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 500: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_SERVER_ERROR,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 501: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_UNIMPLEMENTED,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 503: {\n                        console.log(\"Server not ready, delaying request\", error.config);\n                        return new Promise(resolve => {\n                            setTimeout(resolve, 5000);\n                        }).then(() => this.api!.client.request(error.config));\n                        /*const errorobj = new InternalError(\n                                ErrorCode.HTTP_SERVER_NOT_READY,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);*/\n                    }\n                    default: {\n                        const errorobj = new InternalError(\n                            ErrorCode.UNHANDLED_GLOBAL_RESPONSE,\n                            {\n                                axiosResponse: res\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                }\n            }\n        );\n        console.timeEnd(\"APIInit\");\n        this.initialized = true;\n        this.emit(\"initialized\");\n    }\n\n    //Utility function that returns a promise which resolves whenever ServerClient#ApiClient becomes valid\n    public wait4Init(): Promise<void> {\n        return new Promise<void>(resolve => {\n            if (this.initialized) {\n                resolve();\n                return;\n            }\n            this.on(\"initialized\", () => resolve());\n        });\n    }\n\n    //Utility function that returns a promise which resolves with the token whenever theres valid credentials(could be immediatly)\n    public wait4Token() {\n        return new Promise<TokenResponse>(resolve => {\n            if (CredentialsProvider.isTokenValid()) {\n                resolve(CredentialsProvider.token);\n                return;\n            }\n            this.on(\"tokenAvailable\", token => {\n                resolve(token);\n            });\n        });\n    }\n\n    public async login(\n        newCreds?: ICredentials\n    ): Promise<InternalStatus<TokenResponse, LoginErrors>> {\n        //Shouldn't really happen edge cases\n        await this.wait4Init();\n\n        console.log(\"Attempting login\");\n\n        //Newcreds is optional, if its missing its going to try to reuse the last used credentials,\n        // if newCreds exists, its going to use newCreds\n        let oauthAutoLogin = false;\n        if (newCreds) {\n            CredentialsProvider.credentials = newCreds;\n        } else if (CredentialsProvider.credentials?.type === CredentialsType.OAuth) {\n            // autologin doesn't work with OAuth\n            this.logout();\n            oauthAutoLogin = true;\n        }\n\n        //This is thrown if you try to reuse the last credentials without actually having last used credentials\n        //or you let an oauth login expire\n        if (oauthAutoLogin || !CredentialsProvider.credentials)\n            return new InternalStatus<TokenResponse, ErrorCode.LOGIN_NOCREDS>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.LOGIN_NOCREDS, { void: true })\n            });\n\n        //This block is here to prevent duplication of login requests at the same time, when you start logging in,\n        // it sets loggingIn to true and fires an event once its done logging in, successful or not, if you try to login\n        // while another login request is ongoing, it listens to that event and returns the output normally.\n        //\n        // Basically, make two calls, receive two identical return values, make only one request\n        if (this.loggingIn) {\n            return await new Promise(resolve => {\n                const resolver = (info: InternalStatus<TokenResponse, LoginErrors>) => {\n                    resolve(info);\n                    this.removeListener(\"loadLoginInfo\", resolver);\n                };\n                this.on(\"loadLoginInfo\", resolver);\n            });\n        }\n        this.loggingIn = true;\n\n        let response;\n        try {\n            if (CredentialsProvider.credentials.type == CredentialsType.Password)\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: (undefined as unknown) as string\n                    },\n                    null,\n                    {\n                        auth: {\n                            username: CredentialsProvider.credentials.userName,\n                            password: CredentialsProvider.credentials.password\n                        }\n                    }\n                );\n            else {\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: CredentialsProvider.credentials.provider\n                    },\n                    null,\n                    {\n                        headers: {\n                            Authorization: `OAuth ${CredentialsProvider.credentials.token}`\n                        }\n                    }\n                );\n            }\n        } catch (stat) {\n            const res = new InternalStatus<TokenResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadLoginInfo\", res);\n            return res;\n        } finally {\n            this.loggingIn = false;\n        }\n        switch (response.status) {\n            case 200: {\n                console.log(\"Login success\");\n                const token = response.data as TokenResponse;\n\n                // CredentialsProvider.token is added to all requests in the form of Authorization: Bearer <token>\n                CredentialsProvider.token = token;\n                this.emit(\"tokenAvailable\", token);\n\n                //LoginHooks are a way of running several async tasks at the same time whenever the user is authenticated,\n                // we cannot use events here as events wait on each listener before proceeding which has a noticable performance\n                // cost when it comes to several different requests to TGS,\n                // we cant directly call what we need to run here as it would violate isolation of\n                // ApiClient(the apiclient is independent from the rest of the app to avoid circular dependency\n                // (example: Component requires ServerClient to login and but the ServerClient requires Component to\n                // update it once the server info is loaded))\n                //\n                // TL;DR; Runs shit when you login\n\n                LoginHooks.runHooks(token);\n                const res = new InternalStatus<TokenResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: token\n                });\n                //Deduplication\n                this.emit(\"loadLoginInfo\", res);\n\n                return res;\n            }\n            case 401: {\n                this.logout();\n                console.log(\"Failed to login\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_FAIL,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 403: {\n                this.logout();\n                console.log(\"Account disabled\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_DISABLED>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_DISABLED,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 429: {\n                this.logout();\n                console.log(\"rate limited\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_RATELIMIT>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_RATELIMIT,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<TokenResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n        }\n    }\n\n    public logout() {\n        //If theres no token it means theres nothing to clear\n        if (!CredentialsProvider.isTokenValid()) {\n            return;\n        }\n        console.log(\"Logging out\");\n        CredentialsProvider.credentials = undefined;\n        CredentialsProvider.token = undefined;\n        //events to clear the app state as much as possible for the next user\n        this.emit(\"purgeCache\");\n        this.emit(\"logout\");\n    }\n\n    public async getServerInfo(\n        _token?: TokenResponse,\n        bypassCache = false\n    ): Promise<InternalStatus<ServerInformationResponse, ServerInfoErrors>> {\n        await this.wait4Init();\n\n        if (this._serverInfo && !bypassCache) {\n            return this._serverInfo;\n        }\n\n        if (this.loadingServerInfo) {\n            return new Promise(resolve => {\n                if (this._serverInfo) {\n                    //race condition if 2 things listen to an event or something\n                    resolve(this._serverInfo);\n                    return;\n                }\n                const resolver = (\n                    info: InternalStatus<ServerInformationResponse, GenericErrors>\n                ) => {\n                    resolve(info);\n                    this.removeListener(\"loadServerInfo\", resolver);\n                };\n                this.on(\"loadServerInfo\", resolver);\n            });\n        }\n\n        this.loadingServerInfo = true;\n\n        let response;\n        try {\n            response = await this.apiClient!.HomeController_Home();\n        } catch (stat) {\n            const res = new InternalStatus<ServerInformationResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadServerInfo\", res);\n            this.loadingServerInfo = false;\n            return res;\n        }\n        switch (response.status) {\n            case 200: {\n                const info = response.data as ServerInformationResponse;\n                const cache = new InternalStatus<ServerInformationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: info\n                });\n                this.emit(\"loadServerInfo\", cache);\n                this._serverInfo = cache;\n                this.loadingServerInfo = false;\n                return cache;\n            }\n            default: {\n                const res = new InternalStatus<\n                    ServerInformationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadServerInfo\", res);\n                this.loadingServerInfo = false;\n                return res;\n            }\n        }\n    }\n})();\n\n//https://stackoverflow.com/questions/40510611/typescript-interface-require-one-of-two-properties-to-exist\n//name describes what it does, makes the passed type only require 1 property, the others being optional\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n    {\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n    }[Keys];\n","import { ApiClient } from \"./_base\";\nimport { AdministrationRights, InstanceManagerRights } from \"./generatedcode/_enums\";\nimport {\n    ErrorMessageResponse,\n    PaginatedUserResponse,\n    UserCreateRequest,\n    UserResponse,\n    UserUpdateRequest\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    loadUserInfo: (user: InternalStatus<UserResponse, GenericErrors>) => void;\n}\n\nexport type GetCurrentUserErrors = GenericErrors;\nexport type EditUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND | GetCurrentUserErrors;\nexport type GetUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type CreateUserErrors = GenericErrors | ErrorCode.USER_NO_SYS_IDENT;\n\nexport default new (class UserClient extends ApiClient<IEvents> {\n    private _cachedUser?: InternalStatus<UserResponse, ErrorCode.OK>;\n    public get cachedUser() {\n        return this._cachedUser;\n    }\n    private loadingUserInfo = false;\n    //If set to true, all created users will default to having all permissions granted, used by the setup\n    public createAllUsersWithAA = false;\n\n    public constructor() {\n        super();\n        this.getCurrentUser = this.getCurrentUser.bind(this);\n\n        LoginHooks.addHook(() => this.getCurrentUser());\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedUser = undefined;\n        });\n    }\n\n    public async editUser(\n        newUser: UserUpdateRequest\n    ): Promise<InternalStatus<UserResponse, EditUserErrors>> {\n        await ServerClient.wait4Init();\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Update(null, newUser);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<EditUserErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                const current = await this.getCurrentUser();\n                if (current.code == StatusCode.OK) {\n                    if (current.payload.id == newUser.id) {\n                        //if we are editing ourselves, clear cached data to reload permissions on the app\n                        ServerClient.emit(\"purgeCache\");\n                    }\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: current.error\n                    });\n                }\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getCurrentUser(\n        bypassCache?: boolean\n    ): Promise<InternalStatus<UserResponse, GetCurrentUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (!CredentialsProvider.isTokenValid()) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.HTTP_ACCESS_DENIED, {\n                    void: true\n                })\n            });\n        }\n\n        if (this._cachedUser && !bypassCache) {\n            return this._cachedUser;\n        }\n\n        if (this.loadingUserInfo) {\n            return await new Promise(resolve => {\n                const resolver = (user: InternalStatus<UserResponse, GenericErrors>) => {\n                    resolve(user);\n                    this.removeListener(\"loadUserInfo\", resolver);\n                };\n                this.on(\"loadUserInfo\", resolver);\n            });\n        }\n\n        this.loadingUserInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Read();\n        } catch (stat) {\n            const res = new InternalStatus<UserResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadUserInfo\", res);\n            this.loadingUserInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<UserResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n\n                this._cachedUser = thing;\n                this.emit(\"loadUserInfo\", thing);\n                this.loadingUserInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<UserResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadUserInfo\", res);\n                this.loadingUserInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async listUsers(): Promise<InternalStatus<UserResponse[], GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_List({\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as PaginatedUserResponse)!.content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getUser(id: number): Promise<InternalStatus<UserResponse, GetUserErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_GetId({ id: id });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createUser(\n        newuser:\n            | {\n                  name: string;\n                  password: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n            | {\n                  systemIdentifier: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n    ): Promise<InternalStatus<UserResponse, CreateUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (newuser.enabled === undefined) newuser.enabled = true;\n        if (this.createAllUsersWithAA) {\n            newuser.instanceManagerRights = 0;\n            newuser.administrationRights = 0;\n\n            for (const perm of Object.values(InstanceManagerRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.instanceManagerRights += perm;\n            }\n\n            for (const perm of Object.values(AdministrationRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.administrationRights += perm;\n            }\n        }\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Create(\n                null,\n                newuser as UserCreateRequest\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NO_SYS_IDENT, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { DefaultListener, ListenerSignature, TypedEmitter } from \"tiny-typed-emitter\";\n\nexport abstract class ApiClient<\n    L extends ListenerSignature<L> = DefaultListener\n> extends TypedEmitter<L> {\n    public constructor() {\n        super();\n        if (window.clients == undefined) window.clients = {};\n        console.log(this.constructor.name, this);\n        window.clients[this.constructor.name] = this;\n    }\n}\n","export enum AdministrationRights {\n   None = 0,\n   WriteUsers = 1,\n   RestartHost = 2,\n   ChangeVersion = 4,\n   EditOwnPassword = 8,\n   ReadUsers = 16,\n   DownloadLogs = 32,\n   EditOwnOAuthConnections = 64\n}\n\nexport enum ByondRights {\n   None = 0,\n   ReadActive = 1,\n   ListInstalled = 2,\n   InstallOfficialOrChangeActiveVersion = 4,\n   CancelInstall = 8,\n   InstallCustomVersion = 16\n}\n\nexport enum ChatBotRights {\n   None = 0,\n   WriteEnabled = 1,\n   WriteProvider = 2,\n   WriteChannels = 4,\n   WriteConnectionString = 8,\n   ReadConnectionString = 16,\n   Read = 32,\n   Create = 64,\n   Delete = 128,\n   WriteName = 256,\n   WriteReconnectionInterval = 512,\n   WriteChannelLimit = 1024\n}\n\nexport enum ChatProvider {\n   Irc = 0,\n   Discord = 1\n}\n\nexport enum ConfigurationRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   List = 4,\n   Delete = 8\n}\n\nexport enum ConfigurationType {\n   Disallowed = 0,\n   HostWrite = 1,\n   SystemIdentityWrite = 2\n}\n\nexport enum DreamDaemonRights {\n   None = 0,\n   ReadRevision = 1,\n   SetPort = 2,\n   SetAutoStart = 4,\n   SetSecurity = 8,\n   ReadMetadata = 16,\n   SetWebClient = 32,\n   SoftRestart = 64,\n   SoftShutdown = 128,\n   Restart = 256,\n   Shutdown = 512,\n   Start = 1024,\n   SetStartupTimeout = 2048,\n   SetHeartbeatInterval = 4096,\n   CreateDump = 8192,\n   SetTopicTimeout = 16384,\n   SetAdditionalParameters = 32768\n}\n\nexport enum DreamDaemonSecurity {\n   Trusted = 0,\n   Safe = 1,\n   Ultrasafe = 2\n}\n\nexport enum DreamMakerRights {\n   None = 0,\n   Read = 1,\n   Compile = 2,\n   CancelCompile = 4,\n   SetDme = 8,\n   SetApiValidationPort = 16,\n   CompileJobs = 32,\n   SetSecurityLevel = 64,\n   SetApiValidationRequirement = 128\n}\n\nexport enum ErrorCode {\n   InternalServerError = 0,\n   ApiMismatch = 1,\n   ModelValidationFailure = 2,\n   IOError = 3,\n   BadHeaders = 4,\n   TokenWithToken = 5,\n   DatabaseIntegrityConflict = 6,\n   MissingHostWatchdog = 7,\n   CannotChangeServerSuite = 8,\n   RemoteApiError = 9,\n   ServerUpdateInProgress = 10,\n   UserNameChange = 11,\n   UserSidChange = 12,\n   UserMismatchNameSid = 13,\n   UserMismatchPasswordSid = 14,\n   UserPasswordLength = 15,\n   UserColonInName = 16,\n   UserMissingName = 17,\n   InstanceRelocateOnline = 18,\n   InstanceAtExistingPath = 19,\n   InstanceDetachOnline = 20,\n   InstanceAtConflictingPath = 21,\n   InstanceLimitReached = 22,\n   InstanceWhitespaceName = 23,\n   InstanceHeaderRequired = 24,\n   RequiresPosixSystemIdentity = 25,\n   ConfigurationFileUpdated = 26,\n   ConfigurationDirectoryNotEmpty = 27,\n   DEPRECATED_UnusedErrorCode1 = 28,\n   RepoMismatchUserAndAccessToken = 29,\n   RepoCloning = 30,\n   RepoBusy = 31,\n   RepoExists = 32,\n   RepoMissing = 33,\n   RepoMismatchShaAndReference = 34,\n   RepoMismatchShaAndUpdate = 35,\n   DEPRECATED_UnusedErrorCode2 = 36,\n   RepoDuplicateTestMerge = 37,\n   RepoWhitespaceCommitterName = 38,\n   RepoWhitespaceCommitterEmail = 39,\n   ApiPageTooLarge = 40,\n   ApiInvalidPageOrPageSize = 41,\n   ChatBotWrongChannelType = 42,\n   ChatBotWhitespaceConnectionString = 43,\n   ChatBotWhitespaceName = 44,\n   ChatBotProviderMissing = 45,\n   DEPRECATED_UnusedErrorCode3 = 46,\n   ChatBotMax = 47,\n   ChatBotMaxChannels = 48,\n   ByondDirectXInstallFail = 49,\n   ByondDownloadFail = 50,\n   ByondNoVersionsInstalled = 51,\n   DreamMakerNeverValidated = 52,\n   DreamMakerInvalidValidation = 53,\n   CannotRemoveLastAuthenticationOption = 54,\n   DreamMakerNoDme = 55,\n   DreamMakerMissingDme = 56,\n   DreamMakerExitCode = 57,\n   DreamMakerCompileJobInProgress = 58,\n   InstanceMissingDreamDaemonSettings = 59,\n   InstanceMissingDreamMakerSettings = 60,\n   InstanceMissingRepositorySettings = 61,\n   InstanceUpdateTestMergeConflict = 62,\n   RepoCredentialsRequired = 63,\n   RepoCannotAuthenticate = 64,\n   RepoReferenceRequired = 65,\n   WatchdogRunning = 66,\n   WatchdogCompileJobCorrupted = 67,\n   WatchdogStartupFailed = 68,\n   WatchdogStartupTimeout = 69,\n   RepoUnsupportedTestMergeRemote = 70,\n   RepoSwappedShaOrReference = 71,\n   RepoMergeConflict = 72,\n   RepoReferenceNotTracking = 73,\n   RepoTestMergeConflict = 74,\n   InstanceNotAtWhitelistedPath = 75,\n   DreamDaemonDoubleSoft = 76,\n   DeploymentPagerRunning = 77,\n   DreamDaemonPortInUse = 78,\n   PostDeployFailure = 79,\n   WatchdogNotRunning = 80,\n   ResourceNotPresent = 81,\n   ResourceNeverPresent = 82,\n   GitHubApiRateLimit = 83,\n   JobStopped = 84,\n   MissingGCore = 85,\n   GCoreFailure = 86,\n   RepoTestMergeInvalidRemote = 87,\n   ByondNonExistentCustomVersion = 88,\n   DreamDaemonOffline = 89,\n   InstanceOffline = 90,\n   ChatCannotConnectProvider = 91,\n   ByondDreamDaemonFirewallFail = 92,\n   NoPortsAvailable = 93,\n   PortNotAvailable = 94,\n   AdminUserCannotOAuth = 95,\n   OAuthProviderDisabled = 96,\n   FileUploadExpired = 97,\n   UserGroupAndPermissionSet = 98,\n   UserGroupNotEmpty = 99,\n   UserLimitReached = 100,\n   UserGroupLimitReached = 101\n}\n\nexport enum InstanceManagerRights {\n   None = 0,\n   Read = 1,\n   Create = 2,\n   Rename = 4,\n   Relocate = 8,\n   SetOnline = 16,\n   Delete = 32,\n   List = 64,\n   SetConfiguration = 128,\n   SetAutoUpdate = 256,\n   SetChatBotLimit = 512,\n   GrantPermissions = 1024\n}\n\nexport enum InstancePermissionSetRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   Create = 4\n}\n\nexport enum OAuthProvider {\n   GitHub = \"GitHub\",\n   Discord = \"Discord\",\n   TGForums = \"TGForums\",\n   Keycloak = \"Keycloak\"\n}\n\nexport enum RemoteGitProvider {\n   Unknown = 0,\n   GitHub = 1,\n   GitLab = 2\n}\n\nexport enum RepositoryRights {\n   None = 0,\n   CancelPendingChanges = 1,\n   SetOrigin = 2,\n   SetSha = 4,\n   MergePullRequest = 8,\n   UpdateBranch = 16,\n   ChangeCommitter = 32,\n   ChangeTestMergeCommits = 64,\n   ChangeCredentials = 128,\n   SetReference = 256,\n   Read = 512,\n   ChangeAutoUpdateSettings = 1024,\n   Delete = 2048,\n   CancelClone = 4096\n}\n\nexport enum RightsType {\n   Administration = 0,\n   InstanceManager = 1,\n   Repository = 2,\n   Byond = 3,\n   DreamMaker = 4,\n   DreamDaemon = 5,\n   ChatBots = 6,\n   Configuration = 7,\n   InstancePermissionSet = 8\n}\n\nexport enum WatchdogStatus {\n   Offline = 0,\n   Restoring = 1,\n   Online = 2,\n   DelayedRestart = 3\n}\n\n","import { OAuthProvider } from \"../generatedcode/_enums\";\n\nexport enum CredentialsType {\n    Password,\n    OAuth\n}\n\nexport interface IPasswordCredentials {\n    type: CredentialsType.Password;\n    userName: string;\n    password: string;\n}\n\nexport interface IOAuthCredentials {\n    type: CredentialsType.OAuth;\n    provider: OAuthProvider;\n    token: string;\n}\n\nexport type ICredentials = IPasswordCredentials | IOAuthCredentials;\n","import { AxiosResponse } from \"axios\";\n\nimport { replaceAll } from \"../../../utils/misc\";\nimport { ErrorCode as TGSErrorCode } from \"../../generatedcode/_enums\";\nimport { ErrorMessageResponse } from \"../../generatedcode/schemas\";\nimport configOptions from \"../../util/config\";\nimport CredentialsProvider from \"../../util/CredentialsProvider\";\n\nexport type GenericErrors =\n    | ErrorCode.HTTP_BAD_REQUEST\n    | ErrorCode.HTTP_DATA_INEGRITY\n    | ErrorCode.HTTP_API_MISMATCH\n    | ErrorCode.HTTP_SERVER_ERROR\n    | ErrorCode.HTTP_UNIMPLEMENTED\n    //    | ErrorCode.HTTP_SERVER_NOT_READY\n    | ErrorCode.AXIOS\n    | ErrorCode.UNHANDLED_RESPONSE\n    | ErrorCode.UNHANDLED_GLOBAL_RESPONSE\n    | ErrorCode.HTTP_ACCESS_DENIED\n    | ErrorCode.HTTP_NOT_ACCEPTABLE\n    | ErrorCode.OK\n    | ErrorCode.NO_APIPATH\n    | ErrorCode.APP_FAIL;\n\nexport enum ErrorCode {\n    OK = 'Isnt displayed but is used as an \"error\" when everything is ok', //void\n    HTTP_BAD_REQUEST = \"error.http.bad_request\", //errmessage\n    HTTP_DATA_INEGRITY = \"error.http.data_integrity\", //errmessage\n    HTTP_API_MISMATCH = \"error.http.api_mismatch\", //void\n    HTTP_SERVER_ERROR = \"error.http.server_error\", //errmessage\n    HTTP_UNIMPLEMENTED = \"error.http.unimplemented\", //errmessage\n    //auto retry    HTTP_SERVER_NOT_READY = 'error.http.server_not_ready', //void\n    HTTP_ACCESS_DENIED = \"error.http.access_denied\", //void\n    HTTP_NOT_ACCEPTABLE = \"error.http.not_acceptable\", //void\n    UNHANDLED_RESPONSE = \"error.unhandled_response\", //axiosresponse\n    UNHANDLED_GLOBAL_RESPONSE = \"error.unhandled_global_response\", //axiosresponse\n    AXIOS = \"error.axios\", //jserror\n\n    //Generic errors\n    GITHUB_FAIL = \"error.github\", //jserror\n    APP_FAIL = \"error.app\", //jserror\n    NO_APIPATH = \"error.no_apipath\", //void\n\n    //Login errors\n    LOGIN_FAIL = \"error.login.bad_user_pass\", //void\n    LOGIN_NOCREDS = \"error.login.no_creds\", //void\n    LOGIN_DISABLED = \"error.login.user_disabled\", //void\n    LOGIN_BAD_OAUTH = \"error.login.bad_oauth\", //jserror\n    LOGIN_RATELIMIT = \"error.login.rate_limit\", //errmessage\n\n    //User errors\n    USER_NO_SYS_IDENT = \"error.user.no_sys_ident\", //errmessage\n    USER_NOT_FOUND = \"error.user.not_found\", //errmessage\n\n    //Administration errors\n    ADMIN_GITHUB_RATE = \"error.admin.rate\", //errmessage\n    ADMIN_GITHUB_ERROR = \"error.admin.error\", //errmessage\n    ADMIN_WATCHDOG_UNAVAIL = \"error.admin.watchdog.avail\", //errmessage\n    ADMIN_VERSION_NOT_FOUND = \"error.admin.update.notfound\", //errmessage\n    ADMIN_LOGS_IO_ERROR = \"error.admin.logs.io\", //errmessage\n\n    //Job errors\n    JOB_JOB_NOT_FOUND = \"error.job.not_found\", //errmessage\n    JOB_JOB_COMPLETE = \"error.job.complete\", //void\n\n    //Transfer errors\n    TRANSFER_NOT_AVAILABLE = \"error.transfer.not_available\", //errmessage\n    UPLOAD_FAILED = \"error.transfer.upload_failed\", //void\n\n    GROUP_NOT_FOUND = \"error.group.not_found\", //errmessage\n    GROUP_NOT_EMPTY = \"error.group.not_empty\", //errmessage\n\n    //Instance errors\n    INSTANCE_NO_DB_ENTITY = \"error.instance.no_db_entity\" //errmessage\n}\n\ntype errorMessage = {\n    errorMessage: ErrorMessageResponse;\n};\ntype axiosResponse = {\n    axiosResponse: AxiosResponse;\n};\ntype jsError = {\n    jsError: Error;\n};\ntype voidError = {\n    void: true;\n};\n\nexport enum DescType {\n    LOCALE,\n    TEXT\n}\ninterface Desc {\n    type: DescType;\n    desc: string;\n}\n\ntype allAddons = errorMessage | axiosResponse | jsError | voidError;\n\nexport default class InternalError<T extends ErrorCode = ErrorCode> {\n    public readonly code: T;\n    public readonly desc?: Desc;\n    public readonly extendedInfo: string;\n    public readonly originalErrorMessage?: ErrorMessageResponse;\n\n    public constructor(code: T, addon: allAddons, origin?: AxiosResponse) {\n        this.code = code;\n        if (\"errorMessage\" in addon) {\n            const err = addon.errorMessage;\n            this.originalErrorMessage = err;\n            this.desc = {\n                type: DescType.TEXT,\n                desc:\n                    TGSErrorCode[err.errorCode] +\n                    \": \" +\n                    err.message +\n                    (err.additionalData ? \": \" + err.additionalData : \"\")\n            };\n            if (!err.message) {\n                this.desc = {\n                    type: DescType.TEXT,\n                    desc: TGSErrorCode[err.errorCode]\n                };\n            }\n        }\n        if (\"jsError\" in addon) {\n            const err = addon.jsError;\n            this.desc = {\n                type: DescType.TEXT,\n                desc: `${err.name}: ${err.message}`\n            };\n        }\n        const stack = new Error().stack;\n\n        let debuginfo = JSON.stringify({ addon, origin, config: configOptions, stack });\n        debuginfo = debuginfo.replace(\n            /Basic (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?/g,\n            \"Basic **************\"\n        );\n        debuginfo = debuginfo.replace(\n            /{\"username\":\".+?\",\"password\":\".+?\"}/g,\n            '{\"username\":\"*******\",\"password\":\"*******\"}'\n        );\n        if (CredentialsProvider.isTokenValid()) {\n            debuginfo = replaceAll(\n                debuginfo,\n                CredentialsProvider.token?.bearer as string,\n                \"**************\"\n            );\n        }\n        if (configOptions.githubtoken.value) {\n            debuginfo = replaceAll(\n                debuginfo,\n                configOptions.githubtoken.value as string,\n                \"**************\"\n            );\n        }\n        this.extendedInfo = debuginfo;\n\n        console.error(\n            `Error occured within the application: ${this.code} (${\n                this.desc?.desc ?? \"No description\"\n            })`,\n            this\n        );\n\n        //@ts-expect-error yeah well, i aint extending the window interface\n        if (window.breakonerror) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n    }\n}\n","import InternalError, { ErrorCode } from \"./InternalError\";\n\nexport enum StatusCode {\n    OK,\n    ERROR\n}\n\nexport interface InternalStatusErr<Codes extends ErrorCode> {\n    code: StatusCode.ERROR;\n    error: InternalError<Codes>;\n}\n\nexport interface InternalStatusOK<T> {\n    code: StatusCode.OK;\n    payload: T;\n}\n\ntype InternalStatus<T, Codes extends ErrorCode> = InternalStatusOK<T> | InternalStatusErr<Codes>;\n\nconst InternalStatus = (function InternalStatus<T, Codes extends ErrorCode>(\n    this: InternalStatus<T, Codes>,\n    args: InternalStatus<T, Codes>\n): Readonly<InternalStatus<T, Codes>> {\n    return Object.freeze(Object.assign({}, args));\n} as unknown) as {\n    new <T, Codes extends ErrorCode>(args: InternalStatus<T, Codes>): Readonly<\n        InternalStatus<T, Codes>\n    >;\n};\n\nexport default InternalStatus;\n","import configOptions, { ConfigOption, ConfigValue } from \"./config\";\n\nexport default new (class ConfigController {\n    public loadconfig() {\n        for (const val of Object.values(configOptions)) {\n            this.getconfig(val);\n        }\n        console.log(\"Configuration loaded\", configOptions);\n    }\n\n    public saveconfig(newconfig: Partial<typeof configOptions>) {\n        for (const [key, val] of Object.entries(newconfig)) {\n            this.setconfig(key as keyof typeof configOptions, val as ConfigOption);\n        }\n        console.log(\"Configuration saved\", configOptions);\n    }\n\n    private setconfig(key: keyof typeof configOptions, option: ConfigOption) {\n        if (option?.value === undefined) return this.deleteconfig(key);\n\n        //safeties\n        switch (option.type) {\n            case \"num\": {\n                //this parses strings and numbers alike to numbers and refuses non numbers\n                //@ts-expect-error //parseInt can take numbers\n                const value = parseInt(option.value);\n                if (Number.isNaN(option.value)) return;\n                if (option.min !== undefined && value < option.min) return;\n                if (option.max !== undefined && value > option.max) return;\n                option.value = value;\n                break;\n            }\n        }\n\n        if (option.callback) {\n            // @ts-expect-error Can't be assed to figure this one out\n            option.callback(configOptions[key].value, option.value);\n        }\n        configOptions[key].value = option.value;\n        //configOptions[key].persist = option.persist;\n\n        //if (!option.persist) return this.deleteconfig(key); //idiot proofing, alexkar proofing\n\n        try {\n            localStorage.setItem(option.id, JSON.stringify(option.value));\n            //option.persist = true;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private getconfig(option: ConfigOption): void {\n        try {\n            const data = localStorage.getItem(option.id);\n            if (data !== undefined && data !== null) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const json = JSON.parse(data);\n                if (json !== null && json !== undefined) {\n                    option.value = json as ConfigValue;\n                }\n                //option.persist = true;\n            }\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private deleteconfig(key: keyof typeof configOptions): void {\n        try {\n            const option = configOptions[key];\n            localStorage.removeItem(option.id);\n            //option.persist = false;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n})();\n","import { MODE } from \"../../definitions/constants\";\nimport { TokenResponse } from \"../generatedcode/schemas\";\nimport { ICredentials } from \"../models/ICredentials\";\n\n//Data structure meant to help against circular dependencies within the ApiClient\n//Its rather dumb and only holds username, password and the token.\n//Also contains a function to determine if theres a token here\nexport default new (class CredentialsProvider {\n    //token\n    public token?: TokenResponse;\n\n    //credentials\n    public credentials?: ICredentials;\n\n    public isTokenValid() {\n        return (\n            this.credentials &&\n            this.token &&\n            this.token\n                .bearer /* &&\n            (!this.token.expiresAt || new Date(this.token.expiresAt) > new Date(Date.now()))*/\n        );\n    }\n\n    public constructor() {\n        if (MODE === \"DEV\") {\n            window.credentialProvider = this;\n        }\n    }\n})();\n","import { ApiClient } from \"./_base\";\nimport { ErrorMessageResponse, JobResponse, PaginatedJobResponse } from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\nexport type listJobsErrors = GenericErrors;\nexport type getJobErrors = GenericErrors | ErrorCode.JOB_JOB_NOT_FOUND;\nexport type deleteJobErrors =\n    | GenericErrors\n    | ErrorCode.JOB_JOB_NOT_FOUND\n    | ErrorCode.JOB_JOB_COMPLETE;\n\nexport type PaginatedTGSJobResponse = Omit<PaginatedJobResponse, \"content\"> & {\n    content: TGSJobResponse[];\n};\nexport type TGSJobResponse = JobResponse & {\n    instanceid: number;\n    canCancel?: boolean;\n};\n\nexport default new (class JobsClient extends ApiClient {\n    public async listActiveJobs(\n        instanceid: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedTGSJobResponse, listJobsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Read({\n                Instance: instanceid,\n                page: page,\n                pageSize: pageSize\n            });\n        } catch (stat) {\n            return new InternalStatus<PaginatedTGSJobResponse, listJobsErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const newContent = (response.data as PaginatedJobResponse).content.map(job => {\n                    return {\n                        ...job,\n                        instanceid: instanceid\n                    };\n                });\n\n                return new InternalStatus<PaginatedTGSJobResponse, listJobsErrors>({\n                    code: StatusCode.OK,\n                    payload: {\n                        ...(response.data as PaginatedJobResponse),\n                        content: newContent\n                    }\n                });\n            }\n            default: {\n                return new InternalStatus<PaginatedTGSJobResponse, listJobsErrors>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<TGSJobResponse, getJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_GetId({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const job = {\n                    ...(response.data as JobResponse),\n                    instanceid: instanceid\n                };\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: job\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<TGSJobResponse, deleteJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Delete({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                const job = {\n                    ...(response.data as JobResponse),\n                    instanceid: instanceid\n                };\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: job\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_COMPLETE, {\n                        void: true\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { satisfies as SemverSatisfies } from \"semver\";\nimport { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport {\n    AdministrationRights,\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    InstanceManagerRights,\n    InstancePermissionSetRights,\n    RepositoryRights,\n    RightsType\n} from \"../generatedcode/_enums\";\nimport { InstanceResponse } from \"../generatedcode/schemas\";\nimport InstanceClient from \"../InstanceClient\";\nimport InstancePermissionSetClient from \"../InstancePermissionSetClient\";\nimport JobsClient, { TGSJobResponse } from \"../JobsClient\";\nimport InternalError, { ErrorCode } from \"../models/InternalComms/InternalError\";\nimport { StatusCode } from \"../models/InternalComms/InternalStatus\";\nimport ServerClient from \"../ServerClient\";\nimport UserClient from \"../UserClient\";\nimport configOptions from \"./config\";\nimport LoginHooks from \"./LoginHooks\";\n\ninterface IEvents {\n    jobsLoaded: () => unknown;\n}\n\nexport default new (class JobsController extends TypedEmitter<IEvents> {\n    private fastmodecount = 0;\n    public set fastmode(cycles: number) {\n        console.log(`JobsController going in fastmode for ${cycles} cycles`);\n        this.fastmodecount = cycles;\n        this.restartLoop();\n    }\n\n    private currentLoop: Date = new Date(0);\n    private accessibleInstances = new Set<number>();\n\n    private enableJobProgressWorkaround?: boolean;\n\n    public errors: InternalError[] = [];\n    public jobs = new Map<number, TGSJobResponse>();\n    public jobsByInstance = new Map<number, Map<number, TGSJobResponse>>();\n\n    public reset() {\n        this.jobs = new Map<number, TGSJobResponse>();\n        this.jobsByInstance = new Map<number, Map<number, TGSJobResponse>>();\n        this.reloadAccessibleInstances()\n            .then(this.restartLoop)\n            .catch(e => {\n                this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n            });\n    }\n\n    public constructor() {\n        super();\n\n        this.loop = this.loop.bind(this);\n        this.reset = this.reset.bind(this);\n        this.restartLoop = this.restartLoop.bind(this);\n    }\n\n    public init() {\n        window.clients[\"JobsController\"] = this;\n\n        //technically not a \"cache\" but we might as well reload it\n        ServerClient.on(\"purgeCache\", this.reset);\n\n        InstanceClient.on(\"instanceChange\", this.reset);\n        // eslint-disable-next-line @typescript-eslint/require-await\n        LoginHooks.addHook(async () => this.reset());\n\n        ServerClient.getServerInfo()\n            .then(response => {\n                if (response.code === StatusCode.OK) {\n                    //A bug in versions below 4.11.0 makes it so that /Job/List doesn't report back progress. If we are running on a higher version, theres no point in enabling the workaround\n                    this.enableJobProgressWorkaround = SemverSatisfies(\n                        response.payload.version,\n                        \"<4.11.0\"\n                    );\n                }\n            })\n            .catch(e => console.error(e));\n    }\n\n    private async reloadAccessibleInstances(loop = false): Promise<void> {\n        const allInstances: InstanceResponse[] = [];\n\n        const instances1 = await InstanceClient.listInstances({ pageSize: 100 });\n        if (instances1.code === StatusCode.ERROR) {\n            this.errors.push(instances1.error);\n            return;\n        } else {\n            allInstances.push(...instances1.payload.content);\n        }\n        for (let i = 2; i <= instances1.payload.totalPages; i++) {\n            const instances2 = await InstanceClient.listInstances({ page: i, pageSize: 100 });\n            if (instances2.code === StatusCode.ERROR) {\n                this.errors.push(instances2.error);\n                return;\n            } else {\n                allInstances.push(...instances2.payload.content);\n            }\n        }\n\n        const updatedSet = new Set<number>();\n\n        const work = allInstances\n            .filter(instance => instance.online)\n            .map(instance => {\n                return InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    instance.id\n                ).then(permissionSet => {\n                    if (permissionSet.code === StatusCode.ERROR) {\n                        //If its access denied, it means we have view all instances but we dont have access to the instance itself\n                        if (permissionSet.error.code !== ErrorCode.HTTP_ACCESS_DENIED) {\n                            this.errors.push(permissionSet.error);\n                        }\n                        return;\n                    }\n                    updatedSet.add(instance.id);\n                });\n            });\n\n        await Promise.all(work);\n\n        this.accessibleInstances = updatedSet;\n\n        if (loop) {\n            window.setTimeout(\n                () => void this.reloadAccessibleInstances(true),\n                configOptions.instanceprobetimer.value as number\n            );\n        }\n    }\n\n    public restartLoop() {\n        //we use an actual date object here because it could help prevent really weird timing\n        // issues as two different date objects cannot be equal\n        // despite the date being\n        const initDate = new Date(Date.now());\n        this.currentLoop = initDate;\n        window.setTimeout(() => {\n            this.loop(initDate).catch(e =>\n                this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n            );\n        }, 0);\n    }\n\n    private async loop(loopid: Date) {\n        //so loops get initialiazed with the current time, it keeps track of which loop to run with\n        // that initialization date in currentLoop if the currentLoop isnt equal to the one provided\n        // to the loop, it means that the loop was\n        // replaced so we dont try to call for another one\n        if (loopid !== this.currentLoop) {\n            return;\n        }\n\n        //time to clear out errors\n        this.errors = [];\n\n        let totalActiveJobs = 0;\n        const work: Promise<void>[] = [];\n\n        this.accessibleInstances.forEach(instanceid => {\n            const processJobs = async (jobs: TGSJobResponse[]) => {\n                const instanceSet = this.jobsByInstance.get(instanceid) ?? new Map();\n                this.jobsByInstance.set(instanceid, instanceSet);\n                for (const job of jobs) {\n                    instanceSet.set(job.id, job);\n                    this.jobs.set(job.id, job);\n                }\n\n                const remoteActive = jobs.map(job => job.id);\n                const localActive = Array.from(this.jobs.values())\n                    .filter(job => !job.stoppedAt)\n                    .filter(job => job.instanceid === instanceid)\n                    .map(job => job.id);\n                const manualIds = localActive.filter(jobId => !remoteActive.includes(jobId));\n\n                const work: Promise<void>[] = [];\n                manualIds.forEach(jobId => {\n                    work.push(\n                        JobsClient.getJob(instanceid, jobId).then(job => {\n                            if (job.code === StatusCode.ERROR) {\n                                this.errors.push(job.error);\n                                return;\n                            }\n                            instanceSet.set(job.payload.id, job.payload);\n                            this.jobs.set(job.payload.id, job.payload);\n                        })\n                    );\n                });\n                await Promise.all(work);\n\n                if (loopid !== this.currentLoop) return;\n\n                totalActiveJobs += jobs.length;\n            };\n\n            const processError = (error: InternalError) => {\n                if (\n                    error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                    error.originalErrorMessage?.errorCode === TGSErrorCode.InstanceOffline\n                ) {\n                    console.log(\n                        `[JobsController] Clearing instance ${instanceid} as it is now offline`\n                    );\n                    this.accessibleInstances.delete(instanceid);\n                    //Probably a good idea to reload the list at this point\n                    this.reloadAccessibleInstances().catch(e => {\n                        this.errors.push(\n                            new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) })\n                        );\n                    });\n                } else {\n                    this.errors.push(error);\n                }\n            };\n\n            //now since this is async, it still possible that a single fire gets done after the new loop started, theres no really much that can be done about it\n            work.push(\n                JobsClient.listActiveJobs(instanceid, { page: 1, pageSize: 100 })\n                    .then(async value => {\n                        //this check is here because the request itself is async and could return after\n                        // the loop is terminated, we dont want to contaminate the jobs of an instance\n                        // with the jobs of another even if it is for a single fire and would eventually\n                        // get fixed on its own after a few seconds\n                        if (loopid !== this.currentLoop) return;\n\n                        if (value.code === StatusCode.OK) {\n                            for (let i = 2; i <= value.payload.totalPages; i++) {\n                                const jobs2 = await JobsClient.listActiveJobs(instanceid, {\n                                    page: i,\n                                    pageSize: 100\n                                });\n                                if (jobs2.code === StatusCode.ERROR) {\n                                    processError(jobs2.error);\n                                    return;\n                                } else {\n                                    value.payload.content.push(...jobs2.payload.content);\n                                }\n                            }\n                            if (loopid !== this.currentLoop) return;\n                            await processJobs(value.payload.content);\n                        } else {\n                            processError(value.error);\n                        }\n                    })\n                    .catch(reason => {\n                        console.error(reason);\n                    })\n            );\n        });\n\n        await Promise.all(work);\n\n        work.length = 0;\n        for (const job of this.jobs.values()) {\n            if (\n                this.enableJobProgressWorkaround &&\n                job.progress === undefined &&\n                !job.stoppedAt &&\n                this.accessibleInstances.has(job.instanceid)\n            ) {\n                work.push(\n                    JobsClient.getJob(job.instanceid, job.id).then(progressedjob => {\n                        if (loopid !== this.currentLoop) return;\n                        if (progressedjob.code === StatusCode.OK) {\n                            job.progress = progressedjob.payload.progress;\n                        } else {\n                            if (\n                                progressedjob.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                                progressedjob.error.originalErrorMessage?.errorCode ===\n                                    TGSErrorCode.InstanceOffline\n                            ) {\n                                console.log(\n                                    `[JobsController] Clearing instance ${job.instanceid} as it is now offline`\n                                );\n                                this.accessibleInstances.delete(job.instanceid);\n                                //Probably a good idea to reload the list at this point\n                                this.reloadAccessibleInstances().catch(e => {\n                                    this.errors.push(\n                                        new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) })\n                                    );\n                                });\n                            } else {\n                                this.errors.push(progressedjob.error);\n                            }\n                        }\n                    })\n                );\n            }\n\n            work.push(\n                this.canCancel(job, this.errors).then(canCancel => {\n                    if (loopid !== this.currentLoop) return;\n                    job.canCancel = canCancel;\n                })\n            );\n        }\n\n        //populate fields on jobs\n        await Promise.all(work);\n        if (loopid !== this.currentLoop) return;\n\n        this.emit(\"jobsLoaded\");\n        if (this.fastmodecount && loopid === this.currentLoop) {\n            window.setTimeout(() => {\n                this.loop(loopid).catch(e =>\n                    this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n                );\n            }, 800);\n            this.fastmodecount--;\n            console.log(`JobsController will remain in fastmode for ${this.fastmodecount} cycles`);\n        } else {\n            window.setTimeout(() => {\n                this.loop(loopid).catch(e =>\n                    this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n                );\n            }, (totalActiveJobs ? (configOptions.jobpollactive.value as number) : (configOptions.jobpollinactive.value as number)) * 1000);\n        }\n    }\n\n    private async canCancel(\n        job: Readonly<TGSJobResponse>,\n        errors: InternalError<ErrorCode>[]\n    ): Promise<boolean> {\n        //we dont need to reevalutate stuff that we already know\n        if (job.canCancel !== undefined) return job.canCancel;\n\n        if (job.cancelRightsType === undefined) {\n            return true;\n        }\n\n        switch (job.cancelRightsType as RightsType) {\n            case RightsType.Administration: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as AdministrationRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).administrationRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.InstanceManager: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstanceManagerRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).instanceManagerRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.Byond: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ByondRights;\n                    return !!(InstancePermissionSet.payload.byondRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.ChatBots: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ChatBotRights;\n                    return !!(InstancePermissionSet.payload.chatBotRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Configuration: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ConfigurationRights;\n                    return !!(InstancePermissionSet.payload.configurationRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamDaemon: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamDaemonRights;\n                    return !!(InstancePermissionSet.payload.dreamDaemonRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamMaker: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamMakerRights;\n                    return !!(InstancePermissionSet.payload.dreamMakerRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.InstancePermissionSet: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstancePermissionSetRights;\n                    return !!(InstancePermissionSet.payload.instancePermissionSetRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Repository: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as RepositoryRights;\n                    return !!(InstancePermissionSet.payload.repositoryRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n        }\n    }\n\n    public async cancelJob(\n        jobid: number,\n        onError: (error: InternalError<ErrorCode>) => void\n    ): Promise<boolean> {\n        const job = this.jobs.get(jobid);\n\n        //no we cant cancel jobs we arent aware of yet\n        if (!job) return false;\n\n        const deleteInfo = await JobsClient.deleteJob(job.instanceid, jobid);\n        if (deleteInfo.code === StatusCode.OK) {\n            return true;\n        } else {\n            onError(deleteInfo.error);\n            return false;\n        }\n    }\n\n    public clearJob(jobid: number): boolean {\n        const job = this.jobs.get(jobid);\n\n        //no we cant cancel jobs we arent aware of yet\n        if (!job) return false;\n\n        this.jobsByInstance.get(job.instanceid)?.delete(jobid);\n        this.jobs.delete(jobid);\n        this.emit(\"jobsLoaded\");\n        return true;\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { TokenResponse } from \"../generatedcode/schemas\";\n\ninterface IEvents {\n    //tasks once the user is fully logged in\n    loginSuccess: (token: TokenResponse) => void;\n}\n\nclass LoginHooks extends TypedEmitter<IEvents> {\n    private promiseHooks: Set<(token: TokenResponse) => Promise<unknown>> = new Set();\n\n    public runHooks(token: TokenResponse) {\n        console.log(\"Running login hooks\");\n        let i = 0;\n        const work: Array<Promise<void>> = [];\n        for (const hook of this.promiseHooks) {\n            const id = i;\n            console.log(`Running hook ${hook.name}(${id})`);\n            work.push(\n                new Promise<void>((resolve, reject) => {\n                    hook(token)\n                        .then(() => {\n                            console.log(`Done hook ${hook.name}(${id})`);\n                            resolve();\n                        })\n                        .catch(err => {\n                            console.error(`Error running hook ${hook.name}(${id}): `, err);\n                            reject(err);\n                        });\n                })\n            );\n            i++;\n        }\n        Promise.all(work)\n            .then(() => {\n                console.log(\"Running post login event\");\n                this.emit(\"loginSuccess\", token);\n            })\n            .catch(() => console.error(\"An error occured while running login hooks\"));\n    }\n\n    public addHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.add(hook);\n    }\n\n    public removeHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.delete(hook);\n    }\n}\n\nexport default new LoginHooks();\n","import { DEFAULT_APIPATH } from \"../../definitions/constants\";\n\nexport type ConfigValue = number | string | boolean;\n\nexport type ConfigOption = BaseConfigOption &\n    (NumConfigOption | StrConfigOption | PwdConfigOption | BoolConfigOption | EnumConfigOption);\n\nexport interface BaseConfigOption {\n    id: string;\n}\n\nexport interface NumConfigOption extends BaseConfigOption {\n    type: \"num\";\n    value: number;\n    min?: number;\n    max?: number;\n    callback?: (oldValue: number, newValue: number) => void;\n}\nexport interface StrConfigOption extends BaseConfigOption {\n    type: \"str\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface PwdConfigOption extends BaseConfigOption {\n    type: \"pwd\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface BoolConfigOption extends BaseConfigOption {\n    type: \"bool\";\n    value: boolean;\n    callback?: (oldValue: boolean, newValue: boolean) => void;\n}\nexport interface EnumConfigOption extends BaseConfigOption {\n    type: \"enum\";\n    possibleValues: Record<string, string>;\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\n\nexport type ConfigMap = {\n    [key: string]: ConfigOption;\n};\n\nexport enum jobsWidgetOptions {\n    ALWAYS = \"always\",\n    AUTO = \"auto\",\n    NEVER = \"never\"\n}\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesConfig = <Type>(\n    elements: {\n        [Property in keyof Type]: ConfigOption;\n    }\n) => elements;\n\nconst configOptions = asElementTypesConfig({\n    githubtoken: {\n        id: \"config.githubtoken\",\n        type: \"pwd\",\n        value: \"\"\n    },\n    apipath: {\n        id: \"config.apipath\",\n        type: \"str\",\n        value: DEFAULT_APIPATH\n    },\n    jobpollinactive: {\n        id: \"config.jobpollinactive\",\n        type: \"num\",\n        value: 15\n    },\n    jobpollactive: {\n        id: \"config.jobpollactive\",\n        type: \"num\",\n        value: 5\n    },\n    jobswidgetdisplay: {\n        id: \"config.jobswidgetdisplay\",\n        type: \"enum\",\n        possibleValues: jobsWidgetOptions,\n        value: jobsWidgetOptions.AUTO\n    },\n    instanceprobetimer: {\n        id: \"config.instanceprobetimer\",\n        type: \"num\",\n        value: 60\n    },\n    itemsperpage: {\n        id: \"config.itemsperpage\",\n        type: \"num\",\n        value: 25,\n        min: 1,\n        max: 100\n    }\n});\n\nexport default configOptions;\n"],"sourceRoot":""}