{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/components/views/Configuration.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"names":["Configuration","props","save","bind","state","values","ConfigController","this","setState","config","Object","entries","configOptions","map","innerid","key","currentVal","valueRef","React","enumRef","value","updateValue","prevstate","obj","type","current","selectedOptions","checked","random","Math","toString","id","className","overlay","ref","triggerHandler","fixedWidth","icon","onChange","defaultValue","possibleValues","possiblevalue","message","htmlFor","inline","custom","label","min","undefined","max","onClick","prevState","filtered","innerkey","val","disabled","keys","length","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","bsPrefix","size","_ref$as","as","displayName","InputGroupWithExtras","Text","Radio","Checkbox","Append","Prepend"],"mappings":"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","file":"273.038631161ca123df35f9.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport configOptions, { ConfigMap, ConfigOption } from \"../../ApiClient/util/config\";\nimport ConfigController from \"../../ApiClient/util/ConfigController\";\n\ninterface IProps {}\ninterface IState {\n    values: { [key: string]: ConfigOption };\n    //if youre adding some state, make sure it doesnt get sent to be saved\n}\n\nexport default class Configuration extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.save = this.save.bind(this);\n\n        this.state = {\n            values: {}\n        };\n    }\n\n    private save() {\n        ConfigController.saveconfig(this.state.values);\n        this.setState({\n            values: {}\n        });\n    }\n\n    public render(): ReactNode {\n        const config = Object.entries(configOptions);\n\n        return (\n            <React.Fragment>\n                {config.map(([key, currentVal]) => {\n                    //const persistRef = React.createRef<HTMLInputElement>();\n                    const valueRef = React.createRef<HTMLInputElement>();\n                    const enumRef = React.createRef<HTMLSelectElement>();\n                    const value = this.state.values[key] || currentVal;\n                    const reset = () => {\n                        this.setState((prevState: IState) => {\n                            const filtered: ConfigMap = {};\n                            for (const [innerkey, val] of Object.entries(prevState.values)) {\n                                if (innerkey === key) continue;\n                                filtered[innerkey] = val;\n                            }\n                            return {\n                                values: filtered\n                            };\n                        });\n                    };\n\n                    const updateValue = () => {\n                        this.setState(prevstate => {\n                            const obj: ConfigOption = this.state.values[key]\n                                ? { ...this.state.values[key] }\n                                : {\n                                      ...currentVal\n                                  };\n                            obj.value =\n                                value.type === \"enum\"\n                                    ? enumRef.current!.selectedOptions[0].value\n                                    : value.type === \"bool\"\n                                    ? valueRef.current!.checked\n                                    : valueRef.current!.value;\n\n                            return {\n                                values: {\n                                    ...prevstate.values,\n                                    [key]: obj\n                                }\n                            };\n                        });\n                    };\n\n                    const tooltip = (innerid: string) => {\n                        return (\n                            <Tooltip id={innerid}>\n                                <FormattedMessage id={innerid} />\n                            </Tooltip>\n                        );\n                    };\n\n                    const random = Math.random().toString();\n\n                    return (\n                        <InputGroup key={value.id}>\n                            <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                                {/*<InputGroup.Text\n                                    as=\"label\"\n                                    htmlFor={value.id}\n                                    className={this.state.values[key] ? 'font-weight-bold' : ''}>\n                                    <Form.Check\n                                        id={value.id}\n                                        inline\n                                        label={<FormattedMessage id=\"generic.persist\" />}\n                                        type=\"switch\"\n                                        custom\n                                        onChange={updateValue}\n                                        ref={persistRef}\n                                        checked={value.persist}\n                                        value={''}\n                                    />\n                                </InputGroup.Text>*/}\n                                <OverlayTrigger overlay={tooltip(value.id + \".desc\")}>\n                                    {({ ref, ...triggerHandler }) => (\n                                        <InputGroup.Text\n                                            className={`flex-fill ${\n                                                this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                            }`}\n                                            {...triggerHandler}>\n                                            <FormattedMessage id={value.id} />\n                                            <div\n                                                className=\"ml-auto\"\n                                                ref={ref as React.Ref<HTMLDivElement>}>\n                                                <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                            </div>\n                                        </InputGroup.Text>\n                                    )}\n                                </OverlayTrigger>\n                            </InputGroup.Prepend>\n                            <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                                {value.type === \"enum\" ? (\n                                    <select\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        ref={enumRef}\n                                        onChange={updateValue}\n                                        defaultValue={value.value}>\n                                        {Object.values(value.possibleValues).map(possiblevalue => (\n                                            <FormattedMessage\n                                                key={possiblevalue}\n                                                id={`${value.id}.enum.${possiblevalue}`}>\n                                                {message => (\n                                                    <option value={possiblevalue}>{message}</option>\n                                                )}\n                                            </FormattedMessage>\n                                        ))}\n                                    </select>\n                                ) : value.type === \"bool\" ? (\n                                    <label\n                                        htmlFor={random}\n                                        className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                                        <Form.Check\n                                            inline\n                                            type=\"switch\"\n                                            custom\n                                            id={random}\n                                            className=\"m-auto\"\n                                            label=\"\"\n                                            ref={valueRef}\n                                            onChange={updateValue}\n                                            checked={value.value}\n                                        />\n                                    </label>\n                                ) : (\n                                    <FormControl\n                                        custom\n                                        type={\n                                            value.type === \"num\"\n                                                ? \"number\"\n                                                : value.type === \"pwd\"\n                                                ? \"password\"\n                                                : \"text\"\n                                        }\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        min={value.type === \"num\" ? value.min : undefined}\n                                        max={value.type === \"num\" ? value.max : undefined}\n                                        ref={valueRef}\n                                        onChange={updateValue}\n                                        value={value.value}\n                                    />\n                                )}\n                                {this.state.values[key] ? (\n                                    <InputGroup.Append onClick={reset}>\n                                        <InputGroup.Text>\n                                            <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                                        </InputGroup.Text>\n                                    </InputGroup.Append>\n                                ) : (\n                                    \"\"\n                                )}\n                            </div>\n                        </InputGroup>\n                    );\n                })}\n\n                <br />\n\n                <div className=\"text-center\">\n                    <Button\n                        className=\"px-5\"\n                        onClick={this.save}\n                        disabled={!Object.keys(this.state.values).length}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nInputGroup.displayName = 'InputGroup';\n\nvar InputGroupWithExtras = _extends({}, InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox,\n  Append: InputGroupAppend,\n  Prepend: InputGroupPrepend\n});\n\nexport default InputGroupWithExtras;"],"sourceRoot":""}