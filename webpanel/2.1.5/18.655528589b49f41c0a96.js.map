{"version":3,"sources":["webpack:///./src/components/utils/PageHelper.tsx","webpack:///./src/components/views/Instance/List.tsx"],"names":["PageHelper","props","state","showGoto","gotoValue","currentPage","items","maxRight","Math","max","this","totalPages","maxLeft","min","Number","i","push","Pagination","Item","active","onClick","selectPage","ellipsis","Ellipsis","disabled","findPopover","Popover","id","Title","Content","className","onSubmit","e","preventDefault","setState","Form","Control","type","value","onChange","parseInt","target","custom","Button","Prev","OverlayTrigger","show","placement","overlay","prev","icon","Next","React","PureComponent","InstanceList","setOnline","bind","loading","instances","errors","page","RouteData","instancelistpage","error","prevState","Array","from","prevProps","loadInstances","instancelist","InstanceClient","listInstances","modifiedlist","code","StatusCode","OK","payload","work","content","instance","modifiedinstance","online","InstancePermissionSetClient","getCurrentInstancePermissionSet","then","permissionset","canAccess","ErrorCode","HTTP_ACCESS_DENIED","addError","Promise","all","sort","a","b","maxPage","desiredState","instanceedit","editInstance","Loading","text","canOnline","resolvePermissionSet","context","user","instanceManagerRights","InstanceManagerRights","SetOnline","tablecellstyling","verticalAlign","map","err","index","ErrorAlert","key","onClose","newarr","undefined","Table","striped","bordered","hover","variant","responsive","style","name","Badge","moveJob","path","configurationType","toString","selectedinstanceid","history","AppRoutes","link","route","newPage","renderAddInstance","instancejobs","canCreate","Create","Tooltip","ref","triggerHandler","instancecreate","faPlus","Component","contextType","GeneralContext","withRouter"],"mappings":"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","file":"18.655528589b49f41c0a96.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IProps {\n    selectPage: (page: number) => void;\n    totalPages: number;\n    currentPage: number;\n}\n\ninterface IState {\n    showGoto: boolean;\n    gotoValue: number;\n}\n\nexport default class PageHelper extends React.PureComponent<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showGoto: false,\n            gotoValue: props.currentPage\n        };\n    }\n\n    public render(): React.ReactNode {\n        const items: React.ReactNodeArray = [];\n\n        const maxRight = Math.max(this.props.totalPages - this.props.currentPage - 1, 0);\n        const maxLeft = Math.max(this.props.currentPage - 2, 0);\n\n        const min = Math.max(\n            this.props.currentPage -\n                Math.max(\n                    5 - Number(this.props.currentPage !== this.props.totalPages) - maxRight,\n                    2\n                ),\n            2\n        );\n        const max = Math.min(\n            this.props.currentPage +\n                Math.max(5 - Number(this.props.currentPage !== 1) - maxLeft, 2),\n            this.props.totalPages - 1\n        );\n\n        //Start at the second page and stop at the second to last page\n        for (let i = min; i <= max; i++) {\n            items.push(\n                <Pagination.Item\n                    active={i === this.props.currentPage}\n                    onClick={() => this.props.selectPage(i)}>\n                    {i}\n                </Pagination.Item>\n            );\n        }\n\n        const ellipsis = this.props.totalPages > 7 ? <Pagination.Ellipsis disabled /> : null;\n\n        const findPopover = (\n            <Popover id=\"popover-gotopage\">\n                <Popover.Title>\n                    <FormattedMessage id=\"generic.goto.title\" />\n                </Popover.Title>\n                <Popover.Content>\n                    <form\n                        className=\"d-flex\"\n                        onSubmit={e => {\n                            e.preventDefault();\n                            this.props.selectPage(this.state.gotoValue);\n                            this.setState({\n                                showGoto: false\n                            });\n                        }}>\n                        <Form.Control\n                            className=\"mr-2\"\n                            type=\"number\"\n                            min={1}\n                            max={this.props.totalPages}\n                            value={this.state.gotoValue}\n                            onChange={e => this.setState({ gotoValue: parseInt(e.target.value) })}\n                            custom\n                        />\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"generic.goto\" />\n                        </Button>\n                    </form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        return (\n            <div className=\"text-center\">\n                <Pagination className=\"justify-content-center\">\n                    <Pagination.Prev\n                        disabled={this.props.currentPage === 1}\n                        onClick={() =>\n                            this.props.selectPage(Math.max(this.props.currentPage - 1, 1))\n                        }\n                    />\n                    <Pagination.Item\n                        active={this.props.currentPage === 1}\n                        onClick={() => this.props.selectPage(1)}>\n                        1\n                    </Pagination.Item>\n                    {ellipsis}\n                    {items}\n                    {ellipsis}\n                    {this.props.totalPages >= 2 ? (\n                        <Pagination.Item\n                            active={this.props.currentPage === this.props.totalPages}\n                            onClick={() => this.props.selectPage(this.props.totalPages)}>\n                            {this.props.totalPages}\n                        </Pagination.Item>\n                    ) : null}\n                    {this.props.totalPages > 7 ? (\n                        <OverlayTrigger\n                            show={this.state.showGoto}\n                            placement=\"top\"\n                            overlay={findPopover}>\n                            <Pagination.Item\n                                onClick={() =>\n                                    this.setState(prev => {\n                                        return {\n                                            showGoto: !prev.showGoto\n                                        };\n                                    })\n                                }>\n                                <FontAwesomeIcon icon=\"search\" />\n                            </Pagination.Item>\n                        </OverlayTrigger>\n                    ) : null}\n                    <Pagination.Next\n                        disabled={this.props.currentPage === this.props.totalPages}\n                        onClick={() =>\n                            this.props.selectPage(\n                                Math.min(this.props.currentPage + 1, this.props.totalPages)\n                            )\n                        }\n                    />\n                </Pagination>\n            </div>\n        );\n    }\n}\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { CSSProperties, ReactNode } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { InstanceManagerRights } from \"../../../ApiClient/generatedcode/_enums\";\nimport { InstanceResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\nimport PageHelper from \"../../utils/PageHelper\";\n\ntype Instance = InstanceResponse & {\n    canAccess: boolean;\n};\n\ninterface IState {\n    instances: Instance[];\n    loading?: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    page: number;\n    maxPage?: number;\n}\ninterface IProps extends RouteComponentProps {}\n\nclass InstanceList extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.setOnline = this.setOnline.bind(this);\n\n        this.state = {\n            loading: true,\n            instances: [],\n            errors: [],\n            page: RouteData.instancelistpage || 1\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<IState>) {\n        if (prevState.page !== this.state.page) {\n            RouteData.instancelistpage = this.state.page;\n            await this.loadInstances();\n        }\n    }\n\n    private async loadInstances(): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const instancelist = await InstanceClient.listInstances({ page: this.state.page });\n        const modifiedlist: Array<Instance> = [];\n\n        if (instancelist.code == StatusCode.OK) {\n            //Safety against being on non existant pages\n            if (instancelist.payload.totalPages < this.state.page) {\n                this.setState({\n                    page: 1\n                });\n                return;\n            }\n\n            const work: Array<Promise<void>> = [];\n            for (const instance of instancelist.payload.content) {\n                const modifiedinstance = instance as Instance;\n                if (instance.online) {\n                    work.push(\n                        InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                            instance.id\n                        ).then(permissionset => {\n                            if (permissionset.code == StatusCode.OK) {\n                                modifiedinstance.canAccess = true;\n                            } else {\n                                modifiedinstance.canAccess = false;\n                                if (permissionset.error.code !== ErrorCode.HTTP_ACCESS_DENIED) {\n                                    this.addError(permissionset.error);\n                                }\n                            }\n                            modifiedlist.push(modifiedinstance);\n                        })\n                    );\n                } else {\n                    modifiedinstance.canAccess = false;\n                    modifiedlist.push(modifiedinstance);\n                }\n            }\n\n            await Promise.all(work);\n\n            this.setState({\n                instances: modifiedlist.sort((a, b) => a.id - b.id),\n                maxPage: instancelist.payload.totalPages\n            });\n        } else {\n            this.addError(instancelist.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadInstances();\n    }\n\n    private async setOnline(instance: Instance) {\n        //Yes this is desynchronized and will use the last known state of the instance\n        // to determine what state we should put it in, thats intentional, if the user clicks Set Online, it needs\n        // to be online, no matter what it previously was\n        const desiredState = !instance.online;\n        const instanceedit = await InstanceClient.editInstance(({\n            id: instance.id,\n            online: desiredState\n        } as unknown) as InstanceResponse);\n        if (instanceedit.code === StatusCode.OK) {\n            await this.loadInstances();\n        } else {\n            this.addError(instanceedit.error);\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance.list\" />;\n        }\n\n        const canOnline = !!(\n            resolvePermissionSet(this.context.user).instanceManagerRights &\n            InstanceManagerRights.SetOnline\n        );\n\n        const tablecellstyling: CSSProperties = {\n            verticalAlign: \"middle\"\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"view.instance.list.title\" />\n                </h3>\n                <Table striped bordered hover variant=\"dark\" responsive className=\"mb-4\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>\n                                <FormattedMessage id=\"generic.name\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.online\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.path\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.configmode\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.action\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.instances.map(value => {\n                            return (\n                                <tr key={value.id}>\n                                    <td style={tablecellstyling}>{value.id}</td>\n                                    <td style={tablecellstyling}>{value.name}</td>\n                                    <td style={tablecellstyling}>\n                                        {value.online ? (\n                                            <Badge variant=\"success\">\n                                                <FormattedMessage id=\"generic.online\" />\n                                            </Badge>\n                                        ) : (\n                                            <Badge variant=\"danger\">\n                                                <FormattedMessage id=\"generic.offline\" />\n                                            </Badge>\n                                        )}\n                                    </td>\n                                    <td style={tablecellstyling}>\n                                        {value.moveJob ? (\n                                            <FormattedMessage id=\"view.instance.moving\" />\n                                        ) : (\n                                            value.path\n                                        )}\n                                    </td>\n                                    <td style={tablecellstyling}>\n                                        <FormattedMessage\n                                            id={`view.instance.configmode.${value.configurationType.toString()}`}\n                                        />\n                                    </td>\n                                    <td className=\"align-middle p-1\" style={tablecellstyling}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => {\n                                                RouteData.selectedinstanceid = value.id;\n                                                this.props.history.push(\n                                                    AppRoutes.instanceedit.link ||\n                                                        AppRoutes.instanceedit.route\n                                                );\n                                            }}\n                                            disabled={!value.canAccess}>\n                                            <FormattedMessage id=\"generic.edit\" />\n                                        </Button>\n                                        <Button\n                                            className=\"mx-1\"\n                                            variant={value.online ? \"danger\" : \"success\"}\n                                            onClick={() => this.setOnline(value)}\n                                            disabled={!canOnline}>\n                                            <FormattedMessage\n                                                id={`view.instance.list.set.${\n                                                    value.online ? \"offline\" : \"online\"\n                                                }`}\n                                            />\n                                        </Button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n                <PageHelper\n                    selectPage={newPage => this.setState({ page: newPage })}\n                    totalPages={this.state.maxPage || 1}\n                    currentPage={this.state.page}\n                />\n                <div className=\"align-middle\">\n                    <div className=\"mb-4\">{this.renderAddInstance()}</div>\n                    <Button\n                        className=\"mx-1\"\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.instancejobs.link || AppRoutes.instancejobs.route\n                            );\n                        }}>\n                        <FormattedMessage id=\"routes.instancejobs\" />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private renderAddInstance(): React.ReactNode {\n        const canCreate = !!(\n            resolvePermissionSet(this.context.user).instanceManagerRights &\n            InstanceManagerRights.Create\n        );\n\n        return (\n            <OverlayTrigger\n                overlay={\n                    <Tooltip id=\"create-instance-tooltip\">\n                        <FormattedMessage id=\"perms.instance.create.warning\" />\n                    </Tooltip>\n                }\n                show={canCreate ? false : undefined}>\n                {({ ref, ...triggerHandler }) => (\n                    <Button\n                        ref={ref}\n                        className=\"mx-1\"\n                        variant=\"success\"\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.instancecreate.link || AppRoutes.instancecreate.route\n                            );\n                        }}\n                        disabled={!canCreate}\n                        {...triggerHandler}>\n                        <div>\n                            <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                            <FormattedMessage id=\"routes.instancecreate\" />\n                        </div>\n                    </Button>\n                )}\n            </OverlayTrigger>\n        );\n    }\n}\nInstanceList.contextType = GeneralContext;\nexport default withRouter(InstanceList);\n"],"sourceRoot":""}