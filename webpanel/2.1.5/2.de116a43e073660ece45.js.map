{"version":3,"sources":["webpack:///./src/ApiClient/InstanceClient.ts"],"names":["response","ServerClient","wait4Init","apiClient","InstanceController_List","pageSize","page","stat","InternalStatus","code","StatusCode","ERROR","error","status","payload","data","content","sort","a","b","id","OK","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","instance","InstanceController_Update","INSTANCE_NO_DB_ENTITY","errorMessage","InstanceController_Create","HTTP_DATA_INEGRITY","instanceid","InstanceController_GetId","ApiClient"],"mappings":"muDAWe,qB,kOAAA,U,MAAA,4E,EAAA,G,EAAA,kCACX,YAKI,IAAIA,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWC,wBAAwB,CAC7DC,SAAU,IACVC,KAAM,IAEZ,MAAOC,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQP,EAASa,QACb,KAAK,IACD,IAAMC,EAAWd,EAASe,KAAuDC,QAAQC,MACrF,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,GAAKD,EAAEC,MAGvB,OAAO,IAAIZ,IAAe,CACtBC,KAAMC,IAAWW,GACjBP,YAGR,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IACPC,IAAUC,mBACV,CAAEC,cAAezB,GACjBA,SApCT,6EA2CX,UACI0B,GAIA,IAAI1B,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAWwB,0BAA0B,KAAMD,GAC3E,MAAOnB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAGf,OAAQP,EAASa,QACb,KAAK,IACL,KAAK,IACD,IAAMa,EAAW1B,EAASe,KAE1B,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWW,GACjBP,QAASY,IAGjB,KAAK,IACD,OAAO,IAAIlB,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IAAcC,IAAUK,sBAAuB,CACtDC,aAAc7B,EAASe,SAGnC,QACI,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IACPC,IAAUC,mBACV,CAAEC,cAAezB,GACjBA,SAhFT,gFAuFX,UACI0B,GAIA,IAAI1B,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAW2B,0BAA0B,KAAMJ,GAC3E,MAAOnB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAGf,OAAQP,EAASa,QACb,KAAK,IACL,KAAK,IACD,IAAMa,EAAW1B,EAASe,KAE1B,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWW,GACjBP,QAASY,IAGjB,KAAK,IACD,OAAO,IAAIlB,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IAAcC,IAAUQ,mBAAoB,CACnDF,aAAc7B,EAASe,SAGnC,QACI,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IACPC,IAAUC,mBACV,CAAEC,cAAezB,GACjBA,SA5HT,6EAmIX,UACIgC,GAIA,IAAIhC,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaE,UAAW8B,yBAAyB,CAAEb,GAAIY,IAC1E,MAAOzB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAGf,OAAQP,EAASa,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWW,GACjBP,QAASd,EAASe,OAG1B,KAAK,IACD,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IAAcC,IAAUK,sBAAuB,CACtDC,aAAc7B,EAASe,SAGnC,QACI,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIU,IACPC,IAAUC,mBACV,CAAEC,cAAezB,GACjBA,SArKT,iD,2BAAA,GAAkCkC","file":"2.de116a43e073660ece45.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport { Components } from \"./generatedcode/_generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type ListInstancesErrors = GenericErrors;\nexport type CreateInstanceErrors = GenericErrors;\nexport type EditInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\nexport type GetInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\n\nexport default new (class InstanceClient extends ApiClient {\n    public async listInstances(): Promise<\n        InternalStatus<Components.Schemas.InstanceResponse[], ListInstancesErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_List({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as Components.Schemas.PaginatedInstanceResponse)!.content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async editInstance(\n        instance: Components.Schemas.InstanceUpdateRequest\n    ): Promise<InternalStatus<Components.Schemas.InstanceResponse, EditInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Update(null, instance);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const instance = response.data as Components.Schemas.InstanceResponse;\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createInstance(\n        instance: Components.Schemas.InstanceCreateRequest\n    ): Promise<InternalStatus<Components.Schemas.InstanceResponse, CreateInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Create(null, instance);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 201: {\n                const instance = response.data as Components.Schemas.InstanceResponse;\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 409:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.HTTP_DATA_INEGRITY, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getInstance(\n        instanceid: number\n    ): Promise<InternalStatus<Components.Schemas.InstanceResponse, GetInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_GetId({ id: instanceid });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.InstanceResponse\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}