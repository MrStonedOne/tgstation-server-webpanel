{"version":3,"sources":["webpack:///./src/ApiClient/AdminClient.ts"],"names":["_cachedAdminInfo","loadingAdminInfo","ServerClient","on","undefined","this","response","wait4Init","Promise","resolve","resolver","user","removeListener","apiClient","AdministrationController_Read","stat","res","InternalStatus","code","StatusCode","ERROR","error","emit","status","thing","OK","payload","data","errorMessage","InternalError","ErrorCode","ADMIN_GITHUB_RATE","ADMIN_GITHUB_ERROR","UNHANDLED_RESPONSE","axiosResponse","AdministrationController_Delete","ADMIN_WATCHDOG_UNAVAIL","newVersion","AdministrationController_Update","ADMIN_VERSION_NOT_FOUND","AdministrationController_ListLogs","pageSize","page","content","ADMIN_LOGS_IO_ERROR","logName","AdministrationController_GetLog","path","contents","TransferClient","Download","fileTicket","temp","Object","assign","ApiClient"],"mappings":"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","file":"3.5a5a4ce64317b96e8781.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport { Components } from \"./generatedcode/_generated\";\nimport { DownloadedLog } from \"./models/DownloadedLog\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { DownloadErrors } from \"./TransferClient\";\n\ninterface IEvents {\n    loadAdminInfo: (\n        user: InternalStatus<Components.Schemas.AdministrationResponse, AdminInfoErrors>\n    ) => void;\n}\n\nexport type AdminInfoErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type RestartErrors = GenericErrors | ErrorCode.ADMIN_WATCHDOG_UNAVAIL;\n\nexport type UpdateErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_WATCHDOG_UNAVAIL\n    | ErrorCode.ADMIN_VERSION_NOT_FOUND\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type LogsErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport type LogErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport default new (class AdminClient extends ApiClient<IEvents> {\n    private _cachedAdminInfo?: InternalStatus<\n        Components.Schemas.AdministrationResponse,\n        ErrorCode.OK\n    >;\n    public get cachedAdminInfo() {\n        return this._cachedAdminInfo;\n    }\n    private loadingAdminInfo = false;\n\n    public constructor() {\n        super();\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedAdminInfo = undefined;\n        });\n    }\n\n    public async getAdminInfo(): Promise<\n        InternalStatus<Components.Schemas.AdministrationResponse, AdminInfoErrors>\n    > {\n        await ServerClient.wait4Init();\n        if (this._cachedAdminInfo) {\n            return this._cachedAdminInfo;\n        }\n\n        if (this.loadingAdminInfo) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<Components.Schemas.AdministrationResponse, AdminInfoErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadAdminInfo\", resolver);\n                };\n                this.on(\"loadAdminInfo\", resolver);\n            });\n        }\n\n        this.loadingAdminInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.AdministrationController_Read();\n        } catch (stat) {\n            const res = new InternalStatus<\n                Components.Schemas.AdministrationResponse,\n                AdminInfoErrors\n            >({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<AdminInfoErrors>\n            });\n            this.emit(\"loadAdminInfo\", res);\n            this.loadingAdminInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<\n                    Components.Schemas.AdministrationResponse,\n                    ErrorCode.OK\n                >({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.AdministrationResponse\n                });\n\n                this._cachedAdminInfo = thing;\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 424: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    Components.Schemas.AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_RATE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 429: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    Components.Schemas.AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_ERROR\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<\n                    Components.Schemas.AdministrationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", res);\n                this.loadingAdminInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async restartServer(): Promise<InternalStatus<null, RestartErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.AdministrationController_Delete();\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<RestartErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({ code: StatusCode.OK, payload: null });\n            }\n            case 422: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateServer(newVersion: string): Promise<InternalStatus<null, UpdateErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.AdministrationController_Update(null, {\n                newVersion\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<UpdateErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({ code: StatusCode.OK, payload: null });\n            }\n            case 410: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_VERSION_NOT_FOUND,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 424: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_RATE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 429: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_ERROR>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLogs(): Promise<\n        InternalStatus<Components.Schemas.LogFileResponse[], LogsErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.AdministrationController_ListLogs({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<LogsErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as Components.Schemas.PaginatedLogFileResponse)!.content\n                });\n            }\n            case 409: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLog(\n        logName: string\n    ): Promise<InternalStatus<DownloadedLog, LogErrors | DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.AdministrationController_GetLog({\n                path: logName\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                const contents = await TransferClient.Download(\n                    (response.data as Components.Schemas.LogFileResponse).fileTicket\n                );\n                if (contents.code === StatusCode.OK) {\n                    //Object.assign() is a funky function but all it does is copy everything from the second object to the first object\n                    const temp: DownloadedLog = Object.assign(\n                        { content: contents.payload },\n                        response.data as Components.Schemas.LogFileResponse\n                    );\n                    return new InternalStatus({\n                        code: StatusCode.OK,\n                        payload: temp\n                    });\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: contents.error\n                    });\n                }\n            }\n            case 409: {\n                const errorMessage = response.data as Components.Schemas.ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}