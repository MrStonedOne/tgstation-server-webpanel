{"version":3,"sources":["webpack:///./src/components/views/Instance/List.tsx"],"names":["InstanceList","props","setOnline","bind","state","loading","instances","errors","error","this","setState","prevState","Array","from","push","instancelist","InstanceClient","listInstances","modifiedlist","code","StatusCode","OK","work","payload","instance","modifiedinstance","online","InstancePermissionSetClient","getCurrentInstancePermissionSet","id","then","permissionset","canAccess","ErrorCode","HTTP_ACCESS_DENIED","addError","Promise","all","sort","a","b","loadInstances","desiredState","instanceedit","editInstance","text","canOnline","resolvePermissionSet","context","user","instanceManagerRights","InstanceManagerRights","SetOnline","tablecellstyling","verticalAlign","className","map","err","index","key","onClose","prev","newarr","undefined","striped","bordered","hover","variant","responsive","value","style","name","moveJob","path","configurationType","toString","onClick","RouteData","selectedinstanceid","history","AppRoutes","link","route","disabled","renderAddInstance","instancejobs","canCreate","Create","overlay","show","ref","triggerHandler","instancecreate","icon","faPlus","React","Component","contextType","GeneralContext","withRouter"],"mappings":"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","file":"18.e26ecbefc06b81f83ae3.js","sourcesContent":["import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { CSSProperties, ReactNode } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { InstanceManagerRights } from \"../../../ApiClient/generatedcode/_enums\";\nimport { InstanceResponse } from \"../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ntype Instance = InstanceResponse & {\n    canAccess: boolean;\n};\n\ninterface IState {\n    instances: Instance[];\n    loading?: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\ninterface IProps extends RouteComponentProps {}\n\nclass InstanceList extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.setOnline = this.setOnline.bind(this);\n\n        this.state = {\n            loading: true,\n            instances: [],\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadInstances(): Promise<void> {\n        const instancelist = await InstanceClient.listInstances();\n        const modifiedlist: Array<Instance> = [];\n\n        if (instancelist.code == StatusCode.OK) {\n            const work: Array<Promise<void>> = [];\n            for (const instance of instancelist.payload) {\n                const modifiedinstance = instance as Instance;\n                if (instance.online) {\n                    work.push(\n                        InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                            instance.id\n                        ).then(permissionset => {\n                            if (permissionset.code == StatusCode.OK) {\n                                modifiedinstance.canAccess = true;\n                            } else {\n                                modifiedinstance.canAccess = false;\n                                if (permissionset.error.code !== ErrorCode.HTTP_ACCESS_DENIED) {\n                                    this.addError(permissionset.error);\n                                }\n                            }\n                            modifiedlist.push(modifiedinstance);\n                        })\n                    );\n                } else {\n                    modifiedinstance.canAccess = false;\n                    modifiedlist.push(modifiedinstance);\n                }\n            }\n\n            await Promise.all(work);\n\n            this.setState({\n                instances: modifiedlist.sort((a, b) => a.id - b.id)\n            });\n        } else {\n            this.addError(instancelist.error);\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadInstances();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async setOnline(instance: Instance) {\n        //Yes this is desynchronized and will use the last known state of the instance\n        // to determine what state we should put it in, thats intentional, if the user clicks Set Online, it needs\n        // to be online, no matter what it previously was\n        const desiredState = !instance.online;\n        const instanceedit = await InstanceClient.editInstance(({\n            id: instance.id,\n            online: desiredState\n        } as unknown) as InstanceResponse);\n        if (instanceedit.code === StatusCode.OK) {\n            await this.loadInstances();\n        } else {\n            this.addError(instanceedit.error);\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance.list\" />;\n        }\n\n        const canOnline = !!(\n            resolvePermissionSet(this.context.user).instanceManagerRights &\n            InstanceManagerRights.SetOnline\n        );\n\n        const tablecellstyling: CSSProperties = {\n            verticalAlign: \"middle\"\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"view.instance.list.title\" />\n                </h3>\n                <Table striped bordered hover variant=\"dark\" responsive className=\"mb-4\">\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>\n                                <FormattedMessage id=\"generic.name\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.online\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.path\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.configmode\" />\n                            </th>\n                            <th>\n                                <FormattedMessage id=\"generic.action\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.instances.map(value => {\n                            return (\n                                <tr key={value.id}>\n                                    <td style={tablecellstyling}>{value.id}</td>\n                                    <td style={tablecellstyling}>{value.name}</td>\n                                    <td style={tablecellstyling}>\n                                        {value.online ? (\n                                            <Badge variant=\"success\">\n                                                <FormattedMessage id=\"generic.online\" />\n                                            </Badge>\n                                        ) : (\n                                            <Badge variant=\"danger\">\n                                                <FormattedMessage id=\"generic.offline\" />\n                                            </Badge>\n                                        )}\n                                    </td>\n                                    <td style={tablecellstyling}>\n                                        {value.moveJob ? (\n                                            <FormattedMessage id=\"view.instance.moving\" />\n                                        ) : (\n                                            value.path\n                                        )}\n                                    </td>\n                                    <td style={tablecellstyling}>\n                                        <FormattedMessage\n                                            id={`view.instance.configmode.${value.configurationType.toString()}`}\n                                        />\n                                    </td>\n                                    <td className=\"align-middle p-1\" style={tablecellstyling}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => {\n                                                RouteData.selectedinstanceid = value.id;\n                                                this.props.history.push(\n                                                    AppRoutes.instanceedit.link ||\n                                                        AppRoutes.instanceedit.route\n                                                );\n                                            }}\n                                            disabled={!value.canAccess}>\n                                            <FormattedMessage id=\"generic.edit\" />\n                                        </Button>\n                                        <Button\n                                            className=\"mx-1\"\n                                            variant={value.online ? \"danger\" : \"success\"}\n                                            onClick={() => this.setOnline(value)}\n                                            disabled={!canOnline}>\n                                            <FormattedMessage\n                                                id={`view.instance.list.set.${\n                                                    value.online ? \"offline\" : \"online\"\n                                                }`}\n                                            />\n                                        </Button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </Table>\n                <div className=\"align-middle\">\n                    <div className=\"mb-4\">{this.renderAddInstance()}</div>\n                    <Button\n                        className=\"mx-1\"\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.instancejobs.link || AppRoutes.instancejobs.route\n                            );\n                        }}>\n                        <FormattedMessage id=\"routes.instancejobs\" />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private renderAddInstance(): React.ReactNode {\n        const canCreate = !!(\n            resolvePermissionSet(this.context.user).instanceManagerRights &\n            InstanceManagerRights.Create\n        );\n\n        return (\n            <OverlayTrigger\n                overlay={\n                    <Tooltip id=\"create-instance-tooltip\">\n                        <FormattedMessage id=\"perms.instance.create.warning\" />\n                    </Tooltip>\n                }\n                show={canCreate ? false : undefined}>\n                {({ ref, ...triggerHandler }) => (\n                    <Button\n                        ref={ref}\n                        className=\"mx-1\"\n                        variant=\"success\"\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.instancecreate.link || AppRoutes.instancecreate.route\n                            );\n                        }}\n                        disabled={!canCreate}\n                        {...triggerHandler}>\n                        <div>\n                            <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                            <FormattedMessage id=\"routes.instancecreate\" />\n                        </div>\n                    </Button>\n                )}\n            </OverlayTrigger>\n        );\n    }\n}\nInstanceList.contextType = GeneralContext;\nexport default withRouter(InstanceList);\n"],"sourceRoot":""}