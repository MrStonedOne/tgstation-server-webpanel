{"version":3,"sources":["webpack:///./src/components/views/ChangePassword.tsx"],"names":["withRouter","props","state","errors","password1","password2","loading","submit","bind","res","ServerClient","getServerInfo","code","StatusCode","ERROR","this","addError","error","OK","setState","serverInfo","payload","id","undefined","cuser","UserClient","getCurrentUser","match","params","parseInt","currentUser","user","getUser","prevState","Array","from","push","event","preventDefault","err","length","minimumPasswordLength","lengthError","matchError","pwdload","editUser","password","login","type","CredentialsType","Password","userName","name","history","goBack","InternalError","ErrorCode","APP_FAIL","jsError","Error","text","onSubmit","className","lg","md","map","index","key","onClose","prev","newarr","Fragment","Group","controlId","Label","Control","onChange","target","value","isInvalid","Feedback","React","Component"],"mappings":"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","file":"15.996511b37971281268b0.js","sourcesContent":["import React, { ChangeEvent, FormEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../ApiClient/generatedcode/_generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    serverInfo?: Components.Schemas.ServerInformationResponse;\n    loading: boolean;\n    pwdload?: boolean;\n    user?: Components.Schemas.UserResponse;\n    currentUser?: boolean;\n}\n\nexport default withRouter(\n    class ChangePassword extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                password1: \"\",\n                password2: \"\",\n                loading: true\n            };\n\n            this.submit = this.submit.bind(this);\n        }\n\n        public async componentDidMount(): Promise<void> {\n            const res = await ServerClient.getServerInfo();\n\n            switch (res.code) {\n                case StatusCode.ERROR: {\n                    this.addError(res.error);\n                    break;\n                }\n                case StatusCode.OK: {\n                    this.setState({\n                        serverInfo: res.payload\n                    });\n                    break;\n                }\n            }\n\n            let id: number | undefined = undefined;\n            const cuser = await UserClient.getCurrentUser();\n            if (cuser.code == StatusCode.OK) {\n                if (this.props.match.params.id) {\n                    id = parseInt(this.props.match.params.id);\n                } else {\n                    id = cuser.payload.id;\n                }\n                if (id === cuser.payload.id) {\n                    this.setState({\n                        currentUser: true\n                    });\n                }\n            } else {\n                this.setState({\n                    loading: false\n                });\n                return this.addError(cuser.error);\n            }\n\n            const user = await UserClient.getUser(id);\n            if (user.code == StatusCode.OK) {\n                this.setState({\n                    user: user.payload\n                });\n            } else {\n                this.addError(user.error);\n            }\n\n            this.setState({\n                loading: false\n            });\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        // noinspection DuplicatedCode\n        private async submit(event: FormEvent<HTMLFormElement>): Promise<void> {\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"changepassword submit: this.user is falsy\")\n                    })\n                );\n                return;\n            }\n\n            event.preventDefault();\n            let err = false;\n            if (this.state.password1.length < this.state.serverInfo!.minimumPasswordLength) {\n                err = true;\n                this.setState({\n                    lengthError: true\n                });\n            } else {\n                this.setState({\n                    lengthError: false\n                });\n            }\n            if (this.state.password2 !== this.state.password1) {\n                err = true;\n                this.setState({\n                    matchError: true\n                });\n            } else {\n                this.setState({\n                    matchError: false\n                });\n            }\n            if (err) return;\n\n            this.setState({\n                pwdload: true\n            });\n\n            const res = await UserClient.editUser({\n                password: this.state.password1,\n                id: this.state.user.id\n            });\n            switch (res.code) {\n                case StatusCode.OK: {\n                    if (this.state.currentUser) {\n                        // noinspection ES6MissingAwait //we just dont care about what happens, it can fail or succeed\n                        void ServerClient.login({\n                            type: CredentialsType.Password,\n                            userName: this.state.user.name,\n                            password: this.state.password1\n                        });\n                    }\n\n                    this.props.history.goBack();\n                    break;\n                }\n                case StatusCode.ERROR: {\n                    this.addError(res.error);\n                    //we only unset it here because its going to get redirected anyways\n                    this.setState({\n                        pwdload: false\n                    });\n                    break;\n                }\n            }\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.info\" />;\n            }\n            if (this.state.pwdload) {\n                return <Loading text=\"loading.passwd\" />;\n            }\n\n            const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ password1: event.target.value });\n            const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n                this.setState({ password2: event.target.value });\n\n            return (\n                <Form onSubmit={this.submit}>\n                    <Col className=\"mx-auto\" lg={5} md={8}>\n                        {this.state.errors.map((err, index) => {\n                            if (!err) return;\n                            return (\n                                <ErrorAlert\n                                    key={index}\n                                    error={err}\n                                    onClose={() =>\n                                        this.setState(prev => {\n                                            const newarr = Array.from(prev.errors);\n                                            newarr[index] = undefined;\n                                            return {\n                                                errors: newarr\n                                            };\n                                        })\n                                    }\n                                />\n                            );\n                        })}\n                        {this.state.user ? (\n                            <React.Fragment>\n                                <h3>\n                                    <FormattedMessage id=\"view.user.passwd.title\" />\n                                    {this.state.user.name}({this.state.user.id})\n                                </h3>\n                                <hr />\n                                <Form.Group controlId=\"password1\">\n                                    <Form.Label>\n                                        <FormattedMessage id=\"login.password\" />\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        onChange={handlePwd1Input}\n                                        value={this.state.password1}\n                                        isInvalid={this.state.matchError || this.state.lengthError}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {this.state.lengthError ? (\n                                            <React.Fragment>\n                                                <FormattedMessage id=\"login.password.repeat.short\" />\n                                                {this.state.serverInfo!.minimumPasswordLength}\n                                            </React.Fragment>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group controlId=\"password2\">\n                                    <Form.Label>\n                                        <FormattedMessage id=\"login.password.repeat\" />\n                                    </Form.Label>\n                                    <Form.Control\n                                        type=\"password\"\n                                        onChange={handlePwd2Input}\n                                        value={this.state.password2}\n                                        isInvalid={this.state.matchError || this.state.lengthError}\n                                    />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        {this.state.matchError ? (\n                                            <FormattedMessage id=\"login.password.repeat.match\" />\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Button type=\"submit\">\n                                    <FormattedMessage id=\"routes.passwd\" />\n                                </Button>\n                            </React.Fragment>\n                        ) : (\n                            \"\"\n                        )}\n                    </Col>\n                </Form>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}