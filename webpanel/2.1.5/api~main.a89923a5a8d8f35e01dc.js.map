{"version":3,"sources":["webpack:///./src/ApiClient/generatedcode/_enums.ts","webpack:///./src/ApiClient/util/CredentialsProvider.ts","webpack:///./src/ApiClient/InstanceClient.ts","webpack:///./src/ApiClient/models/InternalComms/InternalStatus.ts","webpack:///./src/ApiClient/util/config.ts","webpack:///./src/ApiClient/util/ConfigController.ts","webpack:///./src/ApiClient/util/LoginHooks.ts","webpack:///./src/ApiClient/models/InternalComms/InternalError.ts","webpack:///./src/ApiClient/_base.ts","webpack:///./src/ApiClient/models/ICredentials.ts","webpack:///./src/ApiClient/UserClient.ts","webpack:///./src/ApiClient/InstancePermissionSetClient.ts","webpack:///./src/ApiClient/JobsClient.ts","webpack:///./src/ApiClient/util/JobsController.ts","webpack:///./src/ApiClient/ServerClient.ts"],"names":["AdministrationRights","ByondRights","ChatBotRights","ChatProvider","ConfigurationRights","ConfigurationType","DreamDaemonRights","DreamDaemonSecurity","DreamMakerRights","ErrorCode","InstanceManagerRights","InstancePermissionSetRights","OAuthProvider","RemoteGitProvider","RepositoryRights","RightsType","WatchdogStatus","token","credentials","MODE","window","credentialProvider","this","bearer","response","ServerClient","wait4Init","apiClient","InstanceController_List","pageSize","page","stat","InternalStatus","code","StatusCode","ERROR","error","status","payload","data","content","sort","a","b","id","OK","InternalError","UNHANDLED_RESPONSE","axiosResponse","instance","InstanceController_Update","emit","INSTANCE_NO_DB_ENTITY","errorMessage","InstanceController_Create","HTTP_DATA_INEGRITY","instanceid","InstanceController_GetId","ApiClient","args","Object","freeze","assign","jobsWidgetOptions","configOptions","githubtoken","type","value","apipath","DEFAULT_APIPATH","jobpollinactive","jobpollactive","jobswidgetdisplay","possibleValues","AUTO","instanceprobetimer","values","val","getconfig","console","log","newconfig","entries","key","setconfig","option","undefined","deleteconfig","parseInt","Number","isNaN","callback","localStorage","setItem","JSON","stringify","e","getItem","json","parse","removeItem","LoginHooks","promiseHooks","Set","i","work","hook","name","push","Promise","resolve","reject","then","catch","err","all","add","delete","TypedEmitter","DescType","addon","origin","desc","extendedInfo","originalErrorMessage","TEXT","TGSErrorCode","errorCode","message","additionalData","jsError","stack","Error","debuginfo","config","replace","CredentialsProvider","isTokenValid","replaceAll","breakonerror","clients","constructor","CredentialsType","_cachedUser","loadingUserInfo","createAllUsersWithAA","getCurrentUser","bind","addHook","on","newUser","UserController_Update","current","USER_NOT_FOUND","bypassCache","HTTP_ACCESS_DENIED","void","resolver","user","removeListener","UserController_Read","res","thing","UserController_List","UserController_GetId","newuser","enabled","instanceManagerRights","administrationRights","perm","UserController_Create","USER_NO_SYS_IDENT","_cachedInstancePermissionSet","Map","loadingInstancePermissionSetInfo","clear","has","get","set","InstancePermissionSetController_Read","Instance","JobController_Read","map","job","jobid","JobController_GetId","JOB_JOB_NOT_FOUND","JobController_Delete","JOB_JOB_COMPLETE","fastmodecount","currentLoop","Date","accessibleInstances","errors","jobs","loop","reset","restartLoop","cycles","reloadAccessibleInstances","APP_FAIL","InstanceClient","allInstances","listInstances","updatedSet","filter","online","InstancePermissionSetClient","getCurrentInstancePermissionSet","permissionSet","warn","setTimeout","initDate","now","loopid","totalActiveJobs","forEach","JobsClient","listActiveJobs","remoteActive","manualIds","Array","from","stoppedAt","jobId","includes","getJob","length","InstanceOffline","reason","progress","progressedjob","canCancel","cancelRightsType","Administration","userInfo","UserClient","required","cancelRight","resolvePermissionSet","InstanceManager","Byond","InstancePermissionSet","byondRights","ChatBots","chatBotRights","Configuration","configurationRights","DreamDaemon","dreamDaemonRights","DreamMaker","dreamMakerRights","instancePermissionSetRights","Repository","repositoryRights","onError","deleteInfo","deleteJob","api","initialized","loadingServerInfo","_serverInfo","autoLogin","loggingIn","getServerInfo","runHooks","initApi","location","reload","time","defObj","default","OpenAPIClientAxios","definition","axiosConfigDefaults","baseURL","withCredentials","headers","Accept","Api","API_VERSION","VERSION","validateStatus","globalHandledCodes","init","interceptors","request","use","errorobj","NO_APIPATH","url","tok","wait4Token","snowflake","AXIOS","HTTP_BAD_REQUEST","method","login","client","logout","HTTP_NOT_ACCEPTABLE","HTTP_API_MISMATCH","HTTP_SERVER_ERROR","HTTP_UNIMPLEMENTED","UNHANDLED_GLOBAL_RESPONSE","timeEnd","newCreds","oauthAutoLogin","OAuth","LOGIN_NOCREDS","info","Password","HomeController_CreateToken","auth","username","userName","password","provider","Authorization","LOGIN_FAIL","LOGIN_DISABLED","LOGIN_RATELIMIT","_token","HomeController_Home","cache"],"mappings":"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","file":"api~main.a89923a5a8d8f35e01dc.js","sourcesContent":["export enum AdministrationRights {\n   None = 0,\n   WriteUsers = 1,\n   RestartHost = 2,\n   ChangeVersion = 4,\n   EditOwnPassword = 8,\n   ReadUsers = 16,\n   DownloadLogs = 32,\n   EditOwnOAuthConnections = 64\n}\n\nexport enum ByondRights {\n   None = 0,\n   ReadActive = 1,\n   ListInstalled = 2,\n   InstallOfficialOrChangeActiveVersion = 4,\n   CancelInstall = 8,\n   InstallCustomVersion = 16\n}\n\nexport enum ChatBotRights {\n   None = 0,\n   WriteEnabled = 1,\n   WriteProvider = 2,\n   WriteChannels = 4,\n   WriteConnectionString = 8,\n   ReadConnectionString = 16,\n   Read = 32,\n   Create = 64,\n   Delete = 128,\n   WriteName = 256,\n   WriteReconnectionInterval = 512,\n   WriteChannelLimit = 1024\n}\n\nexport enum ChatProvider {\n   Irc = 0,\n   Discord = 1\n}\n\nexport enum ConfigurationRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   List = 4,\n   Delete = 8\n}\n\nexport enum ConfigurationType {\n   Disallowed = 0,\n   HostWrite = 1,\n   SystemIdentityWrite = 2\n}\n\nexport enum DreamDaemonRights {\n   None = 0,\n   ReadRevision = 1,\n   SetPort = 2,\n   SetAutoStart = 4,\n   SetSecurity = 8,\n   ReadMetadata = 16,\n   SetWebClient = 32,\n   SoftRestart = 64,\n   SoftShutdown = 128,\n   Restart = 256,\n   Shutdown = 512,\n   Start = 1024,\n   SetStartupTimeout = 2048,\n   SetHeartbeatInterval = 4096,\n   CreateDump = 8192,\n   SetTopicTimeout = 16384,\n   SetAdditionalParameters = 32768\n}\n\nexport enum DreamDaemonSecurity {\n   Trusted = 0,\n   Safe = 1,\n   Ultrasafe = 2\n}\n\nexport enum DreamMakerRights {\n   None = 0,\n   Read = 1,\n   Compile = 2,\n   CancelCompile = 4,\n   SetDme = 8,\n   SetApiValidationPort = 16,\n   CompileJobs = 32,\n   SetSecurityLevel = 64,\n   SetApiValidationRequirement = 128\n}\n\nexport enum ErrorCode {\n   InternalServerError = 0,\n   ApiMismatch = 1,\n   ModelValidationFailure = 2,\n   IOError = 3,\n   BadHeaders = 4,\n   TokenWithToken = 5,\n   DatabaseIntegrityConflict = 6,\n   MissingHostWatchdog = 7,\n   CannotChangeServerSuite = 8,\n   RemoteApiError = 9,\n   ServerUpdateInProgress = 10,\n   UserNameChange = 11,\n   UserSidChange = 12,\n   UserMismatchNameSid = 13,\n   UserMismatchPasswordSid = 14,\n   UserPasswordLength = 15,\n   UserColonInName = 16,\n   UserMissingName = 17,\n   InstanceRelocateOnline = 18,\n   InstanceAtExistingPath = 19,\n   InstanceDetachOnline = 20,\n   InstanceAtConflictingPath = 21,\n   InstanceLimitReached = 22,\n   InstanceWhitespaceName = 23,\n   InstanceHeaderRequired = 24,\n   RequiresPosixSystemIdentity = 25,\n   ConfigurationFileUpdated = 26,\n   ConfigurationDirectoryNotEmpty = 27,\n   DEPRECATED_UnusedErrorCode1 = 28,\n   RepoMismatchUserAndAccessToken = 29,\n   RepoCloning = 30,\n   RepoBusy = 31,\n   RepoExists = 32,\n   RepoMissing = 33,\n   RepoMismatchShaAndReference = 34,\n   RepoMismatchShaAndUpdate = 35,\n   DEPRECATED_UnusedErrorCode2 = 36,\n   RepoDuplicateTestMerge = 37,\n   RepoWhitespaceCommitterName = 38,\n   RepoWhitespaceCommitterEmail = 39,\n   ApiPageTooLarge = 40,\n   ApiInvalidPageOrPageSize = 41,\n   ChatBotWrongChannelType = 42,\n   ChatBotWhitespaceConnectionString = 43,\n   ChatBotWhitespaceName = 44,\n   ChatBotProviderMissing = 45,\n   DEPRECATED_UnusedErrorCode3 = 46,\n   ChatBotMax = 47,\n   ChatBotMaxChannels = 48,\n   ByondDirectXInstallFail = 49,\n   ByondDownloadFail = 50,\n   ByondNoVersionsInstalled = 51,\n   DreamMakerNeverValidated = 52,\n   DreamMakerInvalidValidation = 53,\n   CannotRemoveLastAuthenticationOption = 54,\n   DreamMakerNoDme = 55,\n   DreamMakerMissingDme = 56,\n   DreamMakerExitCode = 57,\n   DreamMakerCompileJobInProgress = 58,\n   InstanceMissingDreamDaemonSettings = 59,\n   InstanceMissingDreamMakerSettings = 60,\n   InstanceMissingRepositorySettings = 61,\n   InstanceUpdateTestMergeConflict = 62,\n   RepoCredentialsRequired = 63,\n   RepoCannotAuthenticate = 64,\n   RepoReferenceRequired = 65,\n   WatchdogRunning = 66,\n   WatchdogCompileJobCorrupted = 67,\n   WatchdogStartupFailed = 68,\n   WatchdogStartupTimeout = 69,\n   RepoUnsupportedTestMergeRemote = 70,\n   RepoSwappedShaOrReference = 71,\n   RepoMergeConflict = 72,\n   RepoReferenceNotTracking = 73,\n   RepoTestMergeConflict = 74,\n   InstanceNotAtWhitelistedPath = 75,\n   DreamDaemonDoubleSoft = 76,\n   DeploymentPagerRunning = 77,\n   DreamDaemonPortInUse = 78,\n   PostDeployFailure = 79,\n   WatchdogNotRunning = 80,\n   ResourceNotPresent = 81,\n   ResourceNeverPresent = 82,\n   GitHubApiRateLimit = 83,\n   JobStopped = 84,\n   MissingGCore = 85,\n   GCoreFailure = 86,\n   RepoTestMergeInvalidRemote = 87,\n   ByondNonExistentCustomVersion = 88,\n   DreamDaemonOffline = 89,\n   InstanceOffline = 90,\n   ChatCannotConnectProvider = 91,\n   ByondDreamDaemonFirewallFail = 92,\n   NoPortsAvailable = 93,\n   PortNotAvailable = 94,\n   AdminUserCannotOAuth = 95,\n   OAuthProviderDisabled = 96,\n   FileUploadExpired = 97,\n   UserGroupAndPermissionSet = 98,\n   UserGroupNotEmpty = 99,\n   UserLimitReached = 100,\n   UserGroupLimitReached = 101\n}\n\nexport enum InstanceManagerRights {\n   None = 0,\n   Read = 1,\n   Create = 2,\n   Rename = 4,\n   Relocate = 8,\n   SetOnline = 16,\n   Delete = 32,\n   List = 64,\n   SetConfiguration = 128,\n   SetAutoUpdate = 256,\n   SetChatBotLimit = 512,\n   GrantPermissions = 1024\n}\n\nexport enum InstancePermissionSetRights {\n   None = 0,\n   Read = 1,\n   Write = 2,\n   Create = 4\n}\n\nexport enum OAuthProvider {\n   GitHub = \"GitHub\",\n   Discord = \"Discord\",\n   TGForums = \"TGForums\",\n   Keycloak = \"Keycloak\"\n}\n\nexport enum RemoteGitProvider {\n   Unknown = 0,\n   GitHub = 1,\n   GitLab = 2\n}\n\nexport enum RepositoryRights {\n   None = 0,\n   CancelPendingChanges = 1,\n   SetOrigin = 2,\n   SetSha = 4,\n   MergePullRequest = 8,\n   UpdateBranch = 16,\n   ChangeCommitter = 32,\n   ChangeTestMergeCommits = 64,\n   ChangeCredentials = 128,\n   SetReference = 256,\n   Read = 512,\n   ChangeAutoUpdateSettings = 1024,\n   Delete = 2048,\n   CancelClone = 4096\n}\n\nexport enum RightsType {\n   Administration = 0,\n   InstanceManager = 1,\n   Repository = 2,\n   Byond = 3,\n   DreamMaker = 4,\n   DreamDaemon = 5,\n   ChatBots = 6,\n   Configuration = 7,\n   InstancePermissionSet = 8\n}\n\nexport enum WatchdogStatus {\n   Offline = 0,\n   Restoring = 1,\n   Online = 2,\n   DelayedRestart = 3\n}\n\n","import { MODE } from \"../../definitions/constants\";\nimport { TokenResponse } from \"../generatedcode/schemas\";\nimport { ICredentials } from \"../models/ICredentials\";\n\n//Data structure meant to help against circular dependencies within the ApiClient\n//Its rather dumb and only holds username, password and the token.\n//Also contains a function to determine if theres a token here\nexport default new (class CredentialsProvider {\n    //token\n    public token?: TokenResponse;\n\n    //credentials\n    public credentials?: ICredentials;\n\n    public isTokenValid() {\n        return (\n            this.credentials &&\n            this.token &&\n            this.token\n                .bearer /* &&\n            (!this.token.expiresAt || new Date(this.token.expiresAt) > new Date(Date.now()))*/\n        );\n    }\n\n    public constructor() {\n        if (MODE === \"DEV\") {\n            window.credentialProvider = this;\n        }\n    }\n})();\n","import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    InstanceCreateRequest,\n    InstanceResponse,\n    InstanceUpdateRequest,\n    PaginatedInstanceResponse\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type ListInstancesErrors = GenericErrors;\nexport type CreateInstanceErrors = GenericErrors;\nexport type EditInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\nexport type GetInstanceErrors = GenericErrors | ErrorCode.INSTANCE_NO_DB_ENTITY;\n\ninterface IEvents {\n    instanceChange: (instanceId: number) => void;\n}\n\nexport default new (class InstanceClient extends ApiClient<IEvents> {\n    public async listInstances(): Promise<InternalStatus<InstanceResponse[], ListInstancesErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_List({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as PaginatedInstanceResponse)!.content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async editInstance(\n        instance: InstanceUpdateRequest\n    ): Promise<InternalStatus<InstanceResponse, EditInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Update(null, instance);\n            this.emit(\"instanceChange\", instance.id);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const instance = response.data as InstanceResponse;\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createInstance(\n        instance: InstanceCreateRequest\n    ): Promise<InternalStatus<InstanceResponse, CreateInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_Create(null, instance);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200:\n            case 201: {\n                const instance = response.data as InstanceResponse;\n\n                this.emit(\"instanceChange\", instance.id);\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: instance\n                });\n            }\n            case 409:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.HTTP_DATA_INEGRITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getInstance(\n        instanceid: number\n    ): Promise<InternalStatus<InstanceResponse, GetInstanceErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstanceController_GetId({ id: instanceid });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as InstanceResponse\n                });\n            }\n            case 410:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.INSTANCE_NO_DB_ENTITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import InternalError, { ErrorCode } from \"./InternalError\";\n\nexport enum StatusCode {\n    OK,\n    ERROR\n}\n\nexport interface InternalStatusErr<Codes extends ErrorCode> {\n    code: StatusCode.ERROR;\n    error: InternalError<Codes>;\n}\n\nexport interface InternalStatusOK<T> {\n    code: StatusCode.OK;\n    payload: T;\n}\n\ntype InternalStatus<T, Codes extends ErrorCode> = InternalStatusOK<T> | InternalStatusErr<Codes>;\n\nconst InternalStatus = (function InternalStatus<T, Codes extends ErrorCode>(\n    this: InternalStatus<T, Codes>,\n    args: InternalStatus<T, Codes>\n): Readonly<InternalStatus<T, Codes>> {\n    return Object.freeze(Object.assign({}, args));\n} as unknown) as {\n    new <T, Codes extends ErrorCode>(args: InternalStatus<T, Codes>): Readonly<\n        InternalStatus<T, Codes>\n    >;\n};\n\nexport default InternalStatus;\n","import { DEFAULT_APIPATH } from \"../../definitions/constants\";\n\nexport type ConfigValue = number | string | boolean;\n\nexport type ConfigOption = BaseConfigOption &\n    (NumConfigOption | StrConfigOption | PwdConfigOption | BoolConfigOption | EnumConfigOption);\n\nexport interface BaseConfigOption {\n    id: string;\n}\n\nexport interface NumConfigOption extends BaseConfigOption {\n    type: \"num\";\n    value: number;\n    callback?: (oldValue: number, newValue: number) => void;\n}\nexport interface StrConfigOption extends BaseConfigOption {\n    type: \"str\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface PwdConfigOption extends BaseConfigOption {\n    type: \"pwd\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface BoolConfigOption extends BaseConfigOption {\n    type: \"bool\";\n    value: boolean;\n    callback?: (oldValue: boolean, newValue: boolean) => void;\n}\nexport interface EnumConfigOption extends BaseConfigOption {\n    type: \"enum\";\n    possibleValues: Record<string, string>;\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\n\nexport type ConfigMap = {\n    [key: string]: ConfigOption;\n};\n\nexport enum jobsWidgetOptions {\n    ALWAYS = \"always\",\n    AUTO = \"auto\",\n    NEVER = \"never\"\n}\n\nconst configOptions: ConfigMap = {\n    githubtoken: {\n        id: \"config.githubtoken\",\n        type: \"pwd\",\n        value: \"\"\n    },\n    apipath: {\n        id: \"config.apipath\",\n        type: \"str\",\n        value: DEFAULT_APIPATH\n    },\n    jobpollinactive: {\n        id: \"config.jobpollinactive\",\n        type: \"num\",\n        value: 15\n    },\n    jobpollactive: {\n        id: \"config.jobpollactive\",\n        type: \"num\",\n        value: 5\n    },\n    jobswidgetdisplay: {\n        id: \"config.jobswidgetdisplay\",\n        type: \"enum\",\n        possibleValues: jobsWidgetOptions,\n        value: jobsWidgetOptions.AUTO\n    },\n    instanceprobetimer: {\n        id: \"config.instanceprobetimer\",\n        type: \"num\",\n        value: 60\n    }\n};\n\nexport default configOptions;\n","import configOptions, { ConfigOption, ConfigValue } from \"./config\";\n\nexport default new (class ConfigController {\n    public loadconfig() {\n        for (const val of Object.values(configOptions)) {\n            this.getconfig(val);\n        }\n        console.log(\"Configuration loaded\", configOptions);\n    }\n\n    public saveconfig(newconfig: { [key: string]: ConfigOption }) {\n        for (const [key, val] of Object.entries(newconfig)) {\n            this.setconfig(key, val);\n        }\n        console.log(\"Configuration saved\", configOptions);\n    }\n\n    private setconfig(key: string, option: ConfigOption) {\n        if (option?.value === undefined) return this.deleteconfig(key);\n\n        //safeties\n        switch (option.type) {\n            case \"num\":\n                //this parses strings and numbers alike to numbers and refuses non numbers\n                //@ts-expect-error //parseInt can take numbers\n                option.value = parseInt(option.value);\n                if (Number.isNaN(option.value)) return;\n                break;\n        }\n\n        if (option.callback) {\n            // @ts-expect-error Can't be assed to figure this one out\n            option.callback(configOptions[key].value, option.value);\n        }\n        configOptions[key].value = option.value;\n        //configOptions[key].persist = option.persist;\n\n        //if (!option.persist) return this.deleteconfig(key); //idiot proofing, alexkar proofing\n\n        try {\n            localStorage.setItem(option.id, JSON.stringify(option.value));\n            //option.persist = true;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private getconfig(option: ConfigOption): void {\n        try {\n            const data = localStorage.getItem(option.id);\n            if (data !== undefined && data !== null) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const json = JSON.parse(data);\n                if (json !== null && json !== undefined) {\n                    option.value = json as ConfigValue;\n                }\n                //option.persist = true;\n            }\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n\n    private deleteconfig(key: string): void {\n        try {\n            const option = configOptions[key];\n            localStorage.removeItem(option.id);\n            //option.persist = false;\n        } catch (e) {\n            (() => {})(); //noop\n        }\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { TokenResponse } from \"../generatedcode/schemas\";\n\ninterface IEvents {\n    //tasks once the user is fully logged in\n    loginSuccess: (token: TokenResponse) => void;\n}\n\nclass LoginHooks extends TypedEmitter<IEvents> {\n    private promiseHooks: Set<(token: TokenResponse) => Promise<unknown>> = new Set();\n\n    public runHooks(token: TokenResponse) {\n        console.log(\"Running login hooks\");\n        let i = 0;\n        const work: Array<Promise<void>> = [];\n        for (const hook of this.promiseHooks) {\n            const id = i;\n            console.log(`Running hook ${hook.name}(${id})`);\n            work.push(\n                new Promise<void>((resolve, reject) => {\n                    hook(token)\n                        .then(() => {\n                            console.log(`Done hook ${hook.name}(${id})`);\n                            resolve();\n                        })\n                        .catch(err => {\n                            console.error(`Error running hook ${hook.name}(${id}): `, err);\n                            reject(err);\n                        });\n                })\n            );\n            i++;\n        }\n        Promise.all(work)\n            .then(() => {\n                console.log(\"Running post login event\");\n                this.emit(\"loginSuccess\", token);\n            })\n            .catch(() => console.error(\"An error occured while running login hooks\"));\n    }\n\n    public addHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.add(hook);\n    }\n\n    public removeHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.delete(hook);\n    }\n}\n\nexport default new LoginHooks();\n","import { AxiosResponse } from \"axios\";\n\nimport { replaceAll } from \"../../../utils/misc\";\nimport { ErrorCode as TGSErrorCode } from \"../../generatedcode/_enums\";\nimport { ErrorMessageResponse } from \"../../generatedcode/schemas\";\nimport configOptions from \"../../util/config\";\nimport CredentialsProvider from \"../../util/CredentialsProvider\";\n\nexport type GenericErrors =\n    | ErrorCode.HTTP_BAD_REQUEST\n    | ErrorCode.HTTP_DATA_INEGRITY\n    | ErrorCode.HTTP_API_MISMATCH\n    | ErrorCode.HTTP_SERVER_ERROR\n    | ErrorCode.HTTP_UNIMPLEMENTED\n    //    | ErrorCode.HTTP_SERVER_NOT_READY\n    | ErrorCode.AXIOS\n    | ErrorCode.UNHANDLED_RESPONSE\n    | ErrorCode.UNHANDLED_GLOBAL_RESPONSE\n    | ErrorCode.HTTP_ACCESS_DENIED\n    | ErrorCode.HTTP_NOT_ACCEPTABLE\n    | ErrorCode.OK\n    | ErrorCode.NO_APIPATH\n    | ErrorCode.APP_FAIL;\n\nexport enum ErrorCode {\n    OK = 'Isnt displayed but is used as an \"error\" when everything is ok', //void\n    HTTP_BAD_REQUEST = \"error.http.bad_request\", //errmessage\n    HTTP_DATA_INEGRITY = \"error.http.data_integrity\", //errmessage\n    HTTP_API_MISMATCH = \"error.http.api_mismatch\", //void\n    HTTP_SERVER_ERROR = \"error.http.server_error\", //errmessage\n    HTTP_UNIMPLEMENTED = \"error.http.unimplemented\", //errmessage\n    //auto retry    HTTP_SERVER_NOT_READY = 'error.http.server_not_ready', //void\n    HTTP_ACCESS_DENIED = \"error.http.access_denied\", //void\n    HTTP_NOT_ACCEPTABLE = \"error.http.not_acceptable\", //void\n    UNHANDLED_RESPONSE = \"error.unhandled_response\", //axiosresponse\n    UNHANDLED_GLOBAL_RESPONSE = \"error.unhandled_global_response\", //axiosresponse\n    AXIOS = \"error.axios\", //jserror\n\n    //Generic errors\n    GITHUB_FAIL = \"error.github\", //jserror\n    APP_FAIL = \"error.app\", //jserror\n    NO_APIPATH = \"error.no_apipath\", //void\n\n    //Login errors\n    LOGIN_FAIL = \"error.login.bad_user_pass\", //void\n    LOGIN_NOCREDS = \"error.login.no_creds\", //void\n    LOGIN_DISABLED = \"error.login.user_disabled\", //void\n    LOGIN_BAD_OAUTH = \"error.login.bad_oauth\", //jserror\n    LOGIN_RATELIMIT = \"error.login.rate_limit\", //errmessage\n\n    //User errors\n    USER_NO_SYS_IDENT = \"error.user.no_sys_ident\", //errmessage\n    USER_NOT_FOUND = \"error.user.not_found\", //errmessage\n\n    //Administration errors\n    ADMIN_GITHUB_RATE = \"error.admin.rate\", //errmessage\n    ADMIN_GITHUB_ERROR = \"error.admin.error\", //errmessage\n    ADMIN_WATCHDOG_UNAVAIL = \"error.admin.watchdog.avail\", //errmessage\n    ADMIN_VERSION_NOT_FOUND = \"error.admin.update.notfound\", //errmessage\n    ADMIN_LOGS_IO_ERROR = \"error.admin.logs.io\", //errmessage\n\n    //Job errors\n    JOB_JOB_NOT_FOUND = \"error.job.not_found\", //errmessage\n    JOB_JOB_COMPLETE = \"error.job.complete\", //void\n\n    //Transfer errors\n    TRANSFER_NOT_AVAILABLE = \"error.transfer.not_available\", //errmessage\n    UPLOAD_FAILED = \"error.transfer.upload_failed\", //void\n\n    GROUP_NOT_FOUND = \"error.group.not_found\", //errmessage\n    GROUP_NOT_EMPTY = \"error.group.not_empty\", //errmessage\n\n    //Instance errors\n    INSTANCE_NO_DB_ENTITY = \"error.instance.no_db_entity\" //errmessage\n}\n\ntype errorMessage = {\n    errorMessage: ErrorMessageResponse;\n};\ntype axiosResponse = {\n    axiosResponse: AxiosResponse;\n};\ntype jsError = {\n    jsError: Error;\n};\ntype voidError = {\n    void: true;\n};\n\nexport enum DescType {\n    LOCALE,\n    TEXT\n}\ninterface Desc {\n    type: DescType;\n    desc: string;\n}\n\ntype allAddons = errorMessage | axiosResponse | jsError | voidError;\n\nexport default class InternalError<T extends ErrorCode = ErrorCode> {\n    public readonly code: T;\n    public readonly desc?: Desc;\n    public readonly extendedInfo: string;\n    public readonly originalErrorMessage?: ErrorMessageResponse;\n\n    public constructor(code: T, addon: allAddons, origin?: AxiosResponse) {\n        this.code = code;\n        if (\"errorMessage\" in addon) {\n            const err = addon.errorMessage;\n            this.originalErrorMessage = err;\n            this.desc = {\n                type: DescType.TEXT,\n                desc:\n                    TGSErrorCode[err.errorCode] +\n                    \": \" +\n                    err.message +\n                    (err.additionalData ? \": \" + err.additionalData : \"\")\n            };\n            if (!err.message) {\n                this.desc = {\n                    type: DescType.TEXT,\n                    desc: TGSErrorCode[err.errorCode]\n                };\n            }\n        }\n        if (\"jsError\" in addon) {\n            const err = addon.jsError;\n            this.desc = {\n                type: DescType.TEXT,\n                desc: `${err.name}: ${err.message}`\n            };\n        }\n        const stack = new Error().stack;\n\n        let debuginfo = JSON.stringify({ addon, origin, config: configOptions, stack });\n        debuginfo = debuginfo.replace(\n            /Basic (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?/g,\n            \"Basic **************\"\n        );\n        debuginfo = debuginfo.replace(\n            /{\"username\":\".+?\",\"password\":\".+?\"}/g,\n            '{\"username\":\"*******\",\"password\":\"*******\"}'\n        );\n        if (CredentialsProvider.isTokenValid()) {\n            debuginfo = replaceAll(\n                debuginfo,\n                CredentialsProvider.token?.bearer as string,\n                \"**************\"\n            );\n        }\n        if (configOptions.githubtoken.value) {\n            debuginfo = replaceAll(\n                debuginfo,\n                configOptions.githubtoken.value as string,\n                \"**************\"\n            );\n        }\n        this.extendedInfo = debuginfo;\n\n        console.error(\n            `Error occured within the application: ${this.code} (${\n                this.desc?.desc || \"No description\"\n            })`,\n            this\n        );\n\n        //@ts-expect-error yeah well, i aint extending the window interface\n        if (window.breakonerror) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n    }\n}\n","import { DefaultListener, ListenerSignature, TypedEmitter } from \"tiny-typed-emitter\";\n\nexport abstract class ApiClient<\n    L extends ListenerSignature<L> = DefaultListener\n> extends TypedEmitter<L> {\n    public constructor() {\n        super();\n        if (window.clients == undefined) window.clients = {};\n        console.log(this.constructor.name, this);\n        window.clients[this.constructor.name] = this;\n    }\n}\n","import { OAuthProvider } from \"../generatedcode/_enums\";\n\nexport enum CredentialsType {\n    Password,\n    OAuth\n}\n\nexport interface IPasswordCredentials {\n    type: CredentialsType.Password;\n    userName: string;\n    password: string;\n}\n\nexport interface IOAuthCredentials {\n    type: CredentialsType.OAuth;\n    provider: OAuthProvider;\n    token: string;\n}\n\nexport type ICredentials = IPasswordCredentials | IOAuthCredentials;\n","import { ApiClient } from \"./_base\";\nimport { AdministrationRights, InstanceManagerRights } from \"./generatedcode/_enums\";\nimport {\n    ErrorMessageResponse,\n    PaginatedUserResponse,\n    UserCreateRequest,\n    UserResponse,\n    UserUpdateRequest\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    loadUserInfo: (user: InternalStatus<UserResponse, GenericErrors>) => void;\n}\n\nexport type GetCurrentUserErrors = GenericErrors;\nexport type EditUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND | GetCurrentUserErrors;\nexport type GetUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type CreateUserErrors = GenericErrors | ErrorCode.USER_NO_SYS_IDENT;\n\nexport default new (class UserClient extends ApiClient<IEvents> {\n    private _cachedUser?: InternalStatus<UserResponse, ErrorCode.OK>;\n    public get cachedUser() {\n        return this._cachedUser;\n    }\n    private loadingUserInfo = false;\n    //If set to true, all created users will default to having all permissions granted, used by the setup\n    public createAllUsersWithAA = false;\n\n    public constructor() {\n        super();\n        this.getCurrentUser = this.getCurrentUser.bind(this);\n\n        LoginHooks.addHook(() => this.getCurrentUser());\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedUser = undefined;\n        });\n    }\n\n    public async editUser(\n        newUser: UserUpdateRequest\n    ): Promise<InternalStatus<UserResponse, EditUserErrors>> {\n        await ServerClient.wait4Init();\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Update(null, newUser);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<EditUserErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                const current = await this.getCurrentUser();\n                if (current.code == StatusCode.OK) {\n                    if (current.payload.id == newUser.id) {\n                        //if we are editing ourselves, clear cached data to reload permissions on the app\n                        ServerClient.emit(\"purgeCache\");\n                    }\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: current.error\n                    });\n                }\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getCurrentUser(\n        bypassCache?: boolean\n    ): Promise<InternalStatus<UserResponse, GetCurrentUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (!CredentialsProvider.isTokenValid()) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.HTTP_ACCESS_DENIED, {\n                    void: true\n                })\n            });\n        }\n\n        if (this._cachedUser && !bypassCache) {\n            return this._cachedUser;\n        }\n\n        if (this.loadingUserInfo) {\n            return await new Promise(resolve => {\n                const resolver = (user: InternalStatus<UserResponse, GenericErrors>) => {\n                    resolve(user);\n                    this.removeListener(\"loadUserInfo\", resolver);\n                };\n                this.on(\"loadUserInfo\", resolver);\n            });\n        }\n\n        this.loadingUserInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Read();\n        } catch (stat) {\n            const res = new InternalStatus<UserResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadUserInfo\", res);\n            this.loadingUserInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<UserResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n\n                this._cachedUser = thing;\n                this.emit(\"loadUserInfo\", thing);\n                this.loadingUserInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<UserResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadUserInfo\", res);\n                this.loadingUserInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async listUsers(): Promise<InternalStatus<UserResponse[], GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_List({\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as PaginatedUserResponse)!.content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getUser(id: number): Promise<InternalStatus<UserResponse, GetUserErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_GetId({ id: id });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createUser(\n        newuser:\n            | {\n                  name: string;\n                  password: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n            | {\n                  systemIdentifier: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n    ): Promise<InternalStatus<UserResponse, CreateUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (newuser.enabled === undefined) newuser.enabled = true;\n        if (this.createAllUsersWithAA) {\n            newuser.instanceManagerRights = 0;\n            newuser.administrationRights = 0;\n\n            for (const perm of Object.values(InstanceManagerRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.instanceManagerRights += perm;\n            }\n\n            for (const perm of Object.values(AdministrationRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.administrationRights += perm;\n            }\n        }\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserController_Create(\n                null,\n                newuser as UserCreateRequest\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NO_SYS_IDENT, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { ApiClient } from \"./_base\";\nimport { InstancePermissionSetResponse } from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\ninterface IEvents {\n    loadInstancePermissionSet: (\n        user: InternalStatus<InstancePermissionSetResponse, GenericErrors>\n    ) => void;\n}\n\nexport type getCurrentInstancePermissionSetErrors = GenericErrors;\n\nexport default new (class InstancePermissionSetClient extends ApiClient<IEvents> {\n    private _cachedInstancePermissionSet: Map<\n        number,\n        InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>\n    > = new Map<number, InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>>();\n\n    private loadingInstancePermissionSetInfo: Map<number, boolean> = new Map<number, boolean>();\n\n    public constructor() {\n        super();\n\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedInstancePermissionSet.clear();\n        });\n    }\n\n    public async getCurrentInstancePermissionSet(\n        instanceid: number\n    ): Promise<\n        InternalStatus<InstancePermissionSetResponse, getCurrentInstancePermissionSetErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        if (this._cachedInstancePermissionSet.has(instanceid)) {\n            return this._cachedInstancePermissionSet.get(instanceid)!;\n        }\n\n        if (this.loadingInstancePermissionSetInfo.get(instanceid)) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<InstancePermissionSetResponse, GenericErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadInstancePermissionSet\", resolver);\n                };\n                this.on(\"loadInstancePermissionSet\", resolver);\n            });\n        }\n\n        this.loadingInstancePermissionSetInfo.set(instanceid, true);\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.InstancePermissionSetController_Read({\n                Instance: instanceid\n            });\n        } catch (stat) {\n            const res = new InternalStatus<InstancePermissionSetResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadInstancePermissionSet\", res);\n            this.loadingInstancePermissionSetInfo.set(instanceid, false);\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const res = new InternalStatus<InstancePermissionSetResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as InstancePermissionSetResponse\n                });\n\n                this._cachedInstancePermissionSet.set(instanceid, res);\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<InstancePermissionSetResponse, GenericErrors>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadInstancePermissionSet\", res);\n                this.loadingInstancePermissionSetInfo.set(instanceid, false);\n                return res;\n            }\n        }\n    }\n})();\n","import { ApiClient } from \"./_base\";\nimport { ErrorMessageResponse, JobResponse, PaginatedJobResponse } from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type listJobsErrors = GenericErrors;\nexport type getJobErrors = GenericErrors | ErrorCode.JOB_JOB_NOT_FOUND;\nexport type deleteJobErrors =\n    | GenericErrors\n    | ErrorCode.JOB_JOB_NOT_FOUND\n    | ErrorCode.JOB_JOB_COMPLETE;\n\nexport type tgsJobResponse = JobResponse & {\n    instanceid: number;\n    canCancel?: boolean;\n};\n\nexport default new (class JobsClient extends ApiClient {\n    public async listActiveJobs(\n        instanceid: number\n    ): Promise<InternalStatus<tgsJobResponse[], listJobsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Read({\n                Instance: instanceid,\n                page: 1,\n                pageSize: 100\n            });\n        } catch (stat) {\n            return new InternalStatus<tgsJobResponse[], listJobsErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus<tgsJobResponse[], listJobsErrors>({\n                    code: StatusCode.OK,\n                    payload: (response.data as PaginatedJobResponse)!.content.map(job => {\n                        return {\n                            ...job,\n                            instanceid: instanceid\n                        };\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus<tgsJobResponse[], listJobsErrors>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<tgsJobResponse, getJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_GetId({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const job = {\n                    ...(response.data as JobResponse),\n                    instanceid: instanceid\n                };\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: job\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteJob(\n        instanceid: number,\n        jobid: number\n    ): Promise<InternalStatus<tgsJobResponse, deleteJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.JobController_Delete({\n                Instance: instanceid,\n                id: jobid\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                const job = {\n                    ...(response.data as JobResponse),\n                    instanceid: instanceid\n                };\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: job\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.JOB_JOB_COMPLETE, {\n                        void: true\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport { resolvePermissionSet } from \"../../utils/misc\";\nimport {\n    AdministrationRights,\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    InstanceManagerRights,\n    InstancePermissionSetRights,\n    RepositoryRights,\n    RightsType\n} from \"../generatedcode/_enums\";\nimport InstanceClient from \"../InstanceClient\";\nimport InstancePermissionSetClient from \"../InstancePermissionSetClient\";\nimport JobsClient, { tgsJobResponse } from \"../JobsClient\";\nimport InternalError, { ErrorCode } from \"../models/InternalComms/InternalError\";\nimport { StatusCode } from \"../models/InternalComms/InternalStatus\";\nimport ServerClient from \"../ServerClient\";\nimport UserClient from \"../UserClient\";\nimport configOptions from \"./config\";\nimport LoginHooks from \"./LoginHooks\";\n\ninterface IEvents {\n    jobsLoaded: () => unknown;\n}\n\nexport default new (class JobsController extends TypedEmitter<IEvents> {\n    private fastmodecount = 0;\n    public set fastmode(cycles: number) {\n        console.log(`JobsController going in fastmode for ${cycles} cycles`);\n        this.fastmodecount = cycles;\n        this.restartLoop();\n    }\n\n    private currentLoop: Date = new Date(0);\n    private accessibleInstances = new Set<number>();\n\n    public errors: InternalError[] = [];\n    public jobs = new Map<number, tgsJobResponse>();\n\n    public reset() {\n        this.jobs = new Map<number, tgsJobResponse>();\n        this.reloadAccessibleInstances()\n            .then(this.restartLoop)\n            .catch(e => {\n                this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n            });\n    }\n\n    public constructor() {\n        super();\n\n        this.loop = this.loop.bind(this);\n        this.reset = this.reset.bind(this);\n        this.restartLoop = this.restartLoop.bind(this);\n    }\n\n    public init() {\n        window.clients[\"JobsController\"] = this;\n\n        //technically not a \"cache\" but we might as well reload it\n        ServerClient.on(\"purgeCache\", this.reset);\n\n        InstanceClient.on(\"instanceChange\", this.reset);\n        // eslint-disable-next-line @typescript-eslint/require-await\n        LoginHooks.addHook(async () => this.reset());\n    }\n\n    private async reloadAccessibleInstances(loop = false): Promise<void> {\n        const allInstances = await InstanceClient.listInstances();\n        if (allInstances.code === StatusCode.ERROR) {\n            this.errors.push(allInstances.error);\n            return;\n        }\n\n        const updatedSet = new Set<number>();\n\n        const work = allInstances.payload\n            .filter(instance => instance.online)\n            .map(instance => {\n                return InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    instance.id\n                ).then(permissionSet => {\n                    if (permissionSet.code === StatusCode.ERROR) {\n                        //If its access denied, it means we have view all instances but we dont have access to the instance itself\n                        if (permissionSet.error.code !== ErrorCode.HTTP_ACCESS_DENIED) {\n                            this.errors.push(permissionSet.error);\n                        }\n                        return;\n                    }\n                    updatedSet.add(instance.id);\n                });\n            });\n\n        await Promise.all(work);\n\n        console.warn(updatedSet);\n        this.accessibleInstances = updatedSet;\n\n        if (loop) {\n            window.setTimeout(\n                () => void this.reloadAccessibleInstances(true),\n                configOptions.instanceprobetimer.value as number\n            );\n        }\n    }\n\n    public restartLoop() {\n        //we use an actual date object here because it could help prevent really weird timing\n        // issues as two different date objects cannot be equal\n        // despite the date being\n        const initDate = new Date(Date.now());\n        this.currentLoop = initDate;\n        window.setTimeout(() => {\n            this.loop(initDate).catch(e =>\n                this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n            );\n        }, 0);\n    }\n\n    private async loop(loopid: Date) {\n        //so loops get initialiazed with the current time, it keeps track of which loop to run with\n        // that initialization date in currentLoop if the currentLoop isnt equal to the one provided\n        // to the loop, it means that the loop was\n        // replaced so we dont try to call for another one\n        if (loopid !== this.currentLoop) {\n            return;\n        }\n\n        //time to clear out errors\n        this.errors = [];\n\n        let totalActiveJobs = 0;\n        const work: Promise<void>[] = [];\n\n        this.accessibleInstances.forEach(instanceid => {\n            //now since this is async, it still possible that a single fire gets done after the new loop started, theres no really much that can be done about it\n            work.push(\n                JobsClient.listActiveJobs(instanceid)\n                    .then(async value => {\n                        console.warn(value);\n                        //this check is here because the request itself is async and could return after\n                        // the loop is terminated, we dont want to contaminate the jobs of an instance\n                        // with the jobs of another even if it is for a single fire and would eventually\n                        // get fixed on its own after a few seconds\n                        if (loopid !== this.currentLoop) return;\n\n                        if (value.code === StatusCode.OK) {\n                            for (const job of value.payload) {\n                                this.jobs.set(job.id, job);\n                            }\n\n                            const remoteActive = value.payload.map(job => job.id);\n                            const localActive = Array.from(this.jobs.values())\n                                .filter(job => !job.stoppedAt)\n                                .filter(job => job.instanceid === instanceid)\n                                .map(job => job.id);\n                            const manualIds = localActive.filter(\n                                jobId => !remoteActive.includes(jobId)\n                            );\n\n                            const work: Promise<void>[] = [];\n                            manualIds.forEach(jobId => {\n                                work.push(\n                                    JobsClient.getJob(instanceid, jobId).then(job => {\n                                        if (job.code === StatusCode.ERROR) {\n                                            this.errors.push(job.error);\n                                            return;\n                                        }\n                                        this.jobs.set(job.payload.id, job.payload);\n                                    })\n                                );\n                            });\n                            await Promise.all(work);\n\n                            if (loopid !== this.currentLoop) return;\n\n                            totalActiveJobs += value.payload.length;\n                        } else {\n                            if (\n                                value.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                                value.error.originalErrorMessage?.errorCode ===\n                                    TGSErrorCode.InstanceOffline\n                            ) {\n                                console.log(\n                                    `[JobsController] Clearing instance ${instanceid} as it is now offline`\n                                );\n                                this.accessibleInstances.delete(instanceid);\n                                //Probably a good idea to reload the list at this point\n                                this.reloadAccessibleInstances().catch(e => {\n                                    this.errors.push(\n                                        new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) })\n                                    );\n                                });\n                            } else {\n                                this.errors.push(value.error);\n                            }\n                        }\n                    })\n                    .catch(reason => {\n                        console.error(reason);\n                    })\n            );\n        });\n\n        await Promise.all(work);\n\n        console.warn(this.jobs);\n\n        work.length = 0;\n        for (const job of this.jobs.values()) {\n            if (\n                job.progress === undefined &&\n                !job.stoppedAt &&\n                this.accessibleInstances.has(job.instanceid)\n            ) {\n                work.push(\n                    JobsClient.getJob(job.instanceid, job.id).then(progressedjob => {\n                        if (loopid !== this.currentLoop) return;\n                        if (progressedjob.code === StatusCode.OK) {\n                            job.progress = progressedjob.payload.progress;\n                        } else {\n                            if (\n                                progressedjob.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                                progressedjob.error.originalErrorMessage?.errorCode ===\n                                    TGSErrorCode.InstanceOffline\n                            ) {\n                                console.log(\n                                    `[JobsController] Clearing instance ${job.instanceid} as it is now offline`\n                                );\n                                this.accessibleInstances.delete(job.instanceid);\n                                //Probably a good idea to reload the list at this point\n                                this.reloadAccessibleInstances().catch(e => {\n                                    this.errors.push(\n                                        new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) })\n                                    );\n                                });\n                            } else {\n                                this.errors.push(progressedjob.error);\n                            }\n                        }\n                    })\n                );\n            }\n\n            work.push(\n                this.canCancel(job, this.errors).then(canCancel => {\n                    if (loopid !== this.currentLoop) return;\n                    job.canCancel = canCancel;\n                })\n            );\n        }\n\n        //populate fields on jobs\n        await Promise.all(work);\n        if (loopid !== this.currentLoop) return;\n\n        this.emit(\"jobsLoaded\");\n        if (this.fastmodecount && loopid === this.currentLoop) {\n            window.setTimeout(() => {\n                this.loop(loopid).catch(e =>\n                    this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n                );\n            }, 800);\n            this.fastmodecount--;\n            console.log(`JobsController will remain in fastmode for ${this.fastmodecount} cycles`);\n        } else {\n            window.setTimeout(() => {\n                this.loop(loopid).catch(e =>\n                    this.errors.push(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }))\n                );\n            }, (totalActiveJobs ? (configOptions.jobpollactive.value as number) : (configOptions.jobpollinactive.value as number)) * 1000);\n        }\n    }\n\n    private async canCancel(\n        job: Readonly<tgsJobResponse>,\n        errors: InternalError<ErrorCode>[]\n    ): Promise<boolean> {\n        //we dont need to reevalutate stuff that we already know\n        if (job.canCancel !== undefined) return job.canCancel;\n\n        if (job.cancelRightsType === undefined) {\n            return true;\n        }\n\n        switch (job.cancelRightsType as RightsType) {\n            case RightsType.Administration: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as AdministrationRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).administrationRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.InstanceManager: {\n                const userInfo = await UserClient.getCurrentUser();\n                if (userInfo.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstanceManagerRights;\n                    return !!(\n                        resolvePermissionSet(userInfo.payload).instanceManagerRights & required\n                    );\n                } else {\n                    errors.push(userInfo.error);\n                    return false;\n                }\n            }\n            case RightsType.Byond: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ByondRights;\n                    return !!(InstancePermissionSet.payload.byondRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.ChatBots: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ChatBotRights;\n                    return !!(InstancePermissionSet.payload.chatBotRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Configuration: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as ConfigurationRights;\n                    return !!(InstancePermissionSet.payload.configurationRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamDaemon: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamDaemonRights;\n                    return !!(InstancePermissionSet.payload.dreamDaemonRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.DreamMaker: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as DreamMakerRights;\n                    return !!(InstancePermissionSet.payload.dreamMakerRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.InstancePermissionSet: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as InstancePermissionSetRights;\n                    return !!(InstancePermissionSet.payload.instancePermissionSetRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n            case RightsType.Repository: {\n                const InstancePermissionSet = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                    job.instanceid\n                );\n                if (InstancePermissionSet.code === StatusCode.OK) {\n                    const required = job.cancelRight as RepositoryRights;\n                    return !!(InstancePermissionSet.payload.repositoryRights & required);\n                } else {\n                    errors.push(InstancePermissionSet.error);\n                    return false;\n                }\n            }\n        }\n    }\n\n    public async cancelOrClear(\n        jobid: number,\n        onError: (error: InternalError<ErrorCode>) => void\n    ): Promise<boolean> {\n        const job = this.jobs.get(jobid);\n\n        //no we cant cancel jobs we arent aware of yet\n        if (!job) return false;\n\n        //just clear out the job\n        if (job.stoppedAt) {\n            this.jobs.delete(jobid);\n            this.emit(\"jobsLoaded\");\n            return true;\n        } else {\n            const deleteInfo = await JobsClient.deleteJob(job.instanceid, jobid);\n            if (deleteInfo.code === StatusCode.OK) {\n                return true;\n            } else {\n                onError(deleteInfo.error);\n                return false;\n            }\n        }\n    }\n})();\n","import { AxiosError, AxiosResponse, OpenAPIClientAxios } from \"openapi-client-axios\";\nimport { Document } from \"openapi-client-axios/types/client\";\n\nimport { API_VERSION, VERSION } from \"../definitions/constants\";\nimport { ApiClient } from \"./_base\";\nimport { Client } from \"./generatedcode/_generated\";\nimport {\n    ErrorMessageResponse,\n    ServerInformationResponse,\n    TokenResponse\n} from \"./generatedcode/schemas\";\nimport { CredentialsType, ICredentials } from \"./models/ICredentials\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport configOptions from \"./util/config\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    //self explainatory\n    logout: () => void;\n    //fired whenever something is denied access, shouldnt really be used\n    accessDenied: () => void;\n    //fired when the server info is first loaded\n    loadServerInfo: (\n        serverInfo: InternalStatus<ServerInformationResponse, ServerInfoErrors>\n    ) => void;\n    //fired when the api is loaded from the json file and loaded\n    initialized: () => void;\n    //purge all caches\n    purgeCache: () => void;\n    //internal event, queues logins\n    loadLoginInfo: (loginInfo: InternalStatus<TokenResponse, LoginErrors>) => void;\n    //internal event fired for wait4Token(), external things should be using LoginHooks#LoginSuccess or a login hook\n    tokenAvailable: (token: TokenResponse) => void;\n}\n\nexport type LoginErrors =\n    | GenericErrors\n    | ErrorCode.LOGIN_DISABLED\n    | ErrorCode.LOGIN_FAIL\n    | ErrorCode.LOGIN_NOCREDS\n    | ErrorCode.LOGIN_BAD_OAUTH\n    | ErrorCode.LOGIN_RATELIMIT;\n\nexport type ServerInfoErrors = GenericErrors;\n\nexport default new (class ServerClient extends ApiClient<IEvents> {\n    private static readonly globalHandledCodes = [400, 401, 403, 406, 409, 426, 500, 501, 503];\n\n    //api\n    public apiClient?: Client; //client to interface with the api\n    private api?: OpenAPIClientAxios; //api object, handles sending requests and configuring things\n    private initialized = false;\n    private loadingServerInfo = false;\n\n    public constructor() {\n        super();\n        this.getServerInfo = this.getServerInfo.bind(this);\n\n        LoginHooks.addHook(this.getServerInfo);\n        this.on(\"purgeCache\", () => {\n            this._serverInfo = undefined;\n            if (CredentialsProvider.token) {\n                void LoginHooks.runHooks(CredentialsProvider.token);\n            }\n        });\n\n        //Why is this here? Because otherwise it creates an import loop, grrrrr\n        configOptions.apipath.callback = (): void => {\n            console.log(\"Reinitializing API\");\n            this.initApi()\n                .then(() => {\n                    console.log(\"API Reinitialized\");\n                })\n                .catch(() => {\n                    //The API failing to initialize is a big nono, start all over again.\n                    window.location.reload();\n                });\n        };\n    }\n\n    //serverInfo\n    private _serverInfo?: InternalStatus<ServerInformationResponse, ErrorCode.OK>;\n\n    public get serverInfo() {\n        return this._serverInfo;\n    }\n\n    public autoLogin = true;\n    private loggingIn = false;\n\n    public async initApi() {\n        console.log(\"Initializing API client\");\n        console.time(\"APIInit\");\n        //Object is forced typecasted to Document because i really cant be assed to figure out why it doesn't accept the json\n        //The json is loaded with import to force webpack to bundle it alone\n        const defObj = ((await import(\"./generatedcode/swagger.json\"))\n            .default as unknown) as Document;\n\n        this.api = new OpenAPIClientAxios({\n            definition: defObj,\n            //Defaults for all requests sent by the apiClient, you may notice a lack of authorization headers,\n            // those are applied in the request interceptor\n            axiosConfigDefaults: {\n                //Yes this is only initialized once even if the configOption changes, this doesn't\n                baseURL: configOptions.apipath.value as string,\n                withCredentials: false,\n                headers: {\n                    Accept: \"application/json\",\n                    Api: `Tgstation.Server.Api/` + API_VERSION,\n                    \"Webpanel-Version\": VERSION\n                },\n                //Global errors are handled via the catch clause and endpoint specific response codes are handled normally\n                validateStatus: status => {\n                    return !ServerClient.globalHandledCodes.includes(status);\n                }\n            }\n        });\n        this.apiClient = await this.api.init<Client>();\n\n        //Oh lord here be shitcode, welcome to the land of interceptors, they as their name say\n        // intercept requests and changes them. It also intercepts responses and changes them\n        this.apiClient.interceptors.request.use(\n            async value => {\n                //Meta value that means theres no value, used in the github deployed version\n                if (configOptions.apipath.value === \"https://example.org:5000\") {\n                    const errorobj = new InternalError(ErrorCode.NO_APIPATH, {\n                        void: true\n                    });\n                    return Promise.reject(errorobj);\n                }\n\n                //This applies the authorization header, it will wait however long it needs until\n                // theres a token available. It obviously won't wait for a token before sending the request\n                // if its currently sending a request to the login endpoint...\n                if (!(value.url === \"/\" || value.url === \"\")) {\n                    const tok = await this.wait4Token();\n                    (value.headers as { [key: string]: string })[\"Authorization\"] =\n                        \"Bearer \" + tok.bearer;\n                }\n                return value;\n            },\n            error => {\n                return Promise.reject(error);\n            }\n        );\n\n        //I am sorry for what you will see before you, this is the response interceptor, it normalizes\n        // all the weird shit in the TGS api to make it *somewhat* easier to consume in the rest of the app\n        // onFulfilled here is a noop that returns its arguments because we only care to intercept errors\n        this.apiClient.interceptors.response.use(\n            val => val,\n            (error: AxiosError): Promise<AxiosResponse> => {\n                //THIS IS SNOWFLAKE KEKW\n                //As the above comment mentions, this shitcode is very snowflake\n                // it tries to typecast the \"response\" we got into an error then tries to check if that \"error\" is\n                // the snowflake no apipath github error, if it is, it rejects the promise to send it to the catch block\n                // all endpoints have which simply returns the error wrapped in a status object\n                const snowflake = (error as unknown) as InternalError<ErrorCode.NO_APIPATH>;\n                if (snowflake?.code === ErrorCode.NO_APIPATH) {\n                    return Promise.reject(snowflake);\n                }\n\n                //This was originally an else clause at the bottom but it made it hard to find\n                // if the promise rejected and its not because its a globally handled status code\n                // it means that axios created an error itself for an unknown reason(network failure,\n                // cors failure, user is navigating away, aborting requests, etc). Simply return the error\n                // as a globally handled error.\n                if (\n                    !(\n                        error.response &&\n                        error.response.status &&\n                        ServerClient.globalHandledCodes.includes(error.response.status)\n                    )\n                ) {\n                    const err = error as Error;\n                    const errorobj = new InternalError(\n                        ErrorCode.AXIOS,\n                        { jsError: err },\n                        error.response\n                    );\n                    return Promise.reject(errorobj);\n                }\n\n                //I am sorry, this is the bulk of the shitcode, its a massive switch that handles every single\n                // globally handled status code and sometimes not so globally because one endpoint decided it would be\n                const res = error.response as AxiosResponse<unknown>;\n                switch (error.response.status) {\n                    //Error code 400: Bad request, show message to user and instruct them to report it as its probably a bug\n                    case 400: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_BAD_REQUEST,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    //Error code 401: Access Denied, fired whenever a token expires, in that case, attempt to reauthenticate\n                    // using the last known working credentials, if that succeeds, reissue the request, otherwise logout the\n                    // user and kick them to the login page. Snowflake behaviour: Acts as a failed login for the login endpoint\n                    case 401: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        }\n\n                        if (this.autoLogin) {\n                            return this.login().then(status => {\n                                switch (status.code) {\n                                    case StatusCode.OK: {\n                                        return this.api!.client.request(error.config);\n                                    }\n                                    case StatusCode.ERROR: {\n                                        this.emit(\"accessDenied\");\n                                        //time to kick out the user\n                                        this.logout();\n                                        const errorobj = new InternalError(\n                                            ErrorCode.HTTP_ACCESS_DENIED,\n                                            {\n                                                void: true\n                                            },\n                                            res\n                                        );\n                                        return Promise.reject(errorobj);\n                                    }\n                                }\n                            });\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 403: {\n                        const request = error.config;\n                        if (\n                            (request.url === \"/\" || request.url === \"\") &&\n                            request.method === \"post\"\n                        ) {\n                            return Promise.resolve(error.response);\n                        } else {\n                            this.emit(\"accessDenied\");\n                            const errorobj = new InternalError(\n                                ErrorCode.HTTP_ACCESS_DENIED,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);\n                        }\n                    }\n                    case 406: {\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_NOT_ACCEPTABLE,\n                            {\n                                void: true\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 409: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n\n                        //Thanks for reusing a global erorr status cyber. Log operations can return 409\n                        const request = error.config;\n                        if (request.url === \"/Administration/Logs\" && request.method === \"get\") {\n                            return Promise.resolve(error.response);\n                        }\n\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_DATA_INEGRITY,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 426: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_API_MISMATCH,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 500: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_SERVER_ERROR,\n                            {\n                                errorMessage\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 501: {\n                        const errorMessage = res.data as ErrorMessageResponse;\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_UNIMPLEMENTED,\n                            { errorMessage },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                    case 503: {\n                        console.log(\"Server not ready, delaying request\", error.config);\n                        return new Promise(resolve => {\n                            setTimeout(resolve, 5000);\n                        }).then(() => this.api!.client.request(error.config));\n                        /*const errorobj = new InternalError(\n                                ErrorCode.HTTP_SERVER_NOT_READY,\n                                {\n                                    void: true\n                                },\n                                res\n                            );\n                            return Promise.reject(errorobj);*/\n                    }\n                    default: {\n                        const errorobj = new InternalError(\n                            ErrorCode.UNHANDLED_GLOBAL_RESPONSE,\n                            {\n                                axiosResponse: res\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                }\n            }\n        );\n        console.timeEnd(\"APIInit\");\n        this.initialized = true;\n        this.emit(\"initialized\");\n    }\n\n    //Utility function that returns a promise which resolves whenever ServerClient#ApiClient becomes valid\n    public wait4Init(): Promise<void> {\n        return new Promise<void>(resolve => {\n            if (this.initialized) {\n                resolve();\n                return;\n            }\n            this.on(\"initialized\", () => resolve());\n        });\n    }\n\n    //Utility function that returns a promise which resolves with the token whenever theres valid credentials(could be immediatly)\n    public wait4Token() {\n        return new Promise<TokenResponse>(resolve => {\n            if (CredentialsProvider.isTokenValid()) {\n                resolve(CredentialsProvider.token);\n                return;\n            }\n            this.on(\"tokenAvailable\", token => {\n                resolve(token);\n            });\n        });\n    }\n\n    public async login(\n        newCreds?: ICredentials\n    ): Promise<InternalStatus<TokenResponse, LoginErrors>> {\n        //Shouldn't really happen edge cases\n        await this.wait4Init();\n\n        console.log(\"Attempting login\");\n\n        //Newcreds is optional, if its missing its going to try to reuse the last used credentials,\n        // if newCreds exists, its going to use newCreds\n        let oauthAutoLogin = false;\n        if (newCreds) {\n            CredentialsProvider.credentials = newCreds;\n        } else if (CredentialsProvider.credentials?.type === CredentialsType.OAuth) {\n            // autologin doesn't work with OAuth\n            this.logout();\n            oauthAutoLogin = true;\n        }\n\n        //This is thrown if you try to reuse the last credentials without actually having last used credentials\n        //or you let an oauth login expire\n        if (oauthAutoLogin || !CredentialsProvider.credentials)\n            return new InternalStatus<TokenResponse, ErrorCode.LOGIN_NOCREDS>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.LOGIN_NOCREDS, { void: true })\n            });\n\n        //This block is here to prevent duplication of login requests at the same time, when you start logging in,\n        // it sets loggingIn to true and fires an event once its done logging in, successful or not, if you try to login\n        // while another login request is ongoing, it listens to that event and returns the output normally.\n        //\n        // Basically, make two calls, receive two identical return values, make only one request\n        if (this.loggingIn) {\n            return await new Promise(resolve => {\n                const resolver = (info: InternalStatus<TokenResponse, LoginErrors>) => {\n                    resolve(info);\n                    this.removeListener(\"loadLoginInfo\", resolver);\n                };\n                this.on(\"loadLoginInfo\", resolver);\n            });\n        }\n        this.loggingIn = true;\n\n        let response;\n        try {\n            if (CredentialsProvider.credentials.type == CredentialsType.Password)\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: (undefined as unknown) as string\n                    },\n                    null,\n                    {\n                        auth: {\n                            username: CredentialsProvider.credentials.userName,\n                            password: CredentialsProvider.credentials.password\n                        }\n                    }\n                );\n            else {\n                response = await this.apiClient!.HomeController_CreateToken(\n                    {\n                        OAuthProvider: CredentialsProvider.credentials.provider\n                    },\n                    null,\n                    {\n                        headers: {\n                            Authorization: `OAuth ${CredentialsProvider.credentials.token}`\n                        }\n                    }\n                );\n            }\n        } catch (stat) {\n            const res = new InternalStatus<TokenResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadLoginInfo\", res);\n            return res;\n        } finally {\n            this.loggingIn = false;\n        }\n        switch (response.status) {\n            case 200: {\n                console.log(\"Login success\");\n                const token = response.data as TokenResponse;\n\n                // CredentialsProvider.token is added to all requests in the form of Authorization: Bearer <token>\n                CredentialsProvider.token = token;\n                this.emit(\"tokenAvailable\", token);\n\n                //LoginHooks are a way of running several async tasks at the same time whenever the user is authenticated,\n                // we cannot use events here as events wait on each listener before proceeding which has a noticable performance\n                // cost when it comes to several different requests to TGS,\n                // we cant directly call what we need to run here as it would violate isolation of\n                // ApiClient(the apiclient is independent from the rest of the app to avoid circular dependency\n                // (example: Component requires ServerClient to login and but the ServerClient requires Component to\n                // update it once the server info is loaded))\n                //\n                // TL;DR; Runs shit when you login\n\n                LoginHooks.runHooks(token);\n                const res = new InternalStatus<TokenResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: token\n                });\n                //Deduplication\n                this.emit(\"loadLoginInfo\", res);\n\n                return res;\n            }\n            case 401: {\n                this.logout();\n                console.log(\"Failed to login\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_FAIL,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 403: {\n                this.logout();\n                console.log(\"Account disabled\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_DISABLED>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_DISABLED,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 429: {\n                this.logout();\n                console.log(\"rate limited\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_RATELIMIT>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_RATELIMIT,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<TokenResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n        }\n    }\n\n    public logout() {\n        //If theres no token it means theres nothing to clear\n        if (!CredentialsProvider.isTokenValid()) {\n            return;\n        }\n        console.log(\"Logging out\");\n        CredentialsProvider.credentials = undefined;\n        CredentialsProvider.token = undefined;\n        //events to clear the app state as much as possible for the next user\n        this.emit(\"purgeCache\");\n        this.emit(\"logout\");\n    }\n\n    public async getServerInfo(\n        _token?: TokenResponse,\n        bypassCache = false\n    ): Promise<InternalStatus<ServerInformationResponse, ServerInfoErrors>> {\n        await this.wait4Init();\n\n        if (this._serverInfo && !bypassCache) {\n            return this._serverInfo;\n        }\n\n        if (this.loadingServerInfo) {\n            return new Promise(resolve => {\n                if (this._serverInfo) {\n                    //race condition if 2 things listen to an event or something\n                    resolve(this._serverInfo);\n                    return;\n                }\n                const resolver = (\n                    info: InternalStatus<ServerInformationResponse, GenericErrors>\n                ) => {\n                    resolve(info);\n                    this.removeListener(\"loadServerInfo\", resolver);\n                };\n                this.on(\"loadServerInfo\", resolver);\n            });\n        }\n\n        this.loadingServerInfo = true;\n\n        let response;\n        try {\n            response = await this.apiClient!.HomeController_Home();\n        } catch (stat) {\n            const res = new InternalStatus<ServerInformationResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadServerInfo\", res);\n            this.loadingServerInfo = false;\n            return res;\n        }\n        switch (response.status) {\n            case 200: {\n                const info = response.data as ServerInformationResponse;\n                const cache = new InternalStatus<ServerInformationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: info\n                });\n                this.emit(\"loadServerInfo\", cache);\n                this._serverInfo = cache;\n                this.loadingServerInfo = false;\n                return cache;\n            }\n            default: {\n                const res = new InternalStatus<\n                    ServerInformationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadServerInfo\", res);\n                this.loadingServerInfo = false;\n                return res;\n            }\n        }\n    }\n})();\n\n//https://stackoverflow.com/questions/40510611/typescript-interface-require-one-of-two-properties-to-exist\n//name describes what it does, makes the passed type only require 1 property, the others being optional\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n    {\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n    }[Keys];\n"],"sourceRoot":""}