{"version":3,"sources":["webpack:///./src/components/views/User/List.tsx"],"names":["withRouter","props","state","errors","users","loading","canList","error","this","setState","prevState","Array","from","push","response","UserClient","getCurrentUser","code","StatusCode","OK","resolvePermissionSet","payload","administrationRights","AdministrationRights","ReadUsers","res","listUsers","ERROR","addError","text","className","variant","id","map","err","index","key","onClose","prev","newarr","undefined","striped","bordered","hover","responsive","value","createddate","Date","createdAt","createddiff","getTime","now","name","systemIdentifier","enabled","group","overlay","values","ref","triggerHandler","toLocaleString","numeric","updateIntervalInSeconds","createdBy","onClick","RouteData","selecteduserid","history","AppRoutes","useredit","link","route","as","Link","to","usercreate","React","Component"],"mappings":"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","file":"24.ed852511e1b187ece505.js","sourcesContent":["import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { AdministrationRights } from \"../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    users: Components.Schemas.UserResponse[];\n    loading: boolean;\n    canList: boolean;\n}\n\nexport default withRouter(\n    class UserList extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.state = {\n                errors: [],\n                users: [],\n                loading: true,\n                canList: false\n            };\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        public async componentDidMount(): Promise<void> {\n            const response = await UserClient.getCurrentUser();\n            if (response.code == StatusCode.OK) {\n                const canList = !!(\n                    resolvePermissionSet(response.payload).administrationRights &\n                    AdministrationRights.ReadUsers\n                );\n                this.setState({\n                    canList\n                });\n\n                if (canList) {\n                    const res = await UserClient.listUsers();\n                    switch (res.code) {\n                        case StatusCode.OK: {\n                            this.setState({\n                                users: res.payload\n                            });\n                            break;\n                        }\n                        case StatusCode.ERROR: {\n                            this.addError(res.error);\n                        }\n                    }\n                } else {\n                    //if we cant list users, add our own user to the list\n                    this.setState({\n                        users: [response.payload]\n                    });\n                }\n            } else {\n                this.addError(response.error);\n            }\n            this.setState({\n                loading: false\n            });\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.userlist\" />;\n            }\n            return (\n                <div className=\"text-center\">\n                    {!this.state.canList ? (\n                        <Alert className=\"clearfix\" variant=\"error\">\n                            <FormattedMessage id=\"view.user.list.cantlist\" />\n                        </Alert>\n                    ) : (\n                        \"\"\n                    )}\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <Table striped bordered hover variant=\"dark\" responsive>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>\n                                    <FormattedMessage id=\"generic.name\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.details\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.group\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.created\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.createdby\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.action\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.users.map(value => {\n                                const createddate = new Date(value.createdAt);\n                                const createddiff = (createddate.getTime() - Date.now()) / 1000;\n\n                                return (\n                                    <tr key={value.id}>\n                                        <td>{value.id}</td>\n                                        <td>{value.name}</td>\n                                        <td>\n                                            {value.systemIdentifier ? (\n                                                <Badge variant=\"primary\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.system.short\" />\n                                                </Badge>\n                                            ) : (\n                                                <Badge variant=\"primary\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.tgs\" />\n                                                </Badge>\n                                            )}\n                                            {value.enabled ? (\n                                                <Badge variant=\"success\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.enabled\" />\n                                                </Badge>\n                                            ) : (\n                                                <Badge variant=\"danger\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.disabled\" />\n                                                </Badge>\n                                            )}\n                                            {value.group ? (\n                                                <Badge variant=\"warning\" className=\"mx-1\">\n                                                    <FormattedMessage id=\"generic.grouped\" />\n                                                </Badge>\n                                            ) : null}\n                                        </td>\n                                        {value.group ? (\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`${value.name}-tooltip-group`}>\n                                                        <FormattedMessage\n                                                            id=\"generic.groupid\"\n                                                            values={{ id: value.group.id }}\n                                                        />\n                                                    </Tooltip>\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <td {...triggerHandler}>\n                                                        <span\n                                                            ref={ref as React.Ref<HTMLSpanElement>}>\n                                                            {value.group!.name}\n                                                        </span>\n                                                    </td>\n                                                )}\n                                            </OverlayTrigger>\n                                        ) : (\n                                            <td />\n                                        )}\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${value.name}-tooltip`}>\n                                                    {createddate.toLocaleString()}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <td {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        <FormattedRelativeTime\n                                                            value={createddiff}\n                                                            numeric=\"auto\"\n                                                            updateIntervalInSeconds={1}\n                                                        />\n                                                    </span>\n                                                </td>\n                                            )}\n                                        </OverlayTrigger>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${value.name}-tooltip-createdby`}>\n                                                    <FormattedMessage id=\"generic.userid\" />\n                                                    {value.createdBy.id}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <td {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        {value.createdBy.name}\n                                                    </span>\n                                                </td>\n                                            )}\n                                        </OverlayTrigger>\n                                        <td className=\"align-middle p-0\">\n                                            <Button\n                                                onClick={() => {\n                                                    RouteData.selecteduserid = value.id;\n                                                    this.props.history.push(\n                                                        AppRoutes.useredit.link ||\n                                                            AppRoutes.useredit.route\n                                                    );\n                                                }}>\n                                                <FormattedMessage id=\"generic.edit\" />\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <Button as={Link} to={AppRoutes.usercreate.link || AppRoutes.usercreate.route}>\n                        <FormattedMessage id=\"routes.usercreate\" />\n                    </Button>\n                </div>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}