{"version":3,"sources":["webpack:///./src/components/views/Instance/Config.tsx","webpack:///./src/components/utils/WIPNotice.tsx","webpack:///./src/utils/globalObjects.ts"],"names":["InstanceConfig","props","loadInstance","bind","RouteData","instanceid","match","params","id","selectedinstanceconfigtab","tab","state","errors","loading","prevProps","this","setState","error","prevState","Array","from","push","response","InstanceClient","getInstance","parseInt","code","StatusCode","OK","instance","payload","addError","text","context","user","Error","LoadSpin","InstanceSettings","loadable","fallback","className","map","err","index","key","onClose","prev","newarr","undefined","name","as","Link","to","AppRoutes","instancelist","link","route","activeKey","onSelect","newkey","GlobalObjects","setupMode","window","history","pushState","document","title","instanceconfig","eventKey","selfPermissionSet","resolvePermissionSet","React","Component","contextType","UserContext","withRouter","WIPNotice","border","Header","Body","Title","href","Text","VERSION","MODE","location","toString"],"mappings":"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","file":"6.a97185beeaea37e2a4db.js","sourcesContent":["import loadable from \"@loadable/component\";\nimport React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { UserContext } from \"../../../contexts/UserContext\";\nimport { GlobalObjects } from \"../../../utils/globalObjects\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\n\ninterface IProps extends RouteComponentProps<{ id: string; tab?: string }> {}\n\ninterface IState {\n    instance?: Components.Schemas.InstanceResponse;\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    tab: string;\n}\n\nclass InstanceConfig extends React.Component<IProps, IState> {\n    public declare context: UserContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadInstance = this.loadInstance.bind(this);\n\n        RouteData.instanceid = props.match.params.id;\n        RouteData.selectedinstanceconfigtab = props.match.params.tab;\n\n        this.state = {\n            tab: props.match.params.tab || \"settings\",\n            errors: [],\n            loading: true\n        };\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (prevProps.match.params.tab !== this.props.match.params.tab) {\n            this.setState({\n                tab: this.props.match.params.tab || \"settings\"\n            });\n        }\n    }\n\n    public async componentDidMount() {\n        this.setState({\n            loading: true\n        });\n\n        await this.loadInstance();\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async loadInstance() {\n        this.setState({\n            loading: true\n        });\n        const response = await InstanceClient.getInstance(parseInt(this.props.match.params.id));\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        if (!this.context.user) {\n            throw Error(\"Config: this.context.user is null!\");\n        }\n\n        // noinspection DuplicatedCode\n        const changetabs = (newkey: string | null) => {\n            if (!newkey) return;\n\n            RouteData.instanceid = this.props.match.params.id;\n            RouteData.selectedinstanceconfigtab = newkey;\n            if (!GlobalObjects.setupMode) {\n                window.history.pushState(\n                    null,\n                    window.document.title,\n                    AppRoutes.instanceconfig.link || AppRoutes.instanceconfig.route\n                );\n            }\n            this.setState({\n                tab: newkey\n            });\n        };\n        const LoadSpin = <Loading text={\"loading.page\"} />;\n\n        //should always be a react component\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        const InstanceSettings = loadable(() => import(`./Config/InstanceSettings`), {\n            fallback: LoadSpin\n        });\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.instance ? (\n                    <h3>{`${this.state.instance.name} (${this.state.instance.id})`}</h3>\n                ) : (\n                    <h3>\n                        <FormattedMessage id=\"generic.assert.noinstance\" />\n                    </h3>\n                )}\n                <Button as={Link} to={AppRoutes.instancelist.link || AppRoutes.instancelist.route}>\n                    <FormattedMessage id=\"generic.goback\" />\n                </Button>\n                <Tabs\n                    className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\"\n                    activeKey={this.state.tab}\n                    onSelect={changetabs}>\n                    <Tab\n                        eventKey=\"settings\"\n                        title={<FormattedMessage id=\"view.instance.config.instancesettings\" />}>\n                        {this.state.instance ? (\n                            <InstanceSettings\n                                instance={this.state.instance}\n                                loadInstance={this.loadInstance}\n                                selfPermissionSet={resolvePermissionSet(this.context.user)}\n                            />\n                        ) : (\n                            <FormattedMessage id=\"generic.assert.noinstance\" />\n                        )}\n                    </Tab>\n                    <Tab\n                        eventKey=\"users\"\n                        title={<FormattedMessage id=\"view.instance.config.instanceusers\" />}>\n                        <WIPNotice />\n                    </Tab>\n                    <Tab\n                        eventKey=\"chatbots\"\n                        title={<FormattedMessage id=\"view.instance.config.chatbots\" />}>\n                        <WIPNotice />\n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\nInstanceConfig.contextType = UserContext;\nexport default withRouter(InstanceConfig);\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","//this should be a proper data store thing eventually but it will do 4 now\nimport Translation from \"../translations/Translation\";\n\nexport interface GlobalObjects {\n    translation?: Translation;\n    setupMode?: boolean;\n}\n\nexport const GlobalObjects: GlobalObjects = {};\n"],"sourceRoot":""}