{"version":3,"sources":["webpack:///./src/utils/globalObjects.ts","webpack:///./src/components/views/User/Edit.tsx"],"names":["GlobalObjects","UserEdit","props","context","createGroup","bind","changeGroup","user","Error","state","errors","loading","saving","permsadmin","permsinstance","tab","match","params","groups","group","Object","assign","users","createGroupName","newOAuthConnections","RouteData","selecteduserid","parseInt","id","selectedusertab","resolvePermissionSet","this","administrationRights","AdministrationRights","WriteUsers","ReadUsers","userid","EditOwnPassword","EditOwnOAuthConnections","prevProps","setState","response","UserClient","getUser","code","StatusCode","ERROR","addError","error","OK","loadUser","payload","loadGroups","canRead","UserGroupClient","listGroups","oAuthConnections","Array","from","loadEnums","entries","forEach","k","v","isNaN","key","toLowerCase","val","currentVal","prevState","bitflag","InstanceManagerRights","instanceManagerRights","push","Loading","text","className","map","err","index","ErrorAlert","onClose","prev","newarr","undefined","Fragment","canEdit","Alert","variant","systemIdentifier","Badge","enabled","name","Button","as","Link","to","AppRoutes","userlist","link","route","Tabs","activeKey","onSelect","newkey","setupMode","history","useredit","Tab","eventKey","title","Col","lg","Row","xs","md","toString","OverlayTrigger","overlay","Tooltip","Date","createdAt","toLocaleString","ref","triggerHandler","value","getTime","now","numeric","updateIntervalInSeconds","createdBy","canEditOwnPassword","passwd","onClick","editUser","renderPerms","renderGroups","renderOAuth","oAuthProviderInfos","serverInfo","currentOAuthConnections","keys","length","save","InternalError","ErrorCode","APP_FAIL","jsError","canEditOauth","canEditOwnOAuth","oAuthConnection","idx","InputGroup","Prepend","Text","Form","Control","custom","disabled","onChange","event","provider","target","idx2","txt","selected","FormControl","externalUserId","Append","hidden","filter","icon","faTrash","some","x","trim","every","htmlFor","Radio","defaultChecked","values","count","show","deleteGroup","faPlus","e","permissionSet","realID","substr","concat","enumname","permprefix","inputs","setBold","inputRef","fieldRef","defaultVal","current","checked","classList","add","remove","setAll","permname","refs","input","field","newset","updateGroup","response2","xl","perm","React","createRef","Check","inline","type","label","fixedWidth","Component","contextType","GeneralContext","withRouter"],"mappings":"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","file":"20.501f4aefa54e332665e3.js","sourcesContent":["//this should be a proper data store thing eventually but it will do 4 now\nimport Translation from \"../translations/Translation\";\n\nexport interface GlobalObjects {\n    translation?: Translation;\n    setupMode?: boolean;\n}\n\nexport const GlobalObjects: GlobalObjects = {};\n","import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons/faTrash\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { FormEvent } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Row from \"react-bootstrap/Row\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n    AdministrationRights,\n    InstanceManagerRights,\n    OAuthProvider\n} from \"../../../ApiClient/generatedcode/_enums\";\nimport {\n    OAuthConnection,\n    PermissionSet,\n    UserGroup,\n    UserGroupResponse,\n    UserResponse\n} from \"../../../ApiClient/generatedcode/schemas\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport UserGroupClient from \"../../../ApiClient/UserGroupClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { GlobalObjects } from \"../../../utils/globalObjects\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string; tab?: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    user?: UserResponse;\n    newOAuthConnections: OAuthConnection[];\n    loading: boolean;\n    saving: boolean;\n    permsadmin: { [key: string]: Permission };\n    permsinstance: { [key: string]: Permission };\n    tab: string;\n    groups: UserGroupResponse[];\n    createGroupName: string;\n}\n\ninterface Permission {\n    readonly bitflag: number;\n    readonly currentVal: boolean;\n}\n\nclass UserEdit extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n\n        this.createGroup = this.createGroup.bind(this);\n        this.changeGroup = this.changeGroup.bind(this);\n\n        if (!context.user) {\n            throw Error(\"UserEdit: this.context.user is null!\");\n        }\n\n        this.state = {\n            errors: [],\n            loading: true,\n            saving: false,\n            permsadmin: {},\n            permsinstance: {},\n            tab: props.match.params.tab || \"info\",\n            groups: context.user.group ? [Object.assign({ users: [] }, context.user.group)] : [],\n            createGroupName: \"\",\n            newOAuthConnections: []\n        };\n\n        RouteData.selecteduserid = parseInt(props.match.params.id);\n        RouteData.selectedusertab = props.match.params.tab;\n    }\n\n    private get canEdit() {\n        return (\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.WriteUsers\n        );\n    }\n\n    private get canRead() {\n        return !!(\n            resolvePermissionSet(this.context.user).administrationRights &\n            AdministrationRights.ReadUsers\n        );\n    }\n\n    private get canEditOwnPassword() {\n        const userid = parseInt(this.props.match.params.id);\n        return (\n            !!(\n                resolvePermissionSet(this.context.user).administrationRights &\n                AdministrationRights.EditOwnPassword\n            ) && this.context.user.id === userid\n        );\n    }\n\n    private get canEditOwnOAuth() {\n        const userid = parseInt(this.props.match.params.id);\n        return (\n            !!(\n                resolvePermissionSet(this.context.user).administrationRights &\n                AdministrationRights.EditOwnOAuthConnections\n            ) && this.context.user.id === userid\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (prevProps.match.params.tab !== this.props.match.params.tab) {\n            this.setState({\n                tab: this.props.match.params.tab || \"info\"\n            });\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const userid = parseInt(this.props.match.params.id);\n        const response = await UserClient.getUser(userid);\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                break;\n            }\n            case StatusCode.OK: {\n                this.loadUser(response.payload);\n                break;\n            }\n        }\n\n        await this.loadGroups();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async loadGroups() {\n        if (!this.canRead) return;\n        const groups = await UserGroupClient.listGroups();\n        if (groups.code === StatusCode.OK) {\n            this.setState({\n                groups: groups.payload\n            });\n        } else {\n            this.addError(groups.error);\n        }\n    }\n\n    private loadUser(user: UserResponse) {\n        this.setState({\n            user,\n            newOAuthConnections: user.oAuthConnections ? Array.from(user.oAuthConnections) : []\n        });\n        this.loadEnums();\n    }\n\n    private loadEnums(): void {\n        // noinspection DuplicatedCode\n        Object.entries(AdministrationRights).forEach(([k, v]) => {\n            /* enums are objects that are reverse mapped, for example, an enum with a = 1 and b = 2 would look like this:\n             * {\n             *   \"a\": 1,\n             *   \"b\": 2,\n             *   1: \"a\",\n             *   2: \"b\"\n             * }\n             * so we need to drop everything that doesnt resolve to a string because otherwise we end up with twice the values\n             */\n            if (!isNaN(parseInt(k))) return;\n\n            const key = k.toLowerCase();\n            const val = v as number;\n\n            //we dont care about nothing\n            if (key == \"none\") return;\n\n            const currentVal = !!(\n                resolvePermissionSet(this.state.user!).administrationRights & val\n            );\n            this.setState(prevState => {\n                return {\n                    permsadmin: {\n                        ...prevState.permsadmin,\n                        [key]: {\n                            currentVal: currentVal,\n                            bitflag: val\n                        }\n                    }\n                };\n            });\n        });\n        // noinspection DuplicatedCode\n        Object.entries(InstanceManagerRights).forEach(([k, v]) => {\n            if (!isNaN(parseInt(k))) return;\n\n            const key = k.toLowerCase();\n            const val = v as number;\n\n            //we dont care about nothing\n            if (key == \"none\") return;\n\n            const currentVal = !!(\n                resolvePermissionSet(this.state.user!).instanceManagerRights & val\n            );\n            this.setState(prevState => {\n                return {\n                    permsinstance: {\n                        ...prevState.permsinstance,\n                        [key]: {\n                            currentVal: currentVal,\n                            bitflag: val\n                        }\n                    }\n                };\n            });\n        });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.user.load\" />;\n        }\n        if (this.state.saving) {\n            return <Loading text=\"loading.user.save\" />;\n        }\n\n        // noinspection DuplicatedCode\n        const changetabs = (newkey: string | null) => {\n            if (!newkey) return;\n\n            RouteData.selectedusertab = newkey;\n            if (!GlobalObjects.setupMode) {\n                this.props.history.push(AppRoutes.useredit.link || AppRoutes.useredit.route);\n            }\n            this.setState({\n                tab: newkey\n            });\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.user ? (\n                    <React.Fragment>\n                        {!this.canEdit ? (\n                            <Alert className=\"clearfix\" variant=\"error\">\n                                <FormattedMessage id=\"view.user.edit.cantedit\" />\n                            </Alert>\n                        ) : (\n                            \"\"\n                        )}\n                        {this.state.user.systemIdentifier ? (\n                            <Badge variant=\"primary\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.system.short\" />\n                            </Badge>\n                        ) : (\n                            <Badge variant=\"primary\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.tgs\" />\n                            </Badge>\n                        )}\n                        {this.state.user.enabled ? (\n                            <Badge variant=\"success\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.enabled\" />\n                            </Badge>\n                        ) : (\n                            <Badge variant=\"danger\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.disabled\" />\n                            </Badge>\n                        )}\n                        {this.state.user.group ? (\n                            <Badge variant=\"warning\" className=\"mx-1\">\n                                <FormattedMessage id=\"generic.grouped\" />\n                            </Badge>\n                        ) : null}\n                        <h3 className=\"text-capitalize\">{this.state.user.name}</h3>\n                        <Button as={Link} to={AppRoutes.userlist.link || AppRoutes.userlist.route}>\n                            <FormattedMessage id=\"generic.goback\" />\n                        </Button>\n                        <Tabs\n                            activeKey={this.state.tab}\n                            onSelect={changetabs}\n                            id=\"test\"\n                            className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\">\n                            <Tab eventKey=\"info\" title={<FormattedMessage id=\"generic.info\" />}>\n                                <Col lg={5} className=\"text-center text-md-left mx-auto\">\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.userid\" />\n                                            </h5>\n                                        </Col>\n                                        <Col className=\"text-capitalize mb-2\">\n                                            {this.state.user.id}\n                                        </Col>\n                                    </Row>\n                                    {this.state.user.systemIdentifier ? (\n                                        <Row xs={1} md={2}>\n                                            <Col>\n                                                <h5 className=\"m-0\">\n                                                    <FormattedMessage id=\"generic.systemidentifier\" />\n                                                </h5>\n                                            </Col>\n                                            <Col className=\"mb-2 text-sm-break\">\n                                                {this.state.user.systemIdentifier}\n                                            </Col>\n                                        </Row>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.enabled\" />\n                                            </h5>\n                                        </Col>\n                                        <Col className=\"text-capitalize mb-2\">\n                                            {this.state.user.enabled.toString()}\n                                        </Col>\n                                    </Row>\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.created\" />\n                                            </h5>\n                                        </Col>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip id={`${this.state.user.name}-tooltip`}>\n                                                    {new Date(\n                                                        this.state.user.createdAt\n                                                    ).toLocaleString()}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <Col\n                                                    className=\"text-capitalize mb-2\"\n                                                    {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        <FormattedRelativeTime\n                                                            value={\n                                                                (new Date(\n                                                                    this.state.user!.createdAt\n                                                                ).getTime() -\n                                                                    Date.now()) /\n                                                                1000\n                                                            }\n                                                            numeric=\"auto\"\n                                                            updateIntervalInSeconds={1}\n                                                        />\n                                                    </span>\n                                                </Col>\n                                            )}\n                                        </OverlayTrigger>\n                                    </Row>\n                                    <Row xs={1} md={2}>\n                                        <Col>\n                                            <h5 className=\"m-0\">\n                                                <FormattedMessage id=\"generic.createdby\" />\n                                            </h5>\n                                        </Col>\n                                        <OverlayTrigger\n                                            overlay={\n                                                <Tooltip\n                                                    id={`${this.state.user.name}-tooltip-createdby`}>\n                                                    <FormattedMessage id=\"generic.userid\" />\n                                                    {this.state.user.createdBy.id}\n                                                </Tooltip>\n                                            }>\n                                            {({ ref, ...triggerHandler }) => (\n                                                <Col\n                                                    className=\"text-capitalize mb-2\"\n                                                    {...triggerHandler}>\n                                                    <span ref={ref as React.Ref<HTMLSpanElement>}>\n                                                        {this.state.user!.createdBy.name}\n                                                    </span>\n                                                </Col>\n                                            )}\n                                        </OverlayTrigger>\n                                    </Row>\n                                    <div className=\"text-center mt-3\">\n                                        {this.canEdit || this.canEditOwnPassword ? (\n                                            <Button\n                                                className=\"mr-2\"\n                                                as={Link}\n                                                to={\n                                                    (AppRoutes.passwd.link ||\n                                                        AppRoutes.passwd.route) +\n                                                    this.state.user.id.toString()\n                                                }>\n                                                <FormattedMessage id=\"routes.passwd\" />\n                                            </Button>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                        {this.canEdit ? (\n                                            <Button\n                                                variant={\n                                                    this.state.user.enabled ? \"danger\" : \"success\"\n                                                }\n                                                onClick={async () => {\n                                                    this.setState({\n                                                        saving: true\n                                                    });\n\n                                                    const response = await UserClient.editUser({\n                                                        enabled: !this.state.user!.enabled,\n                                                        id: this.state.user!.id\n                                                    });\n                                                    if (response.code == StatusCode.OK) {\n                                                        this.loadUser(response.payload);\n                                                    } else {\n                                                        this.addError(response.error);\n                                                    }\n\n                                                    this.setState({\n                                                        saving: false\n                                                    });\n                                                }}>\n                                                <FormattedMessage\n                                                    id={\n                                                        this.state.user.enabled\n                                                            ? \"generic.disable\"\n                                                            : \"generic.enable\"\n                                                    }\n                                                />\n                                            </Button>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </div>\n                                </Col>\n                            </Tab>\n                            <Tab\n                                eventKey=\"adminperms\"\n                                title={<FormattedMessage id=\"perms.admin\" />}>\n                                {this.renderPerms(\"permsadmin\", \"admin\")}\n                            </Tab>\n                            <Tab\n                                eventKey=\"instanceperms\"\n                                title={<FormattedMessage id=\"perms.instance\" />}>\n                                {this.renderPerms(\"permsinstance\", \"instance\")}\n                            </Tab>\n                            <Tab eventKey=\"group\" title={<FormattedMessage id=\"perms.group\" />}>\n                                {this.renderGroups()}\n                            </Tab>\n                            {this.renderOAuth()}\n                        </Tabs>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n            </div>\n        );\n    }\n\n    private renderOAuth(): React.ReactNode {\n        const oAuthProviderInfos = this.context.serverInfo.oAuthProviderInfos;\n        const currentOAuthConnections =\n            this.state.newOAuthConnections || this.state.user?.oAuthConnections;\n        if (\n            this.state.user?.name.toLowerCase() === \"admin\" || // admin user can't have OAuthConnections\n            currentOAuthConnections == null ||\n            !oAuthProviderInfos ||\n            !Object.keys(oAuthProviderInfos).length\n        )\n            return null;\n\n        const save = async () => {\n            this.setState({\n                saving: true\n            });\n\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                oAuthConnections: this.state.newOAuthConnections\n            });\n            if (response.code == StatusCode.OK) {\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n\n            this.setState({\n                saving: false\n            });\n        };\n\n        const canEditOauth = this.canEdit || this.canEditOwnOAuth;\n\n        return (\n            <Tab\n                eventKey=\"oauth\"\n                title={<FormattedMessage id=\"view.user.edit.oauth.connections\" />}>\n                <h3 className=\"mb-3\">\n                    <FormattedMessage id=\"view.user.edit.oauth.current\" />\n                </h3>\n                <div>\n                    {this.state.newOAuthConnections.map((oAuthConnection, idx) => (\n                        <div className=\"justify-content-center d-flex\" key={idx}>\n                            <InputGroup className=\"w-75 mb-1\">\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>\n                                        <span>\n                                            <FormattedMessage id=\"view.user.edit.oauth.provider\" />\n                                        </span>\n                                    </InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control\n                                    className=\"flex-grow-1 flex-md-grow-0 w-50 w-md-auto \"\n                                    as=\"select\"\n                                    custom\n                                    disabled={!canEditOauth}\n                                    onChange={event => {\n                                        const provider = event.target.value as OAuthProvider;\n                                        this.setState(prev => {\n                                            return {\n                                                newOAuthConnections: prev.newOAuthConnections.map(\n                                                    (val, idx2) => {\n                                                        if (idx2 !== idx) return val;\n                                                        return {\n                                                            ...val,\n                                                            provider: provider\n                                                        };\n                                                    }\n                                                )\n                                            };\n                                        });\n                                    }}>\n                                    {Object.keys(oAuthProviderInfos).map(key => {\n                                        return (\n                                            <FormattedMessage\n                                                key={key}\n                                                id={`view.user.edit.oauth.provider.${key.toLowerCase()}`}>\n                                                {txt => (\n                                                    <option\n                                                        value={key}\n                                                        selected={oAuthConnection.provider === key}>\n                                                        {txt}\n                                                    </option>\n                                                )}\n                                            </FormattedMessage>\n                                        );\n                                    })}\n                                </Form.Control>\n                                <InputGroup.Text className=\"rounded-0\">\n                                    <FormattedMessage id=\"view.user.edit.oauth.id\" />\n                                </InputGroup.Text>\n                                <FormControl\n                                    className=\"\"\n                                    value={oAuthConnection.externalUserId}\n                                    onChange={event => {\n                                        const externalUserId = event.target.value;\n                                        this.setState(prev => {\n                                            return {\n                                                newOAuthConnections: prev.newOAuthConnections.map(\n                                                    (val, idx2) => {\n                                                        if (idx2 !== idx) return val;\n                                                        return {\n                                                            ...val,\n                                                            externalUserId: externalUserId\n                                                        };\n                                                    }\n                                                )\n                                            };\n                                        });\n                                    }}\n                                    disabled={!canEditOauth}\n                                />\n                                <InputGroup.Append className=\"\">\n                                    <Button\n                                        variant=\"danger\"\n                                        className=\"text-darker\"\n                                        hidden={!canEditOauth}\n                                        onClick={() => {\n                                            this.setState(prev => {\n                                                return {\n                                                    newOAuthConnections: prev.newOAuthConnections.filter(\n                                                        (val, idx2) => idx !== idx2\n                                                    )\n                                                };\n                                            });\n                                        }}>\n                                        <div>\n                                            <FontAwesomeIcon icon={faTrash} />\n                                        </div>\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n                    ))}\n                </div>\n                {canEditOauth ? (\n                    <div className=\"text-center mt-3\">\n                        <Button\n                            className=\"mr-2\"\n                            onClick={() => {\n                                this.setState(prev => {\n                                    return {\n                                        newOAuthConnections: [\n                                            ...prev.newOAuthConnections,\n                                            {\n                                                provider: Object.keys(\n                                                    oAuthProviderInfos\n                                                )[0] as OAuthProvider,\n                                                externalUserId: \"\"\n                                            }\n                                        ]\n                                    };\n                                });\n                            }}>\n                            <FormattedMessage id=\"view.user.edit.oauth.add\" />\n                        </Button>\n                        <Button\n                            onClick={save}\n                            variant=\"success\"\n                            disabled={\n                                this.state.newOAuthConnections.some(\n                                    x => x.externalUserId.trim().length === 0\n                                ) ||\n                                //If all values match up, and the lenght is the same, there has been no change, disable the button\n                                (this.state.newOAuthConnections.every(\n                                    (val, idx) =>\n                                        val.externalUserId ===\n                                            (this.state.user?.oAuthConnections || [])[idx]\n                                                ?.externalUserId &&\n                                        val.provider ===\n                                            (this.state.user?.oAuthConnections || [])[idx]?.provider\n                                ) &&\n                                    this.state.newOAuthConnections.length ===\n                                        this.state.user?.oAuthConnections?.length)\n                            }>\n                            <FormattedMessage id=\"generic.savepage\" />\n                        </Button>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n            </Tab>\n        );\n    }\n\n    private renderGroups(): React.ReactNode {\n        //We can't use addError() here because that would trigger a rerender which would call this again and add another error and so on\n        if (!this.state.user || !this.state.groups) {\n            return (\n                <ErrorAlert\n                    error={\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(\"Assertion failed, user or group is null\")\n                        })\n                    }\n                />\n            );\n        }\n\n        return (\n            <div>\n                {!this.canRead ? (\n                    <Alert className=\"clearfix\" variant=\"error\">\n                        <FormattedMessage id=\"perms.group.cantlist\" />\n                    </Alert>\n                ) : null}\n                <h3 className=\"mb-3\">\n                    <FormattedMessage id=\"perms.group.current\" />\n                    {this.state.user.group ? (\n                        this.state.user.group.name\n                    ) : (\n                        <FormattedMessage id=\"perms.group.none\" />\n                    )}\n                </h3>\n                <div onChange={this.changeGroup}>\n                    <InputGroup\n                        className=\"justify-content-center mb-3\"\n                        as=\"label\"\n                        htmlFor={\n                            \"group_none\" /*notice the underscore, the normal groups use a dash, this prevents conflict with groups named \"none\"*/\n                        }>\n                        <InputGroup.Prepend>\n                            <InputGroup.Radio\n                                id={\"group_none\"}\n                                name=\"group\"\n                                defaultChecked={this.state.user.group?.id === undefined}\n                                disabled={!this.canEdit}\n                            />\n                        </InputGroup.Prepend>\n                        <InputGroup.Append className=\"w-40 overflow-auto\">\n                            <InputGroup.Text className=\"flex-fill\">\n                                <FormattedMessage id=\"perms.group.none\" />\n                            </InputGroup.Text>\n                        </InputGroup.Append>\n                    </InputGroup>\n                    {this.state.groups.map(group => {\n                        return (\n                            <InputGroup className=\"justify-content-center mb-1\" key={group.id}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Radio\n                                        id={\"group-\" + group.id.toString()}\n                                        name=\"group\"\n                                        defaultChecked={this.state.user!.group?.id === group.id}\n                                        disabled={!this.canEdit}\n                                    />\n                                </InputGroup.Prepend>\n                                <InputGroup.Append className=\"w-40 overflow-auto\">\n                                    <InputGroup.Text\n                                        className=\"flex-fill\"\n                                        as=\"label\"\n                                        htmlFor={\"group-\" + group.id.toString()}>\n                                        <span>{group.name}</span>\n                                        <div className=\"text-right ml-auto\">\n                                            <FormattedMessage\n                                                id=\"generic.numusers\"\n                                                values={{\n                                                    count: this.canRead\n                                                        ? group.users?.length\n                                                        : \"???\"\n                                                }}\n                                            />\n                                        </div>\n                                    </InputGroup.Text>\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`${group.id}-tooltip`}>\n                                                <FormattedMessage id=\"perms.group.delete.warning\" />\n                                            </Tooltip>\n                                        }\n                                        show={\n                                            (!group.users?.length || !this.canEdit) &&\n                                            group.id !== this.state.user!.group?.id\n                                                ? false\n                                                : undefined\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <Button\n                                                variant=\"danger\"\n                                                className=\"text-darker\"\n                                                disabled={\n                                                    !!group.users?.length ||\n                                                    !this.canEdit ||\n                                                    group.id === this.state.user!.group?.id\n                                                }\n                                                onClick={() => void this.deleteGroup(group.id)}\n                                                {...triggerHandler}>\n                                                <div ref={ref as React.Ref<HTMLDivElement>}>\n                                                    <FontAwesomeIcon icon={faTrash} />\n                                                </div>\n                                            </Button>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        );\n                    })}\n                </div>\n                {/*<hr />\n                    <h4 className=\"mt-3\">\n                        <FormattedMessage id=\"perms.group.create\" />\n                    </h4>*/}\n                <InputGroup className=\"justify-content-center mb-1 mt-5\">\n                    <InputGroup.Prepend>\n                        <Button\n                            variant=\"primary\"\n                            onClick={this.createGroup}\n                            disabled={!this.canEdit || !this.state.createGroupName.length}>\n                            <FontAwesomeIcon icon={faPlus} />\n                        </Button>\n                    </InputGroup.Prepend>\n                    <FormControl\n                        className=\"w-40 overflow-auto flex-grow-0\"\n                        value={this.state.createGroupName}\n                        onChange={event => {\n                            this.setState({\n                                createGroupName: event.target.value\n                            });\n                        }}\n                        disabled={!this.canEdit}\n                    />\n                </InputGroup>\n            </div>\n        );\n    }\n\n    private async changeGroup(e: FormEvent<HTMLDivElement>) {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"this.state.user is null in changegroup\")\n                })\n            );\n            return;\n        }\n\n        this.setState({\n            loading: true\n        });\n        const id = (e.target as HTMLInputElement).id;\n        if (id === \"group_none\") {\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                permissionSet: resolvePermissionSet(this.state.user)\n            });\n            if (response.code === StatusCode.OK) {\n                await this.loadGroups();\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        } else {\n            const realID = parseInt(id.substr(6));\n            const response = await UserClient.editUser({\n                id: this.state.user.id,\n                group: {\n                    id: realID\n                } as UserGroup\n            });\n            if (response.code === StatusCode.OK) {\n                await this.loadGroups();\n                this.loadUser(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteGroup(id: number) {\n        this.setState({\n            loading: true\n        });\n        const response = await UserGroupClient.deleteGroup(id);\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    groups: prev.groups.filter(group => group.id !== id)\n                };\n            });\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async createGroup() {\n        this.setState({\n            loading: true\n        });\n        const response = await UserGroupClient.createGroup(\n            this.state.createGroupName,\n            resolvePermissionSet(this.state.user!)\n        );\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    groups: prev.groups.concat([response.payload])\n                };\n            });\n        } else {\n            this.addError(response.error);\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    private renderPerms(\n        enumname: \"permsadmin\" | \"permsinstance\",\n        permprefix: string\n    ): React.ReactNode {\n        const inputs: Record<\n            string,\n            { input: React.RefObject<HTMLInputElement>; field: React.RefObject<HTMLDivElement> }\n        > = {};\n        const setBold = (\n            inputRef: React.RefObject<HTMLInputElement>,\n            fieldRef: React.RefObject<HTMLDivElement>,\n            defaultVal: boolean\n        ) => {\n            if (!inputRef.current || !fieldRef.current) return;\n            if (inputRef.current.checked !== defaultVal) {\n                fieldRef.current.classList.add(\"font-weight-bold\");\n            } else {\n                fieldRef.current.classList.remove(\"font-weight-bold\");\n            }\n        };\n        const setAll = (val: boolean): (() => void) => {\n            return () => {\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) return;\n\n                    refs.input.current.checked = val;\n                    setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                }\n            };\n        };\n        const resetAll = () => {\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                refs.input.current.checked = this.state[enumname][permname].currentVal;\n                setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n            }\n        };\n        const save = async () => {\n            this.setState({\n                saving: true\n            });\n            let bitflag = 0;\n\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                bitflag += refs.input.current.checked ? this.state[enumname][permname].bitflag : 0;\n            }\n\n            if (!this.state.user) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            if (this.state.user.group) {\n                const newset = Object.assign(\n                    Object.assign({}, this.state.user.group.permissionSet),\n                    {\n                        [enumname == \"permsadmin\"\n                            ? \"AdministrationRights\"\n                            : \"InstanceManagerRights\"]: bitflag\n                    } as\n                        | { AdministrationRights: AdministrationRights }\n                        | { InstanceManagerRights: InstanceManagerRights }\n                ) as PermissionSet;\n                const response = await UserGroupClient.updateGroup({\n                    id: this.state.user.group.id,\n                    permissionSet: newset\n                });\n                if (response.code == StatusCode.OK) {\n                    const response2 = await UserClient.getUser(this.state.user.id);\n                    if (response2.code == StatusCode.OK) {\n                        this.loadUser(response2.payload);\n                    } else {\n                        this.addError(response2.error);\n                    }\n                } else {\n                    this.addError(response.error);\n                }\n            } else {\n                const newset = Object.assign(Object.assign({}, this.state.user.permissionSet), {\n                    [enumname == \"permsadmin\"\n                        ? \"AdministrationRights\"\n                        : \"InstanceManagerRights\"]: bitflag\n                } as { AdministrationRights: AdministrationRights } | { InstanceManagerRights: InstanceManagerRights });\n                const response = await UserClient.editUser({\n                    id: this.state.user.id,\n                    permissionSet: newset\n                });\n                if (response.code == StatusCode.OK) {\n                    this.loadUser(response.payload);\n                } else {\n                    this.addError(response.error);\n                }\n            }\n\n            this.setState({\n                saving: false\n            });\n        };\n        return (\n            <React.Fragment>\n                {this.state.user?.group ? (\n                    <Alert variant=\"warning\">\n                        <FormattedMessage\n                            id=\"perms.group.warning\"\n                            values={{\n                                group: `${this.state.user.group.name} (${this.state.user.group.id})`\n                            }}\n                        />\n                    </Alert>\n                ) : null}\n                {this.canEdit ? (\n                    <React.Fragment>\n                        <h5>\n                            <FormattedMessage id=\"generic.setall\" />\n                        </h5>\n                        <Button onClick={setAll(true)}>\n                            <FormattedMessage id=\"generic.true\" />\n                        </Button>{\" \"}\n                        <Button onClick={setAll(false)}>\n                            <FormattedMessage id=\"generic.false\" />\n                        </Button>{\" \"}\n                        <Button onClick={resetAll}>\n                            <FormattedMessage id=\"generic.reset\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n                <Col md={8} lg={7} xl={6} className=\"mx-auto\">\n                    <hr />\n                    {Object.entries(this.state[enumname]).map(([perm, value]) => {\n                        const inputRef = React.createRef<HTMLInputElement>();\n                        const fieldRef = React.createRef<HTMLDivElement>();\n                        inputs[perm] = { input: inputRef, field: fieldRef };\n                        return (\n                            <InputGroup key={perm} as=\"label\" htmlFor={perm} className=\"mb-0\">\n                                <InputGroup.Prepend className=\"flex-grow-1 overflow-auto\">\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`perms.${permprefix}.${perm}.desc`}>\n                                                <FormattedMessage\n                                                    id={`perms.${permprefix}.${perm}.desc`}\n                                                />\n                                            </Tooltip>\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"flex-fill\" ref={fieldRef}>\n                                                <div {...triggerHandler}>\n                                                    <FormattedMessage\n                                                        id={`perms.${permprefix}.${perm}`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-auto d-flex align-items-center\">\n                                                    <Form.Check\n                                                        inline\n                                                        type=\"switch\"\n                                                        custom\n                                                        id={perm}\n                                                        className=\"d-flex justify-content-center align-content-center mx-2\"\n                                                        label=\"\"\n                                                        ref={inputRef}\n                                                        disabled={!this.canEdit}\n                                                        defaultChecked={value.currentVal}\n                                                        onChange={() => {\n                                                            setBold(\n                                                                inputRef,\n                                                                fieldRef,\n                                                                value.currentVal\n                                                            );\n                                                        }}\n                                                    />\n                                                    <div\n                                                        {...triggerHandler}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                </div>\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Prepend>\n                            </InputGroup>\n                        );\n                    })}\n                    <hr />\n                </Col>\n                {this.canEdit ? (\n                    <Button onClick={save}>\n                        <FormattedMessage id=\"generic.savepage\" />\n                    </Button>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUserEdit.contextType = GeneralContext;\nexport default withRouter(UserEdit);\n"],"sourceRoot":""}