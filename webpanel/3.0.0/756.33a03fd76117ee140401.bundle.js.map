{"version":3,"file":"756.33a03fd76117ee140401.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/DreamDaemonClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    DreamDaemonResponse,\n    ErrorMessageResponse,\n    JobResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type getWatchdogStatusErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type updateWatchdogStatusErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport default new (class DreamDaemonClient extends ApiClient {\n    public async getWatchdogStatus(\n        instance: number\n    ): Promise<InternalStatus<DreamDaemonResponse, getWatchdogStatusErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamDaemonResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateWatchdogStatus(\n        instance: number,\n        newSettings: DreamDaemonResponse\n    ): Promise<InternalStatus<DreamDaemonResponse, updateWatchdogStatusErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerUpdate(\n                newSettings,\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamDaemonResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async startWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerCreate({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async stopWatchdog(instance: number): Promise<InternalStatus<null, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerDelete({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async restartWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerRestart({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async dumpWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerCreateDump({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["getWatchdogStatus","instance","ServerClient","headers","Instance","toString","response","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","updateWatchdogStatus","newSettings","startWatchdog","stopWatchdog","restartWatchdog","dumpWatchdog","ApiClient"],"sourceRoot":""}