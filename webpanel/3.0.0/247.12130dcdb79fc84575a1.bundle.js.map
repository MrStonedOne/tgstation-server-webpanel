{"version":3,"file":"247.12130dcdb79fc84575a1.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Repository.tsx","webpack://tgstation-server-control-panel/./src/components/utils/TestMergeRow.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon=\"info\" />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport {\n    ErrorCode as TGSErrorCode,\n    JobResponse,\n    RemoteGitProvider,\n    RepositoryResponse,\n    RepositoryRights,\n    RepositoryUpdateRequest,\n    TestMerge,\n    TestMergeParameters\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport JobsClient from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport RepositoryClient from \"../../../../ApiClient/RepositoryClient\";\nimport configOptions from \"../../../../ApiClient/util/config\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient, { PullRequest } from \"../../../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../../../utils/misc\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\nimport TestMergeRow from \"../../../utils/TestMergeRow\";\n\nfunction displayRepoInformation(repositoryInfo: RepositoryResponse | false | null) {\n    if (!repositoryInfo) return <GenericAlert title=\"view.instance.repo.norepoinfo\" />;\n\n    return (\n        <table className=\"mx-auto text-left\">\n            <tbody>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.origin\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.origin}</td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.owner\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.remoteRepositoryOwner}</td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.name\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.remoteRepositoryName}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nconst enum PRState {\n    reapply = \"reapply\",\n    added = \"added\",\n    removed = \"removed\",\n    updated = \"updated\",\n    rename = \"renamed\"\n}\n\nexport default function Repository(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [repositoryInfo, setRepositoryInfo] = useState<RepositoryResponse | null | false>(null);\n    const [isCloning, setIsCloning] = useState(false);\n    const [isUnableHookClone, setIsUnableHookClone] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [PRs, setPRs] = useState<PullRequest[] | null>(null);\n    const [desiredState, setDesiredState] = useState(\n        new Map<number, [current: boolean, sha: string, comment: string] | false>()\n    );\n    const [updateRepo, setUpdateRepo] = useState(false);\n    const [gitlabReset, setGitlabReset] = useState(false);\n    const [manualPRs, setManualPRs] = useState<Set<number>>(new Set());\n    const [manualPR, setManualPR] = useState(0);\n    const [lastManualPR, setLastManualPR] = useState(0);\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void fetchRepositoryInfo(undefined, true), [instanceEditContext.instance.id]);\n    useEffect(() => {}, [repositoryInfo]);\n\n    function reloadPRs(repositoryInfo: RepositoryResponse, resetDesiredState?: boolean) {\n        if (\n            repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub &&\n            repositoryInfo.remoteRepositoryName &&\n            repositoryInfo.remoteRepositoryOwner\n        ) {\n            GithubClient.getPRs({\n                repo: repositoryInfo.remoteRepositoryName,\n                owner: repositoryInfo.remoteRepositoryOwner,\n                wantedPRs: repositoryInfo.revisionInformation?.activeTestMerges.map(tm => tm.number)\n            })\n                .then(prs => {\n                    if (prs.code === StatusCode.ERROR) {\n                        addError(errorState, prs.error);\n                    } else {\n                        setPRs(prs.payload);\n                        if (resetDesiredState) reloadDesiredState(repositoryInfo, true);\n                    }\n                })\n                .catch(e => {\n                    addError(\n                        errorState,\n                        new InternalError(ErrorCode.APP_FAIL, { jsError: e as Error })\n                    );\n                });\n        }\n    }\n\n    function reloadDesiredState(repoinfo: RepositoryResponse | false | null, reset?: boolean) {\n        if (reset) {\n            setUpdateRepo(false);\n            setGitlabReset(false);\n            setManualPRs(new Set());\n        }\n\n        if (!repoinfo) return;\n\n        setDesiredState(desiredState => {\n            const newDesiredState = new Map(!reset ? desiredState : []);\n            repoinfo.revisionInformation?.activeTestMerges.forEach(pr => {\n                const currentDesiredState = newDesiredState.get(pr.number);\n                if (!reset) {\n                    //We want the PR gone, don't retestmerge it\n                    if (currentDesiredState === false) return;\n                    //We want the PR updated to a specific commit, don't mess with it\n                    if (currentDesiredState && !currentDesiredState[0]) return;\n                }\n                newDesiredState.set(pr.number, [true, pr.targetCommitSha, pr.comment ?? \"\"]);\n            });\n            return newDesiredState;\n        });\n    }\n\n    async function fetchRepositoryInfo(cloneJob?: JobResponse, resetDesiredState?: boolean) {\n        if (!hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read)) {\n            setIsLoading(false);\n            setIsCloning(false);\n            reloadDesiredState(false, resetDesiredState);\n            return setRepositoryInfo(false);\n        }\n\n        const response = await RepositoryClient.getRepository(instanceEditContext.instance.id);\n\n        setIsCloning(false);\n        if (response.code === StatusCode.ERROR) {\n            if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoCloning\n            ) {\n                setIsUnableHookClone(false);\n                setIsCloning(true);\n                if (cloneJob) {\n                    JobsController.registerCallback(cloneJob.id, fetchRepositoryInfo);\n                } else {\n                    const response2 = await JobsClient.listActiveJobs(\n                        instanceEditContext.instance.id,\n                        {\n                            page: 1,\n                            pageSize: 100\n                        }\n                    );\n                    if (response2.code === StatusCode.OK) {\n                        const cloneJob = response2.payload.content\n                            .sort((a, b) => b.id - a.id)\n                            .find(\n                                job =>\n                                    job.description.includes(\"Clone\") &&\n                                    job.description.includes(\"repository\")\n                            );\n                        if (cloneJob) {\n                            JobsController.registerCallback(cloneJob.id, fetchRepositoryInfo);\n                        } else {\n                            setIsUnableHookClone(true);\n                        }\n                    } else {\n                        setIsUnableHookClone(true);\n                    }\n                }\n            } else {\n                addError(errorState, response.error);\n            }\n        } else {\n            reloadPRs(response.payload);\n            //response.payload.remoteGitProvider = RemoteGitProvider.GitLab;\n            setRepositoryInfo(response.payload);\n            reloadDesiredState(response.payload, resetDesiredState);\n        }\n        setIsLoading(false);\n    }\n\n    if (isCloning) {\n        return (\n            <>\n                {isUnableHookClone ? (\n                    <GenericAlert title=\"view.instance.repo.canthookclone\" />\n                ) : null}\n                <Loading text=\"loading.repo.cloning\" />\n            </>\n        );\n    }\n\n    if (isLoading) {\n        return <Loading />;\n    }\n\n    const cloneFields = {\n        origin: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.url\"\n        },\n        reference: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.ref\",\n            defaultValue: \"main\"\n        },\n        accessUser: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.gituser\",\n            defaultValue: \"\"\n        },\n        accessToken: {\n            type: FieldType.String as FieldType.Password,\n            name: \"fields.instance.repository.gitpassword\",\n            defaultValue: \"\"\n        },\n        updateSubmodules: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.enablesubmodules\",\n            defaultValue: true\n        }\n    };\n\n    const editFields = {\n        originCheckoutSha: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.origincheckoutsha\",\n            disabled: true,\n            defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.originCommitSha : \"\",\n            tooltip: \"fields.instance.repository.origincheckoutsha.desc\"\n        },\n        checkoutSha: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.checkoutsha\",\n            defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.commitSha : \"\",\n            tooltip: \"fields.instance.repository.checkoutsha.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.SetSha\n            )\n        },\n        reference: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.reference\",\n            defaultValue: repositoryInfo ? repositoryInfo.reference : \"\",\n            tooltip: \"fields.instance.repository.reference.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.SetReference\n            )\n        },\n        committerName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.committerName\",\n            defaultValue: repositoryInfo ? repositoryInfo.committerName : \"\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCommitter\n            )\n        },\n        committerEmail: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.committerEmail\",\n            defaultValue: repositoryInfo ? repositoryInfo.committerEmail : \"\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCommitter\n            )\n        },\n        accessUser: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.accessUser\",\n            defaultValue: repositoryInfo ? repositoryInfo.accessUser : \"\",\n            tooltip: \"fields.instance.repository.accessUser.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        accessToken: {\n            type: FieldType.Password as FieldType.Password,\n            name: \"fields.instance.repository.accessToken\",\n            tooltip: \"fields.instance.repository.accessToken.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        clearAccessToken: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.clearAccessToken\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        pushTestMergeCommits: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.pushTestMergeCommits\",\n            defaultValue: repositoryInfo ? repositoryInfo.pushTestMergeCommits : false,\n            tooltip: \"fields.instance.repository.pushTestMergeCommits.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        createGitHubDeployments: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.createGitHubDeployments\",\n            defaultValue: repositoryInfo ? repositoryInfo.createGitHubDeployments : false,\n            tooltip: \"fields.instance.repository.createGitHubDeployments.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        showTestMergeCommitters: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.showTestMergeCommitters\",\n            defaultValue: repositoryInfo ? repositoryInfo.showTestMergeCommitters : false,\n            tooltip: \"fields.instance.repository.showTestMergeCommitters.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        autoUpdatesKeepTestMerges: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.autoUpdatesKeepTestMerges\",\n            defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesKeepTestMerges : false,\n            tooltip: \"fields.instance.repository.autoUpdatesKeepTestMerges.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeAutoUpdateSettings\n            )\n        },\n        autoUpdatesSynchronize: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.autoUpdatesSynchronize\",\n            defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesSynchronize : false,\n            tooltip: \"fields.instance.repository.autoUpdatesSynchronize.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeAutoUpdateSettings\n            )\n        },\n        postTestMergeComment: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.postTestMergeComment\",\n            defaultValue: repositoryInfo ? repositoryInfo.postTestMergeComment : false,\n            tooltip: \"fields.instance.repository.postTestMergeComment.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        updateSubmodules: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.updateSubmodules\",\n            defaultValue: repositoryInfo ? repositoryInfo.updateSubmodules : false,\n            tooltip: \"fields.instance.repository.updateSubmodules.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeSubmoduleUpdate\n            )\n        }\n    };\n\n    // https://github.com/yogstation13/yogstation.git\n    // https://github.com/alexkar598/dmapitest.git\n\n    //positive if a > b\n\n    const testmergedPRs = new Map<number, TestMerge>();\n    if (repositoryInfo) {\n        repositoryInfo.revisionInformation?.activeTestMerges.forEach(pr =>\n            testmergedPRs.set(pr.number, pr)\n        );\n    }\n    const sortedPRs =\n        PRs?.sort((a, b) => {\n            // @ts-expect-error suck my dick ts, xoring booleans is completly valid\n            if (testmergedPRs.has(a.number) ^ testmergedPRs.has(b.number)) {\n                return testmergedPRs.has(a.number) ? -1 : 1;\n            }\n            // @ts-expect-error suck my dick ts, xoring booleans is completly valid\n            if (a.testmergelabel ^ b.testmergelabel) {\n                return a.testmergelabel ? -1 : 1;\n            }\n            return a.number - b.number;\n        }) ?? [];\n    const filteredPendingActions = sortedPRs\n        .map(pr => {\n            const desiredPRState = desiredState.get(pr.number);\n            const tmInfo = !repositoryInfo\n                ? undefined\n                : repositoryInfo?.revisionInformation?.activeTestMerges.find(\n                      activePR => activePR.number === pr.number\n                  );\n\n            if (desiredPRState) {\n                if (!tmInfo) {\n                    return [PRState.added, pr];\n                } else if (tmInfo.targetCommitSha !== desiredPRState[1]) {\n                    return [PRState.updated, pr];\n                } else if ((tmInfo.comment ?? \"\") !== desiredPRState[2]) {\n                    return [PRState.rename, pr];\n                } else {\n                    return [PRState.reapply, pr];\n                }\n            }\n            if (desiredState.get(pr.number) === false) {\n                if (!tmInfo) return null;\n\n                return [PRState.removed, pr];\n            }\n            return null;\n        })\n        .filter(value => value !== null) as [PRState, PullRequest][];\n    const sortedPendingActions = filteredPendingActions.sort((a, b) => {\n        const order = [PRState.reapply, PRState.removed, PRState.added, PRState.updated];\n        for (const state of order) {\n            if (\n                // @ts-expect-error again, ts doesn't want people to use xor on booleans, and I disagree\n                (a[0] === state) ^\n                (b[0] === state)\n            ) {\n                return a[0] === state ? -1 : 1;\n            }\n        }\n        return 0;\n    });\n    const noBranch = !repositoryInfo ? false : repositoryInfo.reference === \"(no branch)\";\n    const forceReset = filteredPendingActions.some(\n        action => action[0] != PRState.added && action[0] != PRState.reapply\n    );\n    //PRs we haven't touched, only used to display prs to reapply after reset\n    const noPendingChanges =\n        filteredPendingActions.filter(([state]) => state !== PRState.reapply).length === 0 &&\n        !forceReset &&\n        !updateRepo &&\n        !manualPRs.size;\n\n    async function applyTestmerges() {\n        const editOptions: RepositoryUpdateRequest = {};\n        if (repositoryInfo && noBranch) {\n            editOptions.checkoutSha = repositoryInfo.revisionInformation?.originCommitSha;\n        } else if (repositoryInfo && (forceReset || gitlabReset)) {\n            editOptions.updateFromOrigin = true;\n            editOptions.reference = repositoryInfo?.reference;\n        } else if (updateRepo) {\n            editOptions.updateFromOrigin = true;\n        }\n\n        if (repositoryInfo && repositoryInfo?.remoteGitProvider === RemoteGitProvider.GitHub) {\n            const testMergeArray: TestMergeParameters[] = [];\n            [...desiredState.entries()].forEach(([number, prDesiredState]) => {\n                if (!prDesiredState) return;\n                const [current, commit, comment] = prDesiredState;\n                //If we aren't resetting, ignore PRs we didn't touch\n                console.log(current, forceReset, noBranch, current && !(forceReset || noBranch));\n                if (current && !(forceReset || noBranch)) return;\n\n                testMergeArray.push({\n                    number: number,\n                    targetCommitSha: commit,\n                    comment\n                });\n            });\n            if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n        }\n        const testMergeArray = editOptions.newTestMerges ?? [];\n        manualPRs.forEach(pr =>\n            testMergeArray.push({\n                number: pr\n            })\n        );\n        if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n\n        setIsLoading(true);\n        const response = await RepositoryClient.editRepository(\n            instanceEditContext.instance.id,\n            editOptions\n        );\n        setIsLoading(false);\n        if (response.code === StatusCode.OK) {\n            if (response.payload.activeJob) {\n                setIsLoading(true);\n                JobsController.fastmode = 5;\n                JobsController.registerCallback(response.payload.activeJob.id, job => {\n                    return fetchRepositoryInfo(\n                        job,\n                        job.errorCode === undefined && job.exceptionDetails === undefined\n                    );\n                });\n                JobsController.registerJob(\n                    response.payload.activeJob,\n                    instanceEditContext.instance.id\n                );\n                JobsController.restartLoop();\n            } else {\n                await fetchRepositoryInfo();\n            }\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canUpdate = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.UpdateBranch\n    );\n    const canReset =\n        hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n        hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.UpdateBranch);\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ repositoryInfo, PRs }} />\n            {displayErrors(errorState)}\n            {/*Just like... hope its cloned if you don't have read access*/}\n            {repositoryInfo && !repositoryInfo.origin ? (\n                <>\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.clone\" />\n                    </h3>\n                    <InputForm\n                        fields={cloneFields}\n                        onSave={async result => {\n                            const response = await RepositoryClient.cloneRepository(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.OK) {\n                                await fetchRepositoryInfo(response.payload.activeJob ?? undefined);\n                                JobsController.restartLoop();\n                            } else {\n                                addError(errorState, response.error);\n                            }\n                        }}\n                        includeAll\n                    />\n                </>\n            ) : (\n                <>\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.repoinfo\" />\n                    </h3>\n                    {displayRepoInformation(repositoryInfo)}\n                    <hr />\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.reposettings\" />\n                    </h3>\n                    <InputForm\n                        fields={editFields}\n                        onSave={async _result => {\n                            const { clearAccessToken, ...result } = _result;\n                            if (clearAccessToken) {\n                                result.accessUser = \"\";\n                                result.accessToken = \"\";\n                            }\n\n                            setIsLoading(true);\n                            const response = await RepositoryClient.editRepository(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            setIsLoading(false);\n                            if (response.code === StatusCode.OK) {\n                                if (response.payload.activeJob) {\n                                    setIsLoading(true);\n                                    JobsController.fastmode = 5;\n                                    JobsController.registerCallback(\n                                        response.payload.activeJob.id,\n                                        fetchRepositoryInfo\n                                    );\n                                    JobsController.registerJob(\n                                        response.payload.activeJob,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.restartLoop();\n                                } else {\n                                    await fetchRepositoryInfo();\n                                }\n                            } else {\n                                addError(errorState, response.error);\n                            }\n                        }}\n                    />\n                    <hr />\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.testmerges\" />\n                    </h3>\n                    {repositoryInfo &&\n                    repositoryInfo.remoteGitProvider == RemoteGitProvider.Unknown ? (\n                        <GenericAlert title=\"view.instance.repo.testmerges.badprovider\" />\n                    ) : repositoryInfo &&\n                      repositoryInfo.remoteGitProvider == RemoteGitProvider.GitHub &&\n                      !PRs ? (\n                        <Loading text=\"loading.repo.prs\" />\n                    ) : (\n                        <div className=\"mx-5\">\n                            <Card className=\"mb-5\">\n                                <Card.Header>\n                                    <FormattedMessage id=\"view.instance.repo.pending.title\" />\n                                </Card.Header>\n                                <Card.Body className=\"text-left\">\n                                    <ul>\n                                        {noPendingChanges ? (\n                                            <li className=\"font-weight-lighter font-italic\">\n                                                <FormattedMessage id=\"view.instance.repo.pending.none\" />\n                                            </li>\n                                        ) : (\n                                            <>\n                                                {repositoryInfo && noBranch ? (\n                                                    <li>\n                                                        <FormattedMessage\n                                                            id=\"view.instance.repo.pending.reset.nobranch\"\n                                                            values={{\n                                                                commit: repositoryInfo.revisionInformation?.originCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )\n                                                            }}\n                                                        />\n                                                    </li>\n                                                ) : repositoryInfo &&\n                                                  (forceReset || gitlabReset) ? (\n                                                    <li>\n                                                        <FormattedMessage id=\"view.instance.repo.pending.reset\" />\n                                                    </li>\n                                                ) : updateRepo ? (\n                                                    <li>\n                                                        <FormattedMessage id=\"view.instance.repo.pending.update\" />\n                                                    </li>\n                                                ) : null}\n                                                {repositoryInfo &&\n                                                repositoryInfo.remoteGitProvider ===\n                                                    RemoteGitProvider.GitHub\n                                                    ? sortedPendingActions.map(([state, pr]) => {\n                                                          const prDesiredState = desiredState.get(\n                                                              pr.number\n                                                          );\n\n                                                          if (\n                                                              state === PRState.reapply &&\n                                                              !(forceReset || noBranch)\n                                                          )\n                                                              return null;\n\n                                                          const targetCommit = prDesiredState\n                                                              ? prDesiredState[1]\n                                                              : null;\n\n                                                          return (\n                                                              <li key={pr.number}>\n                                                                  <FormattedMessage\n                                                                      id={`view.instance.repo.pending.${state}`}\n                                                                      values={{\n                                                                          number: pr.number,\n                                                                          commit: targetCommit?.substring(\n                                                                              0,\n                                                                              7\n                                                                          ),\n                                                                          title: pr.title\n                                                                      }}\n                                                                  />\n                                                              </li>\n                                                          );\n                                                      })\n                                                    : null}\n                                                {[...manualPRs.values()].map(pr => (\n                                                    <li key={pr}>\n                                                        <FormattedMessage\n                                                            id={`view.instance.repo.pending.added.manual`}\n                                                            values={{\n                                                                number: pr\n                                                            }}\n                                                        />\n                                                    </li>\n                                                ))}\n                                            </>\n                                        )}\n                                    </ul>\n                                    <InputField\n                                        name=\"view.instance.repo.update\"\n                                        tooltip=\"view.instance.repo.update.desc\"\n                                        type={FieldType.Boolean}\n                                        defaultValue={\n                                            gitlabReset\n                                                ? true\n                                                : noBranch\n                                                ? false\n                                                : forceReset\n                                                ? true\n                                                : updateRepo\n                                        }\n                                        disabled={\n                                            forceReset || noBranch || gitlabReset || !canUpdate\n                                        }\n                                        onChange={newVal => setUpdateRepo(newVal)}\n                                    />\n                                    {repositoryInfo &&\n                                    repositoryInfo.remoteGitProvider ===\n                                        RemoteGitProvider.GitLab ? (\n                                        <InputField\n                                            name=\"view.instance.repo.reset\"\n                                            tooltip=\"view.instance.repo.reset.desc\"\n                                            type={FieldType.Boolean}\n                                            defaultValue={noBranch ? false : gitlabReset}\n                                            disabled={noBranch || !canReset}\n                                            onChange={newVal => setGitlabReset(newVal)}\n                                        />\n                                    ) : null}\n                                    {(configOptions.manualpr.value as boolean) ||\n                                    !repositoryInfo ||\n                                    repositoryInfo.remoteGitProvider ===\n                                        RemoteGitProvider.GitLab ? (\n                                        <div className=\"d-flex mt-5\">\n                                            <InputField\n                                                name=\"view.instance.repo.manual\"\n                                                tooltip=\"view.instance.repo.manual.desc\"\n                                                type={FieldType.Number}\n                                                min={0}\n                                                defaultValue={lastManualPR}\n                                                onChange={newPR => setManualPR(newPR)}\n                                                disabled={!canAdd}\n                                            />\n                                            <SimpleToolTip\n                                                tooltipid=\"generic.no_perm\"\n                                                show={canAdd ? false : undefined}>\n                                                <Button\n                                                    className=\"nowrap ml-3\"\n                                                    disabled={manualPR === lastManualPR || !canAdd}\n                                                    onClick={() => {\n                                                        setManualPRs(\n                                                            prevState =>\n                                                                new Set([\n                                                                    ...prevState.values(),\n                                                                    manualPR\n                                                                ])\n                                                        );\n                                                        setLastManualPR(manualPR);\n                                                    }}>\n                                                    <FormattedMessage id=\"view.instance.repo.addmanual\" />\n                                                </Button>\n                                            </SimpleToolTip>\n                                        </div>\n                                    ) : null}\n                                </Card.Body>\n                                <Card.Footer>\n                                    <Button\n                                        variant=\"danger\"\n                                        className=\"mx-2\"\n                                        disabled={noPendingChanges}\n                                        onClick={() => reloadDesiredState(repositoryInfo, true)}>\n                                        <FormattedMessage id=\"generic.reset\" />\n                                    </Button>\n                                    <Button\n                                        className=\"mx-2\"\n                                        disabled={noPendingChanges}\n                                        onClick={applyTestmerges}>\n                                        <FormattedMessage id=\"generic.commit\" />\n                                    </Button>\n                                </Card.Footer>\n                            </Card>\n                            {repositoryInfo === false ? (\n                                <GenericAlert title=\"view.instance.repo.noautomerge\" />\n                            ) : repositoryInfo &&\n                              repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub ? (\n                                <Table variant=\"dark\" striped hover className=\"text-left\">\n                                    <tbody>\n                                        {sortedPRs.map(pr => (\n                                            <TestMergeRow\n                                                key={pr.number}\n                                                testmergeinfo={testmergedPRs.get(pr.number)}\n                                                pr={pr}\n                                                repoInfo={repositoryInfo}\n                                                finalState={\n                                                    desiredState.get(pr.number)\n                                                        ? ((desiredState.get(pr.number) as [\n                                                              boolean,\n                                                              string,\n                                                              string\n                                                          ]).slice(1) as [string, string])\n                                                        : false\n                                                }\n                                                onRemove={() =>\n                                                    setDesiredState(desiredState =>\n                                                        new Map(desiredState).set(pr.number, false)\n                                                    )\n                                                }\n                                                onSelectCommit={(commit, comment) =>\n                                                    setDesiredState(desiredState =>\n                                                        new Map(desiredState).set(pr.number, [\n                                                            false,\n                                                            commit,\n                                                            comment\n                                                        ])\n                                                    )\n                                                }\n                                                onError={error => addError(errorState, error)}\n                                            />\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            ) : null}\n                        </div>\n                    )}\n                    <hr />\n                    <h4>\n                        <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                    </h4>\n                    <span>\n                        <FormattedMessage id=\"view.instance.repo.delete.desc\" />\n                    </span>\n                    <br />\n                    <Button\n                        variant=\"danger\"\n                        className=\"mt-2\"\n                        onClick={() => setShowDeleteModal(true)}>\n                        <FormattedMessage id=\"view.instance.repo.delete\" />\n                    </Button>\n                    <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)} centered>\n                        <Modal.Header closeButton>\n                            <Modal.Title>\n                                <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <span>\n                                <FormattedMessage id=\"generic.areyousure\" />\n                            </span>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button onClick={() => setShowDeleteModal(false)}>\n                                <FormattedMessage id=\"generic.cancel\" />\n                            </Button>\n                            <Button\n                                variant=\"danger\"\n                                onClick={async () => {\n                                    setShowDeleteModal(false);\n                                    setIsLoading(true);\n                                    const response = await RepositoryClient.deleteRepository(\n                                        instanceEditContext.instance.id\n                                    );\n                                    setIsLoading(false);\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            setIsLoading(true);\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                instanceEditContext.instance.id\n                                            );\n                                            JobsController.restartLoop();\n                                        } else {\n                                            await fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        addError(errorState, response.error);\n                                    }\n                                }}>\n                                <FormattedMessage id=\"view.instance.repo.delete\" />\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </>\n            )}\n        </div>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport SelectSearch, { fuzzySearch, SelectedOptionValue } from \"react-select-search\";\n\nimport {\n    RepositoryResponse,\n    RepositoryRights,\n    TestMerge\n} from \"../../ApiClient/generatedcode/generated\";\nimport InternalError from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport GithubClient, { Commit, PullRequest } from \"../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../utils/misc\";\nimport InputField, { FieldType } from \"./InputField\";\nimport Loading from \"./Loading\";\nimport SimpleToolTip from \"./SimpleTooltip\";\n\ninterface IProps {\n    pr: PullRequest;\n    testmergeinfo?: TestMerge;\n    repoInfo: RepositoryResponse;\n    finalState: [commit: string, comment: string] | false;\n    onRemove: () => unknown;\n    onSelectCommit: (commit: string, comment: string) => unknown;\n    onError: (error: InternalError) => unknown;\n}\n\nexport default function TestMergeRow({\n    pr,\n    testmergeinfo,\n    repoInfo,\n    finalState,\n    onRemove,\n    onSelectCommit,\n    onError\n}: IProps): JSX.Element {\n    const [showDetails, _setShowDetails] = useState(false);\n    const setShowDetails = (_newVal: ((prevState: boolean) => boolean) | boolean) => {\n        _setShowDetails(prevState => {\n            let newVal;\n            if (typeof _newVal === \"boolean\") {\n                newVal = _newVal;\n            } else {\n                newVal = _newVal(prevState);\n            }\n            if (newVal) void loadCommits();\n            return newVal;\n        });\n    };\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCommit, setSelectedCommit] = useState<string>(pr.head);\n    const [comment, setComment] = useState(finalState ? finalState[1] : \"\");\n    const [commits, setCommits] = useState<Map<string, Commit> | null>(null);\n    const [extraCommit, setExtraCommit] = useState<Commit | null>(null);\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const loadCommits = useCallback(\n        async (force?: boolean) => {\n            if (commits && !force) return;\n\n            const response = await GithubClient.getPRCommits({\n                //Repo info should be set if we are here\n                owner: repoInfo.remoteRepositoryOwner!,\n                repo: repoInfo.remoteRepositoryName!,\n                pr: pr,\n                wantedCommit: testmergeinfo?.targetCommitSha\n            });\n            if (response.code === StatusCode.ERROR) {\n                onError(response.error);\n            } else {\n                const commitMap = new Map();\n                response.payload[0].forEach(commit => commitMap.set(commit.sha, commit));\n                setCommits(commitMap);\n                setExtraCommit(response.payload[1] ?? null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            repoInfo.remoteRepositoryOwner,\n            repoInfo.remoteRepositoryName,\n            pr.head,\n            testmergeinfo?.targetCommitSha\n        ]\n    );\n    useEffect(() => (showDetails ? void loadCommits() : void 0), [showDetails, loadCommits]);\n    useEffect(() => (showModal ? void loadCommits() : void 0), [showModal, loadCommits]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setShowDetails(false), [finalState]);\n    useEffect(() => setComment(finalState ? finalState[1] : \"\"), [finalState]);\n\n    const colorMap: Record<typeof pr.state, string> = {\n        closed: \"#c93c37\",\n        merged: \"#8256d0\",\n        open: \"#347d39\"\n    };\n    let activeCommit: Commit | undefined = undefined;\n    if (testmergeinfo) {\n        if (commits?.has(testmergeinfo.targetCommitSha)) {\n            activeCommit = commits?.get(testmergeinfo.targetCommitSha);\n        } else if (extraCommit?.sha === testmergeinfo.targetCommitSha) {\n            activeCommit = extraCommit;\n        }\n    }\n    const commitOptions = [...(commits ?? []).values()].map(commit => ({\n        name: commit.name,\n        value: commit.sha,\n        current: commit.sha === testmergeinfo?.targetCommitSha,\n        latest: commit.sha === pr.head,\n        disabled: false\n    }));\n    if (extraCommit) {\n        commitOptions.push({\n            name: \"...\",\n            value: \"\",\n            current: false,\n            latest: false,\n            disabled: true\n        });\n        commitOptions.push({\n            name: extraCommit.name,\n            value: extraCommit.sha,\n            current: extraCommit.sha === testmergeinfo?.targetCommitSha,\n            latest: extraCommit.sha === pr.head,\n            disabled: false\n        });\n    }\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canReset =\n        (hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.UpdateBranch\n            )) ||\n        //Allow updating and removing pending PRs\n        !testmergeinfo;\n\n    return (\n        <>\n            <tr>\n                <td className={\"text-right\" + (finalState ? \" font-weight-bold\" : \"\")}>\n                    #{pr.number}\n                </td>\n                <td>\n                    <Badge\n                        pill\n                        className=\"text-white text-capitalize mr-2\"\n                        style={{ backgroundColor: colorMap[pr.state] }}>\n                        {pr.state}\n                    </Badge>\n                    {pr.testmergelabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"primary\">\n                            <FormattedMessage id=\"view.instance.repo.testmergelabel\" />\n                        </Badge>\n                    ) : null}\n                </td>\n                <td>\n                    <a href={pr.link} target=\"_blank\" rel=\"noreferrer\">\n                        {pr.title}\n                    </a>\n                </td>\n                <td className=\"font-italic\">{pr.author}</td>\n\n                <td>\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-inline-block text-nowrap\">\n                            {finalState ? (\n                                <>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canReset ? false : undefined}>\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"mx-1\"\n                                            onClick={onRemove}\n                                            disabled={!canReset}>\n                                            <FontAwesomeIcon icon=\"minus\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canAdd && canReset ? false : undefined}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={e =>\n                                                e.shiftKey\n                                                    ? onSelectCommit(\n                                                          pr.head,\n                                                          \"No comment set - Fast Update\"\n                                                      )\n                                                    : setShowModal(true)\n                                            }\n                                            variant={finalState[0] === pr.head ? \"primary\" : \"info\"}\n                                            //To update, you have to reset and reapply the TM so you need both\n                                            disabled={!canAdd || !canReset}>\n                                            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    {testmergeinfo ? (\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => setShowDetails(val => !val)}\n                                            active={showDetails}>\n                                            <FontAwesomeIcon icon=\"info\" fixedWidth />\n                                        </Button>\n                                    ) : null}\n                                </>\n                            ) : (\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        variant=\"success\"\n                                        className=\"mx-1\"\n                                        disabled={!canAdd}\n                                        onClick={e =>\n                                            e.shiftKey\n                                                ? onSelectCommit(\n                                                      pr.head,\n                                                      \"No comment set - Fast Add\"\n                                                  )\n                                                : setShowModal(true)\n                                        }>\n                                        <FontAwesomeIcon icon=\"plus\" fixedWidth />\n                                    </Button>\n                                </SimpleToolTip>\n                            )}\n                        </div>\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td className=\"py-0 border-top-0\" />\n                <td colSpan={4} className=\"py-0 border-top-0\">\n                    {testmergeinfo ? (\n                        <Collapse in={showDetails}>\n                            <div>\n                                <div className=\"py-3\">\n                                    <table className=\"reset-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.by\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.mergedBy.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.comment\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.comment}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.commit\" />\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    {activeCommit ? (\n                                                        <>\n                                                            {activeCommit.name}\n                                                            <a\n                                                                className=\"ml-1\"\n                                                                href={activeCommit.url}\n                                                                target=\"_blank\"\n                                                                rel=\"noreferrer\">\n                                                                (\n                                                                {testmergeinfo.targetCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )}\n                                                                )\n                                                            </a>\n                                                        </>\n                                                    ) : (\n                                                        testmergeinfo.targetCommitSha.substring(\n                                                            0,\n                                                            7\n                                                        )\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </Collapse>\n                    ) : null}\n                </td>\n            </tr>\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.title\" />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>\n                        <a\n                            href={pr.link}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            className=\"text-decoration-none\">\n                            {pr.title}\n                        </a>\n                    </h5>\n                    <FormattedMessage id=\"view.instance.repo.tm.modal.label\" />\n                    {commits ? (\n                        <SelectSearch\n                            filterOptions={fuzzySearch}\n                            search\n                            options={commitOptions}\n                            value={selectedCommit ?? activeCommit?.sha}\n                            autoComplete=\"on\"\n                            //@ts-expect-error error in the library, it's the wrong type\n                            renderOption={(\n                                props,\n                                option: SelectedOptionValue & { current: boolean; latest: boolean },\n                                snapshot,\n                                className\n                            ) => (\n                                //@ts-expect-error error in the library, it's the wrong type\n                                <button\n                                    type=\"button\"\n                                    className={\n                                        className + (option.disabled ? \" font-weight-bold\" : \"\")\n                                    }\n                                    {...props}>\n                                    <Badge>{(option.value as string).substring(0, 7)}</Badge>\n                                    {option.current ? (\n                                        <Badge variant=\"primary\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.testmerged\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.latest ? (\n                                        <Badge variant=\"success\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.latest\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.name}\n                                </button>\n                            )}\n                            onChange={value => setSelectedCommit((value as unknown) as string)}\n                        />\n                    ) : (\n                        <Loading text=\"loading.repo.commits\" width={5} widthUnit=\"rem\" />\n                    )}\n                    <InputField\n                        name=\"view.instance.repo.tm.modal.comment\"\n                        type={FieldType.String}\n                        onChange={newComment => setComment(newComment)}\n                        defaultValue={testmergeinfo?.comment ?? \"\"}\n                    />\n                    <span className=\"text-muted font-italic mt-4 d-inline-block\">\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.tip\" />\n                    </span>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={() => setShowModal(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            if (selectedCommit) onSelectCommit(selectedCommit, comment);\n                            setShowModal(false);\n                        }}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n})();\nexport default e;\n"],"names":["FieldType","StringControl","React","props","ref","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","overlay","innerid","tooltip","show","triggerHandler","style","visibility","icon","newValue","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","includeAll","onSave","JsonViewer","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","SimpleToolTip","OverlayTrigger","Tooltip","tooltipid","children","PRState","TestMergeRow","pr","testmergeinfo","repoInfo","finalState","onRemove","onSelectCommit","onError","showDetails","_setShowDetails","setShowDetails","_newVal","loadCommits","showModal","setShowModal","selectedCommit","setSelectedCommit","head","comment","setComment","commits","setCommits","extraCommit","setExtraCommit","instanceEditContext","useContext","InstanceEditContext","useCallback","async","force","response","GithubClient","owner","remoteRepositoryOwner","repo","remoteRepositoryName","wantedCommit","targetCommitSha","code","StatusCode","error","commitMap","payload","commit","sha","activeCommit","has","commitOptions","latest","push","canAdd","hasRepoRight","instancePermissionSet","RepositoryRights","canReset","number","Badge","pill","backgroundColor","closed","merged","open","state","testmergelabel","href","link","rel","title","author","Button","fixedWidth","shiftKey","val","active","colSpan","Collapse","in","mergedBy","url","substring","Modal","onHide","centered","size","closeButton","SelectSearch","filterOptions","fuzzySearch","search","options","autoComplete","renderOption","option","snapshot","Loading","text","width","widthUnit","newComment","Repository","errorState","repositoryInfo","setRepositoryInfo","isCloning","setIsCloning","isUnableHookClone","setIsUnableHookClone","isLoading","setIsLoading","PRs","setPRs","desiredState","setDesiredState","updateRepo","setUpdateRepo","gitlabReset","setGitlabReset","manualPRs","setManualPRs","Set","manualPR","setManualPR","lastManualPR","setLastManualPR","showDeleteModal","setShowDeleteModal","reloadDesiredState","repoinfo","reset","newDesiredState","revisionInformation","activeTestMerges","currentDesiredState","fetchRepositoryInfo","cloneJob","resetDesiredState","RepositoryClient","instance","ErrorCode","originalErrorMessage","errorCode","TGSErrorCode","JobsController","response2","JobsClient","page","pageSize","content","sort","a","b","find","job","description","includes","addError","remoteGitProvider","RemoteGitProvider","wantedPRs","tm","then","prs","catch","InternalError","jsError","reloadPRs","GenericAlert","cloneFields","origin","reference","accessUser","accessToken","updateSubmodules","editFields","originCheckoutSha","originCommitSha","checkoutSha","commitSha","committerName","committerEmail","clearAccessToken","pushTestMergeCommits","createGitHubDeployments","showTestMergeCommitters","autoUpdatesKeepTestMerges","autoUpdatesSynchronize","postTestMergeComment","testmergedPRs","sortedPRs","filteredPendingActions","desiredPRState","tmInfo","activePR","updated","rename","reapply","added","removed","sortedPendingActions","order","noBranch","forceReset","action","noPendingChanges","length","canUpdate","displayErrors","result","activeJob","displayRepoInformation","_result","Card","prDesiredState","targetCommit","newPR","editOptions","updateFromOrigin","testMergeArray","console","log","newTestMerges","exceptionDetails","Table","striped","hover","slice","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","assign","bind","TypedEmitter","constructor","super","apiClient","octo","Octokit","retry","throttling","this","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","warn","method","retryCount","onAbuseLimit","all","oldversions","paginate","repos","listReleases","done","data","reduce","release","match","exec","version","old","body","InternalStatus","transformPR","user","login","merged_at","html_url","tail","base","labels","label","toLowerCase","pulls","list","wantedPR","pull_number","listCommits","per_page","split","reverse","_extraCommit","getCommit"],"sourceRoot":""}