{"version":3,"file":"791.bfcfe7f4dc7c3911fe92.bundle.js","mappings":"gOAKe,SAASA,EAAWC,GAC/B,OACI,gBAAC,IAAD,CACIC,IAAKD,EAAME,IACXC,KAAM,OACNC,MAAM,OACNC,UAAU,WACVC,WAAS,EACTC,kBAAkB,IAKvB,SAASC,EAAgBR,GAC5B,OAAKS,EAAAA,GAAAA,SAAAA,MAID,uBAAKC,UAAU,aACX,gBAACX,EAAD,CAAYG,IAAKF,EAAME,OAJpB,mC,0SCEfS,eAAeC,EAAKC,EAAcC,EAAYC,GAC1C,MAAMC,EAAWH,EAAQG,SAASC,MAAMH,EAAiBC,GAMzD,OAJIN,EAAAA,GAAAA,YAAAA,QACAO,EAASE,QAAQC,cAAiB,SAAQV,EAAAA,GAAAA,YAAAA,SAGvCI,EAAQG,GAGnBL,eAAeS,IACX,OAAIX,EAAAA,GAAAA,YAAAA,MACO,CACHY,KAAM,QACNC,UAAW,MACXC,MAAOd,EAAAA,GAAAA,YAAAA,OAGJ,CACHY,KAAM,mBAKlB,MAAMG,EAAe,IACVC,OAAOC,OAAON,EAAKO,KAAK,MAAO,CAClCf,KAAMA,EAAKe,KAAK,QAsGxB,MAhGU,IAAK,cAA2BC,EAAAA,aAG/BC,cACHC,QADiB,KAFJC,eAEI,EAGjB,MAAMC,EAAOC,EAAAA,EAAAA,OAAeC,EAAAA,EAAOC,EAAAA,GAEnCC,KAAKL,UAAY,IAAIC,EAAK,CACtBR,aAAAA,EACAa,UAAW,kCAAoCC,EAAAA,GAC/CC,QAAS,yBACTC,SAAU,CACNC,YAAa,CACTC,EACAC,KAEAC,QAAQC,KACH,uCAAsCF,EAAQG,UAAUH,EAAQI,OAGlC,IAA/BJ,EAAQ9B,QAAQmC,aAEhBJ,QAAQK,IAAK,kBAAiBP,eACvB,IAIfQ,aAAc,CAACR,EAAoBC,KAE/BC,QAAQC,KAAM,8BAA6BF,EAAQG,UAAUH,EAAQI,WAM7D,mBAAC,MACrBI,EADqB,KAErBC,EAFqB,QAGrBC,EAHqB,IAIrBC,IAOA,IAAIC,EACAC,EAAc,EAClB,IACID,QAAgBnB,KAAKL,UAAU0B,SAC3BrB,KAAKL,UAAU2B,MAAMC,aACrB,CAAER,MAAAA,EAAOC,KAAAA,IACT,CAACQ,EAAUC,IACAD,EAASE,KAAKC,QAAO,CAACC,EAAQC,KACjC,MAAMC,EAAQ,6BAA6BC,KAAKF,EAAQ9D,MAAQ,IAChE,IAAK+D,EAAO,OAAOF,EACnB,GAAoB,MAAhBE,EAAM,GAAG,GAAY,OAAOF,EAEhC,MAAMI,EAAUF,EAAM,GACtB,IAAIG,GAAM,EAGV,GAAID,GAAWf,EAAS,CACpB,GAAIG,GAAe,IAAMF,EAErB,OADCO,IACMG,EAEXR,IACAa,GAAM,EASV,OANAL,EAAOM,KAAK,CACRF,QAAAA,EACAG,KAAMN,EAAQM,MAAQ,GACtBlB,QAASe,IAAYf,EACrBgB,IAAAA,IAEGL,IACR,MAGb,MAAOQ,GACL,OAAO,IAAIC,EAAAA,EAAoD,CAC3DC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAAA,YAAuB,CAC5CC,QAASP,MAIrB,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNpB,QAAAA,M,uCCtGZ,MAAMyB,UAAeC,EAAAA,UAGVpD,YAAY7B,GACf8B,MAAM9B,GAENoC,KAAK8C,UAAY9C,KAAK8C,UAAUvD,KAAKS,MACrCA,KAAK+C,aAAe/C,KAAK+C,aAAaxD,KAAKS,MAE3CA,KAAKgD,MAAQ,CACTC,SAAU,GACVC,OAAQ,GACRC,SAAS,GAIa,0BAC1B,MAAMC,EAAQ,GACdA,EAAMlB,KAAKlC,KAAKqD,sBAEVC,QAAQpC,IAAIkC,GAClBpD,KAAKuD,SAAS,CACVJ,SAAS,IAIVK,uBACCxD,KAAKgD,MAAMS,OACXC,OAAOC,cAAc3D,KAAKgD,MAAMS,OAIhCG,SAASpB,GACbxC,KAAKuD,UAASM,IACV,MAAMX,EAASY,MAAMC,KAAKF,EAAUX,QAEpC,OADAA,EAAOhB,KAAKM,GACL,CACHU,OAAAA,MAKc,qBACtB,MAAMc,QAAkBC,EAAAA,EAAAA,eAExB,OAAQD,EAAU1B,MACd,KAAKC,EAAAA,EAAAA,MACD,OAAOvC,KAAK4D,SAASI,EAAUxB,OAEnC,KAAKD,EAAAA,EAAAA,GAAe,CAChB,MAAM5B,EAAMqD,EAAU7C,QAAQ+C,qBAExBC,EADU,wCACQpC,KAAKpB,GAE7B,IAAKwD,EACD,OAAOnE,KAAK4D,SACR,IAAInB,EAAAA,GAAcC,EAAAA,GAAAA,SAAoB,CAClCC,QAASyB,MAAO,kCAAiCzD,QAK7D,GAAmB,eAAfwD,EAAQ,GAWR,YAVAnE,KAAKuD,SAAS,CACVN,SAAU,CACN,CACId,KAAM,0CACNH,QAAS,0CACTf,SAAS,EACTgB,KAAK,MAOrB,MAAMoC,QAAoBC,EAAaC,YAAY,CAC/CxD,MAAOoD,EAAQ,GACfnD,KAAMmD,EAAQ,GACdlD,QAASjB,KAAKwE,QAAQC,WAAWzC,QACjCd,MAAOlB,KAAKpC,MAAMkE,MAAM4C,OAAOxD,MAGnC,OADAV,QAAQK,IAAI,iBAAkBwD,GACtBA,EAAY/B,MAChB,KAAKC,EAAAA,EAAAA,MACD,OAAOvC,KAAK4D,SAASS,EAAY7B,OAErC,KAAKD,EAAAA,EAAAA,GACDvC,KAAKuD,SAAS,CACVN,SAAUoB,EAAYlD,aAQtC2B,YACJ,IAAK,MAAMd,KAAWhC,KAAKgD,MAAMC,SAAU,CACvC,GAAIjB,EAAQA,UAAYhC,KAAKgD,MAAM2B,eAAgB,SAEnD,MAAMlB,EAAQC,OAAOkB,aAAY,KAC7B5E,KAAKuD,UAASM,QACoBgB,IAA1BhB,EAAUiB,aAAuD,OAA1BjB,EAAUiB,YAC1CjB,EAEmB,IAA1BA,EAAUiB,aACVpB,OAAOC,cAAcE,EAAUJ,OACxB,CACHA,MAAO,KACPqB,YAAa,OAId,CACHA,YAAajB,EAAUiB,YAAc,OAG9C,KAOH,YALA9E,KAAKuD,SAAS,CACVwB,gBAAiB/C,EACjByB,MAAOA,EACPqB,YAAa,MAMC,qBACtB,IAAK9E,KAAKgD,MAAM2B,eAKZ,OAJAnE,QAAQgC,MAAM,mDACdxC,KAAKuD,SAAS,CACVwB,qBAAiBF,IAIzB,MAAMrD,QAAiByC,EAAAA,EAAAA,aAAyBjE,KAAKgD,MAAM2B,gBAE3D,OAAQnD,EAASc,MACb,KAAKC,EAAAA,EAAAA,MACDvC,KAAK4D,SAASpC,EAASgB,OACvB,MAEJ,KAAKD,EAAAA,EAAAA,GACDyC,EAAAA,EAAAA,WAAyB,EAGzBtB,OAAOkB,aAAYrG,UAEf,UADuB0G,EAAAA,EAAAA,gBAA0B,IAChC3C,OAGRC,EAAAA,EAAAA,MACDmB,OAAOwB,SAASC,WAGzB,KACHnF,KAAKuD,SAAS,CACV6B,UAAU,KAMnBC,SACH,GAAIrF,KAAKgD,MAAMoC,SACX,OAAO,gBAACE,EAAA,EAAD,CAASC,KAAK,qBAEzB,GAAIvF,KAAKgD,MAAMG,QACX,OAAO,gBAACmC,EAAA,EAAD,CAASC,KAAK,oBAEzB,MAAMC,EAAgBC,IAClBzF,KAAKuD,SAAS,CACVoB,eAAgBc,EAAYC,OAAOC,SAIrCC,EAA2C,iBAA3B5F,KAAKgD,MAAM8B,YACjC,OACI,gBAAC,WAAD,KACI,gBAAC,IAAD,CAAiBhH,IAAKkC,KAAKgD,MAAMC,WACjC,uBAAK3E,UAAU,eACV0B,KAAKgD,MAAME,OAAO2C,KAAI,CAACC,EAAKC,KACzB,GAAKD,EACL,OACI,gBAACE,EAAA,GAAD,CACIC,IAAKF,EACLvD,MAAOsD,EACPI,QAAS,IACLlG,KAAKuD,UAAS4C,IACV,MAAMC,EAAStC,MAAMC,KAAKoC,EAAKjD,QAE/B,OADAkD,EAAOL,QAASlB,EACT,CACH3B,OAAQkD,YAQnCpG,KAAKgD,MAAM+B,gBACR,gBAAC,WAAD,KACI,uBAAKzG,UAAU,eACX,gBAAC+H,EAAA,EAAD,CACI/H,UAAU,OACVgI,QAAS,IAAMtG,KAAKuD,SAAS,CAAEwB,qBAAiBF,KAChD,gBAAC,IAAD,CAAkB0B,GAAG,oBAEzB,gBAACC,EAAA,EAAD,CACIC,QACI,gBAACC,EAAA,EAAD,CAASH,GAAG,kBACR,gBAAC,IAAD,CAAkBA,GAAG,4BAG7BI,KAAMf,GACN,gBAACS,EAAA,EAAD,CAAQC,QAAStG,KAAK+C,aAAc6D,SAAUhB,GAC1C,gBAAC,IAAD,CAAkBW,GAAG,qBACpBX,EAAU,KAAI5F,KAAKgD,MAAM8B,eAA2B,KAG7D,0BACI,gBAAC,IAAD,CAAkByB,GAAG,oCAEzB,4BAEJ,gBAAC,IAAD,CAAeM,OAAQ7G,KAAKgD,MAAM+B,gBAAgB5C,QAGtD,uBAAK7D,UAAU,eACX,sBAAIA,UAAU,QACV,gBAAC,IAAD,CAAkBiI,GAAG,qCAEzB,gBAACO,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAG1I,UAAU,WACxB0B,KAAKgD,MAAMC,SAAS4C,KAAI,CAAC7D,EAAS+D,IAE3B,gBAACkB,EAAA,EAAD,CAAY3I,UAAU,OAAO2H,IAAKjE,EAAQA,SACtC,gBAACiF,EAAA,UAAD,KACI,gBAACA,EAAA,QAAD,CACIV,GAAIvE,EAAQA,QACZjE,KAAK,UACL6I,SAAU5E,EAAQf,QAClB0E,MAAO3D,EAAQA,QACfkF,QACIlH,KAAKgD,MAAM2B,iBAAmB3C,EAAQA,QAE1CmF,SAAU3B,KAGlB,gBAAC4B,EAAA,EAAD,CACIC,GAAI,QACJC,QAAStF,EAAQA,QACjB4E,UAAQ,GACP5E,EAAQA,QACRA,EAAQf,QACL,gBAAC,IAAD,CAAkBsF,GAAG,8BAErB,GAEM,GAATR,EACG,gBAAC,IAAD,CAAkBQ,GAAG,6BAErB,OAMpB,gBAACF,EAAA,EAAD,CACIkB,QAAQ,OACRjB,QAAS,KACLtG,KAAKpC,MAAM4J,QAAQtF,MACduF,EAAAA,GAAAA,aAAAA,MACGA,EAAAA,GAAAA,aAAAA,OAAgC,OACpC,CACItC,QAAQ,KAIpByB,WAAY5G,KAAKpC,MAAMkE,MAAM4C,OAAOxD,KACpC,gBAAC,IAAD,CAAkBqF,GAAG,+BAEzB,2BACA,gBAACF,EAAA,EAAD,CAAQC,QAAStG,KAAK8C,UAAW8D,UAAW5G,KAAKgD,MAAM2B,gBACnD,gBAAC,IAAD,CAAkB4B,GAAG,0BASrD3D,EAAO8E,YAAcC,EAAAA,EACrB,OAAeC,EAAAA,EAAAA,IAAWhF","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n})();\nexport default e;\n","import React, { ChangeEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../../ApiClient/AdminClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps\n    extends RouteComponentProps<{\n        all: string;\n    }> {}\ninterface IState {\n    versions: TGSVersion[];\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    //manual entry\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            loading: true\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const tasks = [];\n        tasks.push(this.loadVersions());\n\n        await Promise.all(tasks);\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        this.setState({\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n        const response = await AdminClient.updateServer(this.state.selectedOption);\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                break;\n            }\n            case StatusCode.OK: {\n                ServerClient.autoLogin = false;\n                // i need that timer to be async\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                window.setInterval(async () => {\n                    const response = await UserClient.getCurrentUser(true);\n                    switch (response.code) {\n                        //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                        //in both cases, we should reboot\n                        case StatusCode.ERROR: {\n                            window.location.reload();\n                        }\n                    }\n                }, 2000);\n                this.setState({\n                    updating: true\n                });\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                show={timing}>\n                                <Button onClick={this.updateServer} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown source={this.state.selectedVersion.body} />\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        <Col xs={8} md={6} className=\"mx-auto\">\n                            {this.state.versions.map((version, index) => {\n                                return (\n                                    <InputGroup className=\"mb-3\" key={version.version}>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Radio\n                                                id={version.version}\n                                                name=\"version\"\n                                                disabled={version.current}\n                                                value={version.version}\n                                                checked={\n                                                    this.state.selectedOption === version.version\n                                                }\n                                                onChange={handleChange}\n                                            />\n                                        </InputGroup.Prepend>\n                                        <FormControl\n                                            as={\"label\"}\n                                            htmlFor={version.version}\n                                            disabled>\n                                            {version.version}\n                                            {version.current ? (\n                                                <FormattedMessage id=\"view.admin.update.current\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                            {index == 0 ? (\n                                                <FormattedMessage id=\"view.admin.update.latest\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                        </FormControl>\n                                    </InputGroup>\n                                );\n                            })}\n                            <Button\n                                variant=\"link\"\n                                onClick={() => {\n                                    this.props.history.push(\n                                        (AppRoutes.admin_update.link ??\n                                            AppRoutes.admin_update.route) + \"all/\",\n                                        {\n                                            reload: true\n                                        }\n                                    );\n                                }}\n                                disabled={!!this.props.match.params.all}>\n                                <FormattedMessage id=\"view.admin.update.showall\" />\n                            </Button>\n                            <br />\n                            <Button onClick={this.loadNotes} disabled={!this.state.selectedOption}>\n                                <FormattedMessage id=\"generic.continue\" />\n                            </Button>\n                        </Col>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","async","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","type","tokenType","token","authStrategy","Object","assign","bind","TypedEmitter","constructor","super","apiClient","octo","Octokit","retry","throttling","this","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","console","warn","method","url","retryCount","log","onAbuseLimit","owner","repo","current","all","payload","oldversions","paginate","repos","listReleases","response","done","data","reduce","result","release","match","exec","version","old","push","body","e","InternalStatus","code","StatusCode","error","InternalError","ErrorCode","jsError","Update","React","loadNotes","updateServer","state","versions","errors","loading","tasks","loadVersions","Promise","setState","componentWillUnmount","timer","window","clearInterval","addError","prevState","Array","from","adminInfo","AdminClient","trackedRepositoryUrl","results","Error","versionInfo","GithubClient","getVersions","context","serverInfo","params","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","ServerClient","UserClient","location","reload","updating","render","Loading","text","handleChange","changeEvent","target","value","timing","map","err","index","ErrorAlert","key","onClose","prev","newarr","Button","onClick","id","OverlayTrigger","overlay","Tooltip","show","disabled","source","Col","xs","md","InputGroup","checked","onChange","FormControl","as","htmlFor","variant","history","AppRoutes","contextType","GeneralContext","withRouter"],"sourceRoot":""}