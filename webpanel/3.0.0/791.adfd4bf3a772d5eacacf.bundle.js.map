{"version":3,"file":"791.adfd4bf3a772d5eacacf.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n})();\nexport default e;\n","import React, { ChangeEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../../ApiClient/AdminClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps\n    extends RouteComponentProps<{\n        all: string;\n    }> {}\ninterface IState {\n    versions: TGSVersion[];\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    //manual entry\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            loading: true\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const tasks = [];\n        tasks.push(this.loadVersions());\n\n        await Promise.all(tasks);\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        this.setState({\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n        const response = await AdminClient.updateServer(this.state.selectedOption);\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                break;\n            }\n            case StatusCode.OK: {\n                ServerClient.autoLogin = false;\n                // i need that timer to be async\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                window.setInterval(async () => {\n                    const response = await UserClient.getCurrentUser(true);\n                    switch (response.code) {\n                        //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                        //in both cases, we should reboot\n                        case StatusCode.ERROR: {\n                            window.location.reload();\n                        }\n                    }\n                }, 2000);\n                this.setState({\n                    updating: true\n                });\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                show={timing}>\n                                <Button onClick={this.updateServer} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown source={this.state.selectedVersion.body} />\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        <Col xs={8} md={6} className=\"mx-auto\">\n                            {this.state.versions.map((version, index) => {\n                                return (\n                                    <InputGroup className=\"mb-3\" key={version.version}>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Radio\n                                                id={version.version}\n                                                name=\"version\"\n                                                disabled={version.current}\n                                                value={version.version}\n                                                checked={\n                                                    this.state.selectedOption === version.version\n                                                }\n                                                onChange={handleChange}\n                                            />\n                                        </InputGroup.Prepend>\n                                        <FormControl\n                                            as={\"label\"}\n                                            htmlFor={version.version}\n                                            disabled>\n                                            {version.version}\n                                            {version.current ? (\n                                                <FormattedMessage id=\"view.admin.update.current\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                            {index == 0 ? (\n                                                <FormattedMessage id=\"view.admin.update.latest\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                        </FormControl>\n                                    </InputGroup>\n                                );\n                            })}\n                            <Button\n                                variant=\"link\"\n                                onClick={() => {\n                                    this.props.history.push(\n                                        (AppRoutes.admin_update.link ??\n                                            AppRoutes.admin_update.route) + \"all/\",\n                                        {\n                                            reload: true\n                                        }\n                                    );\n                                }}\n                                disabled={!!this.props.match.params.all}>\n                                <FormattedMessage id=\"view.admin.update.showall\" />\n                            </Button>\n                            <br />\n                            <Button onClick={this.loadNotes} disabled={!this.state.selectedOption}>\n                                <FormattedMessage id=\"generic.continue\" />\n                            </Button>\n                        </Col>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","type","tokenType","token","authStrategy","Object","assign","bind","e","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","console","warn","method","url","retryCount","log","onAbuseLimit","getVersions","owner","repo","current","all","oldversions","this","paginate","repos","listReleases","response","done","data","reduce","result","release","match","exec","version","old","push","body","payload","InternalStatus","code","StatusCode","error","InternalError","ErrorCode","jsError","TypedEmitter","Update","loadNotes","updateServer","state","versions","errors","loading","componentDidMount","tasks","loadVersions","Promise","setState","componentWillUnmount","timer","window","clearInterval","addError","prevState","Array","from","AdminClient","adminInfo","trackedRepositoryUrl","results","Error","GithubClient","context","serverInfo","params","versionInfo","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","ServerClient","UserClient","location","reload","updating","render","Loading","text","handleChange","changeEvent","target","value","timing","map","err","index","ErrorAlert","key","onClose","prev","newarr","Button","onClick","id","OverlayTrigger","overlay","Tooltip","show","disabled","source","Col","xs","md","InputGroup","checked","onChange","FormControl","as","htmlFor","variant","history","AppRoutes","React","contextType","GeneralContext","withRouter"],"sourceRoot":""}