{"version":3,"file":"46.96d95c25a7a56a911c8b.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/WIPNotice.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Badge.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n    }, [props.defaultValue]);\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n        onChange(currentValue);\n    }, [currentValue]);\n\n    const onChange = (newValue: InputFieldTypes) => {\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(newValue as boolean, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(newValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(newValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n    };\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon=\"info\" />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n    }, []);\n\n    Object.entries(props.fields).forEach(([id, field]) => {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    });\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue == (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type])\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport WIPNotice from \"../../../utils/WIPNotice\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nexport default function Server(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    useEffect(() => void loadWatchdogSettings(), []);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonResponse): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        heartbeatSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.heartbeat\",\n            defaultValue: watchdogSettings.heartbeatSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHeartbeatInterval\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    return (\n        <div>\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                            ? \"danger\"\n                            : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.server.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={startWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={stopWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={restartWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={dumpWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                ? GracefulAction.Stop\n                                : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.deployment_info\" />\n            </h3>\n            <WIPNotice />\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["FieldType","StringControl","React","props","ref","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","useState","defaultValue","currentValue","setCurrentValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","innerid","newValue","basicControls","string","password","boolean","undefined","changed","overlay","tooltip","show","triggerHandler","style","visibility","icon","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","onSave","JsonViewer","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","WIPNotice","render","border","href","VERSION","MODE","window","location","GracefulAction","Server","instanceEditContext","useContext","InstanceEditContext","watchdogSettings","setWatchdogSettings","loading","setLoading","errorState","loadWatchdogSettings","hasDreamDaemonRight","instancePermissionSet","DreamDaemonRights","DreamDaemonClient","instance","response","code","StatusCode","addError","error","payload","saveWatchdogSettings","newSettings","JobsController","displayErrors","autoStart","port","DreamDaemonVisibility","securityLevel","DreamDaemonSecurity","startupTimeout","topicRequestTimeout","heartbeatSeconds","allowWebClient","additionalParameters","anyEditableField","no_perm_tooltip","canStart","canStop","canRestart","canDump","canMetadata","canGracefulAny","canActionAny","pill","status","WatchdogStatus","title","softRestart","Restart","softShutdown","Stop","None","_result","_excluded","Badge","_ref","bsPrefix","_ref$as","Component","prefix","displayName","defaultProps","InputGroupAppend","InputGroupPrepend","InputGroupText","InputGroup","size","hasValidation","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}