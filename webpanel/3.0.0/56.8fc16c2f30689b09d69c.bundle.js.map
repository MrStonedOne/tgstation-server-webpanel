{"version":3,"file":"56.8fc16c2f30689b09d69c.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Create.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    instanceName?: string;\n    instancePath?: string;\n    prefix?: string;\n}\n\ninterface IProps extends RouteComponentProps {}\n\nclass InstanceCreate extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n        this.state = {\n            loading: false,\n            errors: [],\n            prefix: context.serverInfo.validInstancePaths?.length\n                ? context.serverInfo.validInstancePaths[0]\n                : undefined\n        };\n\n        this.submit = this.submit.bind(this);\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"view.instance.create.loading\" />;\n        }\n\n        const validInstancePaths = this.context.serverInfo.validInstancePaths;\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"view.instance.create.title\" />\n                </h3>\n                <Form onSubmit={this.submit}>\n                    <Col className=\"mx-auto\" lg={5} md={8}>\n                        <Form.Group controlId=\"name\">\n                            <Form.Label>\n                                <h5>\n                                    <FormattedMessage id=\"view.instance.create.name\" />\n                                </h5>\n                            </Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                onChange={event => {\n                                    const instanceName = event.target.value;\n                                    this.setState({\n                                        instanceName\n                                    });\n                                }}\n                                value={this.state.instanceName}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"path\">\n                            <Form.Label>\n                                <h5>\n                                    <FormattedMessage id=\"view.instance.create.path\" />\n                                </h5>\n                            </Form.Label>\n                            <InputGroup className=\"mb-1\">\n                                {validInstancePaths != null ? (\n                                    <InputGroup.Prepend className=\"flex-grow-1 flex-grow-md-0\">\n                                        <InputGroup.Text>\n                                            <span>\n                                                <FormattedMessage id=\"view.instance.create.path.prefix\" />\n                                            </span>\n                                        </InputGroup.Text>\n                                        <Form.Control\n                                            className=\"rounded-0 flex-grow-1 flex-grow-md-0 flex-shrink-0 flex-shrink-md-1 w-auto\"\n                                            as=\"select\"\n                                            custom\n                                            required\n                                            onChange={event => {\n                                                this.setState({\n                                                    prefix: event.target.value\n                                                });\n                                            }}>\n                                            {validInstancePaths.map(validPath => {\n                                                return (\n                                                    <option\n                                                        key={validPath}\n                                                        value={validPath}\n                                                        selected={this.state.prefix == validPath}>\n                                                        {validPath}/\n                                                    </option>\n                                                );\n                                            })}\n                                        </Form.Control>\n                                    </InputGroup.Prepend>\n                                ) : null}\n                                <Form.Control\n                                    type=\"text\"\n                                    className=\"flex-grow-1 w-100 w-md-auto\"\n                                    required\n                                    onChange={event => {\n                                        const instancePath = event.target.value;\n                                        this.setState({\n                                            instancePath\n                                        });\n                                    }}\n                                    value={this.state.instancePath}\n                                />\n                            </InputGroup>\n                        </Form.Group>\n                        <Button type=\"submit\" variant=\"success\">\n                            <FormattedMessage id=\"view.instance.create.submit\" />\n                        </Button>\n                    </Col>\n                </Form>\n            </div>\n        );\n    }\n\n    private async submit() {\n        //The required attribute should prevent this from ever happening but id rather not fuck over someone\n        if (!this.state.instancePath) {\n            return;\n        }\n\n        const instancePath =\n            (this.state.prefix ? this.state.prefix + \"/\" : \"\") + this.state.instancePath;\n\n        this.setState({\n            loading: true\n        });\n\n        const result = await InstanceClient.createInstance({\n            name: this.state.instanceName!,\n            path: instancePath\n        });\n\n        if (result.code === StatusCode.ERROR) {\n            this.setState({\n                loading: false\n            });\n            this.addError(result.error);\n\n            return;\n        }\n\n        RouteData.selectedinstanceid = result.payload.id;\n        this.props.history.push(AppRoutes.instancelist.link ?? AppRoutes.instancelist.route);\n    }\n}\nInstanceCreate.contextType = GeneralContext;\nexport default withRouter(InstanceCreate);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["InstanceCreate","props","context","state","loading","errors","prefix","serverInfo","validInstancePaths","length","undefined","submit","bind","addError","error","this","setState","prevState","Array","from","push","render","text","className","map","err","index","key","onClose","prev","newarr","id","onSubmit","lg","md","controlId","type","onChange","event","instanceName","target","value","required","as","custom","validPath","selected","instancePath","variant","InstanceClient","name","path","result","code","StatusCode","RouteData","payload","history","AppRoutes","React","contextType","GeneralContext","withRouter","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","ref","bsPrefix","size","hasValidation","_ref$as","displayName","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}