{"version":3,"file":"803.6a7ec6934a2d777bf626.bundle.js","mappings":"iPAsBA,QAAe,sGACEA,YADF,mCACX,WACIC,GADJ,uFAGUC,EAAAA,EAAAA,YAHV,gCAOyBA,EAAAA,EAAAA,UAAAA,UAAAA,0BAA4DD,GAPrF,OAOQE,EAPR,gFASe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAXjB,aAeYJ,EAASK,OAfrB,OAgBa,MAhBb,QAsBa,MAtBb,kDAiBmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASN,EAASO,QAnBlC,iCAuBmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,gBAA2B,CAChDC,aAAcV,EAASO,UA1B3C,iCA+BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MApCpB,yDADW,wDA4CEY,WA5CF,mCA4CX,wGACIC,KAAAA,OADJ,MACW,EADX,MAEIC,SAAAA,OAFJ,MAEeC,EAAAA,GAAAA,aAAAA,MAFf,WAIUhB,EAAAA,EAAAA,YAJV,gCAQyBA,EAAAA,EAAAA,UAAAA,UAAAA,wBAA0D,CACvEe,SAAUA,EACVD,KAAMA,IAVlB,OAQQb,EARR,gFAae,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAfjB,aAmBYJ,EAASK,OAnBrB,OAoBa,MApBb,kDAqBmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASN,EAASO,QAvBlC,iCA2BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MAhCpB,yDA5CW,wDAmFEgB,YAnFF,mCAmFX,WACIC,EACAC,GAFJ,uFAIUnB,EAAAA,EAAAA,YAJV,gCAQyBA,EAAAA,EAAAA,UAAAA,UAAAA,0BAA4D,CACzEkB,KAAMA,EACNC,cAAeA,IAV3B,OAQQlB,EARR,gFAae,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAfjB,aAmBYJ,EAASK,OAnBrB,OAoBa,MApBb,kDAqBmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASN,EAASO,QAvBlC,iCA2BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MAhCpB,yDAnFW,0DA0HEmB,YA1HF,mCA0HX,WAAyBC,GAAzB,uFACUrB,EAAAA,EAAAA,YADV,gCAKyBA,EAAAA,EAAAA,UAAAA,UAAAA,0BAA4DqB,GALrF,OAKQpB,EALR,gFAOe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MATjB,aAaYJ,EAASK,OAbrB,OAca,MAdb,QAoBa,MApBb,QA4Ba,MA5Bb,kDAemB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAAS,QAjBzB,iCAqBmB,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,gBAA2B,CAChDC,aAAcV,EAASO,UAxB3C,iCA6BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,gBAA2B,CAChDC,aAAcV,EAASO,UAhC3C,iCAqCmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MA1CpB,yDA1HW,wDAAI,CAA+BqB,EAAAA","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/UserGroupClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    ErrorMessageResponse,\n    PaginatedUserGroupResponse,\n    PermissionSet,\n    UserGroupCreateRequest,\n    UserGroupResponse,\n    UserGroupUpdateRequest\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\nexport type UpdateGroupErrors = GenericErrors | ErrorCode.GROUP_NOT_FOUND;\nexport type listGroupsErrors = GenericErrors;\nexport type CreateGroupErrors = GenericErrors;\nexport type DeleteGroupErrors =\n    | GenericErrors\n    | ErrorCode.GROUP_NOT_FOUND\n    | ErrorCode.GROUP_NOT_EMPTY;\n\nexport default new (class UserGroupClient extends ApiClient {\n    public async updateGroup(\n        group: UserGroupUpdateRequest\n    ): Promise<InternalStatus<UserGroupResponse, UpdateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.userGroup.userGroupControllerUpdate(group);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listGroups({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedUserGroupResponse, listGroupsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.userGroup.userGroupControllerList({\n                pageSize: pageSize,\n                page: page\n            });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedUserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createGroup(\n        name: string,\n        permissionSet?: PermissionSet\n    ): Promise<InternalStatus<UserGroupResponse, CreateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.userGroup.userGroupControllerCreate({\n                name: name,\n                permissionSet: permissionSet\n            } as UserGroupCreateRequest);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteGroup(id: number): Promise<InternalStatus<null, DeleteGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.userGroup.userGroupControllerDelete(id);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_EMPTY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["updateGroup","group","ServerClient","response","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","listGroups","page","pageSize","configOptions","createGroup","name","permissionSet","deleteGroup","id","ApiClient"],"sourceRoot":""}