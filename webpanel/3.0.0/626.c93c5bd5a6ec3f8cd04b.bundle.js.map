{"version":3,"file":"626.c93c5bd5a6ec3f8cd04b.bundle.js","mappings":"uOAYA,QAAe,sGACEA,SADF,mCACX,WAAsBC,GAAtB,uFACUC,EAAAA,EAAAA,YADV,gCAKyBA,EAAAA,EAAAA,UAAAA,SAAAA,2BACb,CACID,OAAQA,GAEZ,CACIE,QAAS,CACLC,OAAQ,gDAX5B,OAKQC,EALR,gFAgBe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAlBjB,aAsBYJ,EAASK,OAtBrB,OAuBa,MAvBb,QA6Ba,MA7Bb,kDAwBmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAAUN,EAASO,QA1BnC,iCA8BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,uBAAkC,CACvDC,aAAcV,EAASO,UAjC3C,iCAsCmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MA3CpB,yDADW,wDAmDEY,OAnDF,mCAmDX,WACIhB,EACAiB,GAFJ,uFAIUhB,EAAAA,EAAAA,YAJV,gCAQyBA,EAAAA,EAAAA,UAAAA,SAAAA,yBACb,CACID,OAAQA,GAEXiB,EACD,CACIf,QAAS,CACL,eAAgB,+BAfpC,OAQQE,EARR,gFAoBe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAtBjB,aA0BYJ,EAASK,OA1BrB,OA2Ba,MA3Bb,QAiCa,MAjCb,QAyCa,MAzCb,kDA4BmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAAS,QA9BzB,iCAkCmB,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,cAAyB,CAC9CK,MAAM,OArC1B,iCA0CmB,IAAIb,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,uBAAkC,CACvDC,aAAcV,EAASO,UA7C3C,iCAkDmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEE,cAAeX,GACjBA,MAvDpB,yDAnDW,0DAAI,CAA8Be,EAAAA","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/TransferClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type { ErrorMessageResponse } from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type DownloadErrors = GenericErrors | ErrorCode.TRANSFER_NOT_AVAILABLE;\nexport type UploadErrors =\n    | GenericErrors\n    | ErrorCode.TRANSFER_NOT_AVAILABLE\n    | ErrorCode.UPLOAD_FAILED;\n\nexport default new (class TransferClient extends ApiClient {\n    public async Download(ticket: string): Promise<InternalStatus<string, DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.transfer.transferControllerDownload(\n                {\n                    ticket: ticket\n                },\n                {\n                    headers: {\n                        Accept: \"application/json, application/octet-stream\"\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as unknown) as string\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async Upload(\n        ticket: string,\n        file: ArrayBuffer\n    ): Promise<InternalStatus<null, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.transfer.transferControllerUpload(\n                {\n                    ticket: ticket\n                },\n                (file as unknown) as File,\n                {\n                    headers: {\n                        \"Content-Type\": \"application/octect-stream\"\n                    }\n                }\n            );\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.UPLOAD_FAILED, {\n                        void: true\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["Download","ticket","ServerClient","headers","Accept","response","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","Upload","file","void","ApiClient"],"sourceRoot":""}