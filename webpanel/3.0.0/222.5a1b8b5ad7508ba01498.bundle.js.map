{"version":3,"file":"222.5a1b8b5ad7508ba01498.bundle.js","mappings":"2PAYA,QAAe,sGACEA,iBADF,mCACX,WACIC,GADJ,uFAGUC,EAAAA,EAAAA,YAHV,gCAOyBA,EAAAA,EAAAA,UAAAA,MAAAA,oBAAkD,CAC/DC,QAAS,CACLC,SAAUH,EAASI,cATnC,OAOQC,EAPR,gFAae,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAfjB,aAmBYJ,EAASK,OAnBrB,OAoBa,MApBb,kDAqBmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASN,EAASO,QAvBlC,iCA2BmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAeV,GACjBA,MAhCpB,yDADW,wDAwCEW,gBAxCF,mCAwCX,WACIhB,EADJ,6FAEMiB,KAAAA,OAFN,MAEa,EAFb,MAEgBC,SAAAA,OAFhB,MAE2BC,EAAAA,GAAAA,aAAAA,MAF3B,WAIUlB,EAAAA,EAAAA,YAJV,gCAQyBA,EAAAA,EAAAA,UAAAA,MAAAA,oBACb,CACIgB,KAAMA,EACNC,SAAUA,GAEd,CACIhB,QAAS,CACLC,SAAUH,EAASI,cAfvC,OAQQC,EARR,gFAoBe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAtBjB,aA0BYJ,EAASK,OA1BrB,OA2Ba,MA3Bb,kDA4BmB,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASN,EAASO,QA9BlC,iCAkCmB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAeV,GACjBA,MAvCpB,yDAxCW,0DAsFEe,aAtFF,mCAsFX,WACIpB,EACAqB,EACAC,GAHJ,2FAKUrB,EAAAA,EAAAA,YALV,gCASyBA,EAAAA,EAAAA,UAAAA,MAAAA,sBACb,CACIoB,QAASA,EACTE,kBAAmBD,GAEvB,CACIpB,QAAS,CACLC,SAAUH,EAASI,cAhBvC,OASQC,EATR,gFAqBe,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,EAAF,MAvBjB,aA2BYJ,EAASK,OA3BrB,OA4Ba,MA5Bb,MA6Ba,MA7Bb,8BA8BkBc,EAAenB,EAASO,MACba,WA/B7B,qBAgCoBH,EAhCpB,kCAiC4CI,EAAAA,EAAAA,OACpBF,EAAaC,WACbH,GAnCxB,YAiC0BK,EAjC1B,QAqCkCpB,OAASC,EAAAA,EAAAA,GArC3C,0CAsC+B,IAAIF,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASa,KAxCrC,iCA2C+B,IAAIlB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOkB,EAAUlB,SA7C7C,yDAiD2B,IAAIH,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,SAAoB,CACzCc,QAASC,MACL,4FArDhC,iCA4DmB,IAAIvB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASa,KA9DzB,iCAkEmB,IAAIlB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAeV,GACjBA,MAvEpB,yDAtFW,4DAAI,CAA2ByB,EAAAA","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ByondClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ByondInstallResponse,\n    ByondResponse,\n    PaginatedByondResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { UploadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\nexport default new (class ByondClient extends ApiClient {\n    public async getActiveVersion(\n        instance: number\n    ): Promise<InternalStatus<ByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listAllVersions(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerList(\n                {\n                    page: page,\n                    pageSize: pageSize\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async switchActive(\n        instance: number,\n        version: string,\n        file?: ArrayBuffer\n    ): Promise<InternalStatus<ByondInstallResponse, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerUpdate(\n                {\n                    version: version,\n                    uploadCustomZip: !!file\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const responseData = response.data as ByondInstallResponse;\n                if (responseData.fileTicket) {\n                    if (file) {\n                        const response2 = await TransferClient.Upload(\n                            responseData.fileTicket,\n                            file\n                        );\n                        if (response2.code === StatusCode.OK) {\n                            return new InternalStatus({\n                                code: StatusCode.OK,\n                                payload: responseData\n                            });\n                        } else {\n                            return new InternalStatus({\n                                code: StatusCode.ERROR,\n                                error: response2.error\n                            });\n                        }\n                    } else {\n                        return new InternalStatus({\n                            code: StatusCode.ERROR,\n                            error: new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\n                                    \"switchActive is uploading a custom zip without actually having a zip file to upload\"\n                                )\n                            })\n                        });\n                    }\n                }\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: responseData\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["getActiveVersion","instance","ServerClient","headers","Instance","toString","response","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","axiosResponse","listAllVersions","page","pageSize","configOptions","switchActive","version","file","uploadCustomZip","responseData","fileTicket","TransferClient","response2","jsError","Error","ApiClient"],"sourceRoot":""}