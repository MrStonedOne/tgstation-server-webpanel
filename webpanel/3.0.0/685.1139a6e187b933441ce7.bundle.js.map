{"version":3,"file":"685.1139a6e187b933441ce7.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n    }, [props.defaultValue]);\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n        onChange(currentValue);\n    }, [currentValue]);\n\n    const onChange = (newValue: InputFieldTypes) => {\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(newValue as boolean, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(newValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(newValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n    };\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon=\"info\" />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n    }, []);\n\n    Object.entries(props.fields).forEach(([id, field]) => {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    });\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputForm fields={fields} onSave={this.editInstance} />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["FieldType","StringControl","React","props","ref","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","useState","defaultValue","currentValue","setCurrentValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","innerid","newValue","basicControls","string","password","boolean","undefined","changed","overlay","tooltip","show","triggerHandler","style","visibility","icon","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","includeAll","onSave","JsonViewer","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","InstanceSettings","editInstance","bind","state","errors","addError","error","this","setState","Array","from","push","instance","InstanceClient","context","response","code","StatusCode","reloadInstance","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","InstanceManagerRights","path","chatBotLimit","autoUpdateInterval","configurationType","ConfigurationType","err","index","onClose","prev","newarr","contextType","InstanceEditContext","withRouter","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","bsPrefix","size","hasValidation","_ref$as","displayName","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}