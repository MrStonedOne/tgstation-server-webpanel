{"version":3,"file":"480.bda5501955afb6866a5d.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/AdminClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    AdministrationResponse,\n    ErrorMessageResponse,\n    LogFileResponse,\n    PaginatedLogFileResponse\n} from \"./generatedcode/generated\";\nimport { DownloadedLog } from \"./models/DownloadedLog\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { DownloadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\ninterface IEvents {\n    loadAdminInfo: (user: InternalStatus<AdministrationResponse, AdminInfoErrors>) => void;\n}\n\nexport type AdminInfoErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type RestartErrors = GenericErrors | ErrorCode.ADMIN_WATCHDOG_UNAVAIL;\n\nexport type UpdateErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_WATCHDOG_UNAVAIL\n    | ErrorCode.ADMIN_VERSION_NOT_FOUND\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type LogsErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport type LogErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport default new (class AdminClient extends ApiClient<IEvents> {\n    private _cachedAdminInfo?: InternalStatus<AdministrationResponse, ErrorCode.OK>;\n    public get cachedAdminInfo() {\n        return this._cachedAdminInfo;\n    }\n    private loadingAdminInfo = false;\n\n    public constructor() {\n        super();\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedAdminInfo = undefined;\n        });\n    }\n\n    public async getAdminInfo(): Promise<InternalStatus<AdministrationResponse, AdminInfoErrors>> {\n        await ServerClient.wait4Init();\n        if (this._cachedAdminInfo) {\n            return this._cachedAdminInfo;\n        }\n\n        if (this.loadingAdminInfo) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<AdministrationResponse, AdminInfoErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadAdminInfo\", resolver);\n                };\n                this.on(\"loadAdminInfo\", resolver);\n            });\n        }\n\n        this.loadingAdminInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerRead();\n        } catch (stat) {\n            const res = new InternalStatus<AdministrationResponse, AdminInfoErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<AdminInfoErrors>\n            });\n            this.emit(\"loadAdminInfo\", res);\n            this.loadingAdminInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<AdministrationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as AdministrationResponse\n                });\n\n                this._cachedAdminInfo = thing;\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_RATE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_ERROR\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", res);\n                this.loadingAdminInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async restartServer(): Promise<InternalStatus<null, RestartErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerDelete();\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<RestartErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateServer(newVersion: string): Promise<InternalStatus<null, UpdateErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerUpdate({\n                newVersion\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<UpdateErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_VERSION_NOT_FOUND,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_RATE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_ERROR>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLogs({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedLogFileResponse, LogsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerListLogs(\n                {\n                    pageSize: pageSize,\n                    page: page\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<LogsErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedLogFileResponse\n                });\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLog(\n        logName: string\n    ): Promise<InternalStatus<DownloadedLog, LogErrors | DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerGetLog(\n                logName\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                const contents = await TransferClient.Download(\n                    (response.data as LogFileResponse).fileTicket\n                );\n                if (contents.code === StatusCode.OK) {\n                    //Object.assign() is a funky function but all it does is copy everything from the second object to the first object\n                    const temp: DownloadedLog = Object.assign(\n                        { content: contents.payload },\n                        response.data as LogFileResponse\n                    );\n                    return new InternalStatus({\n                        code: StatusCode.OK,\n                        payload: temp\n                    });\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: contents.error\n                    });\n                }\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["_cachedAdminInfo","loadingAdminInfo","ServerClient","undefined","getAdminInfo","this","Promise","resolve","on","resolver","user","removeListener","response","res","InternalStatus","code","StatusCode","error","emit","status","thing","payload","data","errorMessage","InternalError","ErrorCode","axiosResponse","restartServer","updateServer","newVersion","getLogs","page","pageSize","configOptions","getLog","logName","TransferClient","fileTicket","contents","temp","Object","assign","content","ApiClient"],"sourceRoot":""}