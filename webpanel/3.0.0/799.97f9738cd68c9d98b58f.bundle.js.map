{"version":3,"file":"799.97f9738cd68c9d98b58f.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/ChangePassword.tsx"],"sourcesContent":["import React, { ChangeEvent, FormEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport type { UserResponse } from \"../../ApiClient/generatedcode/generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../contexts/GeneralContext\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    loading: boolean;\n    pwdload?: boolean;\n    user?: UserResponse;\n    userId: number;\n    currentUser: boolean;\n}\n\nclass ChangePassword extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n\n        if (!context?.user) {\n            throw Error(\"ChangePassword: this.context?.user is null!\");\n        }\n\n        let id: number;\n        if (props.match.params.id) {\n            id = parseInt(props.match.params.id);\n        } else {\n            id = context.user.id;\n        }\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            userId: id,\n            currentUser: context.user.id === id,\n            loading: true\n        };\n\n        this.submit = this.submit.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const user = await UserClient.getUser(this.state.userId);\n        if (user.code == StatusCode.OK) {\n            this.setState({\n                user: user.payload\n            });\n        } else {\n            this.addError(user.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    // noinspection DuplicatedCode\n    private async submit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"changepassword submit: this.user is falsy\")\n                })\n            );\n            return;\n        }\n\n        event.preventDefault();\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        if (err) return;\n\n        this.setState({\n            pwdload: true\n        });\n\n        const res = await UserClient.editUser({\n            password: this.state.password1,\n            id: this.state.user.id\n        });\n        switch (res.code) {\n            case StatusCode.OK: {\n                if (this.state.currentUser) {\n                    // noinspection ES6MissingAwait //we just dont care about what happens, it can fail or succeed\n                    void ServerClient.login({\n                        type: CredentialsType.Password,\n                        userName: this.state.user.name,\n                        password: this.state.password1\n                    });\n                }\n\n                this.props.history.goBack();\n                break;\n            }\n            case StatusCode.ERROR: {\n                this.addError(res.error);\n                //we only unset it here because its going to get redirected anyways\n                this.setState({\n                    pwdload: false\n                });\n                break;\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.info\" />;\n        }\n        if (this.state.pwdload) {\n            return <Loading text=\"loading.passwd\" />;\n        }\n\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <Form onSubmit={this.submit}>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.user ? (\n                        <React.Fragment>\n                            <h3>\n                                <FormattedMessage id=\"view.user.passwd.title\" />\n                                {this.state.user.name}({this.state.user.id})\n                            </h3>\n                            <hr />\n                            <Form.Group controlId=\"password1\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd1Input}\n                                    value={this.state.password1}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.lengthError ? (\n                                        <React.Fragment>\n                                            <FormattedMessage id=\"login.password.repeat.short\" />\n                                            {this.context.serverInfo.minimumPasswordLength}\n                                        </React.Fragment>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId=\"password2\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password.repeat\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd2Input}\n                                    value={this.state.password2}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.matchError ? (\n                                        <FormattedMessage id=\"login.password.repeat.match\" />\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                </Col>\n            </Form>\n        );\n    }\n}\nChangePassword.contextType = GeneralContext;\nexport default withRouter(ChangePassword);\n"],"names":["ChangePassword","props","context","id","user","Error","match","params","parseInt","state","errors","password1","password2","userId","currentUser","loading","submit","bind","componentDidMount","UserClient","this","code","StatusCode","setState","payload","addError","error","prevState","Array","from","push","event","InternalError","ErrorCode","jsError","preventDefault","err","length","serverInfo","minimumPasswordLength","lengthError","matchError","pwdload","password","res","ServerClient","type","CredentialsType","userName","name","history","goBack","render","text","onSubmit","className","lg","md","map","index","key","onClose","prev","newarr","undefined","controlId","onChange","target","value","isInvalid","React","contextType","GeneralContext","withRouter"],"sourceRoot":""}