{"version":3,"sources":["webpack:///./src/components/views/Instance/Create.tsx"],"names":["withRouter","props","state","loading","errors","submit","bind","error","this","setState","prevState","Array","from","push","serverInformationStatus","ServerClient","getServerInfo","code","StatusCode","OK","addError","serverInformation","payload","prefix","validInstancePaths","length","undefined","text","className","map","err","index","key","onClose","prev","newarr","id","onSubmit","lg","md","Group","controlId","Label","Control","type","onChange","event","instanceName","target","value","required","Prepend","Text","as","custom","validPath","selected","instancePath","variant","result","InstanceClient","createInstance","name","path","ERROR","RouteData","instanceid","toString","history","AppRoutes","instancelist","link","route","React","Component"],"mappings":"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","file":"20.90da37b3cd2a2c6b75a2.js","sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    instanceName?: string;\n    instancePath?: string;\n    serverInformation?: Components.Schemas.ServerInformation;\n    prefix?: string;\n}\n\ninterface IProps extends RouteComponentProps {}\n\nexport default withRouter(\n    class InstanceCreate extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n            this.state = {\n                loading: true,\n                errors: []\n            };\n\n            this.submit = this.submit.bind(this);\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        public async componentDidMount() {\n            const serverInformationStatus = await ServerClient.getServerInfo();\n            if (serverInformationStatus.code !== StatusCode.OK) {\n                this.setState({\n                    loading: false\n                });\n                this.addError(serverInformationStatus.error);\n            } else {\n                const serverInformation = serverInformationStatus.payload;\n                this.setState({\n                    loading: false,\n                    serverInformation,\n                    prefix: serverInformation.validInstancePaths?.length\n                        ? serverInformation.validInstancePaths[0]\n                        : undefined\n                });\n            }\n        }\n\n        public render(): React.ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"view.instance.create.loading\" />;\n            }\n\n            const validInstancePaths = this.state.serverInformation?.validInstancePaths;\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <h3>\n                        <FormattedMessage id=\"view.instance.create.title\" />\n                    </h3>\n                    <Form onSubmit={this.submit}>\n                        <Col className=\"mx-auto\" lg={5} md={8}>\n                            <Form.Group controlId=\"name\">\n                                <Form.Label>\n                                    <h5>\n                                        <FormattedMessage id=\"view.instance.create.name\" />\n                                    </h5>\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    onChange={event => {\n                                        const instanceName = event.target.value;\n                                        this.setState({\n                                            instanceName\n                                        });\n                                    }}\n                                    value={this.state.instanceName}\n                                    required\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"path\">\n                                <Form.Label>\n                                    <h5>\n                                        <FormattedMessage id=\"view.instance.create.path\" />\n                                    </h5>\n                                </Form.Label>\n                                <InputGroup className=\"mb-1\">\n                                    {validInstancePaths != null ? (\n                                        <InputGroup.Prepend className=\"flex-grow-1 flex-grow-md-0\">\n                                            <InputGroup.Text>\n                                                <span>\n                                                    <FormattedMessage id=\"view.instance.create.path.prefix\" />\n                                                </span>\n                                            </InputGroup.Text>\n                                            <Form.Control\n                                                className=\"rounded-0 flex-grow-1 flex-grow-md-0 flex-shrink-0 flex-shrink-md-1 w-auto\"\n                                                as=\"select\"\n                                                custom\n                                                required\n                                                onChange={event => {\n                                                    this.setState({\n                                                        prefix: event.target.value\n                                                    });\n                                                }}>\n                                                {validInstancePaths.map(validPath => {\n                                                    return (\n                                                        <option\n                                                            key={validPath}\n                                                            value={validPath}\n                                                            selected={\n                                                                this.state.prefix == validPath\n                                                            }>\n                                                            {validPath}/\n                                                        </option>\n                                                    );\n                                                })}\n                                            </Form.Control>\n                                        </InputGroup.Prepend>\n                                    ) : null}\n                                    <Form.Control\n                                        type=\"text\"\n                                        className=\"flex-grow-1 w-100 w-md-auto\"\n                                        required\n                                        onChange={event => {\n                                            const instancePath = event.target.value;\n                                            this.setState({\n                                                instancePath\n                                            });\n                                        }}\n                                        value={this.state.instancePath}\n                                    />\n                                </InputGroup>\n                            </Form.Group>\n                            <Button type=\"submit\" variant=\"success\">\n                                <FormattedMessage id=\"view.instance.create.submit\" />\n                            </Button>\n                        </Col>\n                    </Form>\n                </div>\n            );\n        }\n\n        private async submit() {\n            //The required attribute should prevent this from ever happening but id rather not fuck over someone\n            if (!this.state.instancePath) {\n                return;\n            }\n\n            const instancePath =\n                (this.state.prefix ? this.state.prefix + \"/\" : \"\") + this.state.instancePath;\n\n            this.setState({\n                loading: true\n            });\n\n            const result = await InstanceClient.createInstance({\n                name: this.state.instanceName!,\n                path: instancePath,\n                id: 0\n            });\n\n            if (result.code === StatusCode.ERROR) {\n                this.setState({\n                    loading: false\n                });\n                this.addError(result.error);\n\n                return;\n            }\n\n            RouteData.instanceid = result.payload.id.toString();\n\n            this.props.history.push(AppRoutes.instancelist.link || AppRoutes.instancelist.route);\n        }\n    }\n);\n"],"sourceRoot":""}