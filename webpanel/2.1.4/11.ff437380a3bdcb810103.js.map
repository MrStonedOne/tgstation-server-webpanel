{"version":3,"sources":["webpack:///./src/ApiClient/UserGroupClient.ts"],"names":["id","group","response","ServerClient","wait4Init","requestObj","Object","assign","apiClient","UserGroupController_Update","e","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","GROUP_NOT_FOUND","errorMessage","UNHANDLED_RESPONSE","axiosResponse","UserGroupController_List","pageSize","page","content","name","permissionSet","UserGroupController_Create","UserGroupController_Delete","GROUP_NOT_EMPTY","ApiClient"],"mappings":"+tDAqBe,qB,kOAAA,U,MAAA,4E,EAAA,G,EAAA,0CAEPA,EACAC,GAIA,IAAIC,QAFEC,IAAaC,YAGnB,IAGI,IAAMC,EAA2CC,OAAOC,OACpDD,OAAOC,OAAO,GAAIN,GAClB,CAAED,GAAIA,IAEVE,QAAiBC,IAAaK,UAAWC,2BAA2B,KAAMJ,GAC5E,MAAOK,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUC,gBAAiB,CAChDC,aAAcrB,EAASiB,SAInC,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAevB,GACjBA,SA5CT,0FAwDP,IAAIA,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaK,UAAWkB,yBAAyB,CAC9DC,SAAU,IACVC,KAAM,IAEZ,MAAOlB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAUhB,EAASiB,KAAgDU,UAG3E,QACI,OAAO,IAAIlB,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAevB,GACjBA,SAlFT,sFA0FP4B,EACAC,GAIA,IAAI7B,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaK,UAAWwB,2BAA2B,KAAM,CACtEF,KAAMA,EACNC,cAAeA,IAErB,MAAOrB,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAShB,EAASiB,OAG1B,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAevB,GACjBA,SAzHT,yFAgIcF,GAGrB,IAAIE,QAFEC,IAAaC,YAGnB,IACIF,QAAiBC,IAAaK,UAAWyB,2BAA2B,CAAEjC,GAAIA,IAC5E,MAAOU,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAOL,IAIf,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,IAAWI,GACjBC,QAAS,OAGjB,KAAK,IACD,OAAO,IAAIP,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUa,gBAAiB,CAChDX,aAAcrB,EAASiB,SAInC,KAAK,IACD,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IAAcC,IAAUC,gBAAiB,CAChDC,aAAcrB,EAASiB,SAInC,QACI,OAAO,IAAIR,IAAe,CACtBC,KAAMC,IAAWC,MACjBC,MAAO,IAAIK,IACPC,IAAUG,mBACV,CAAEC,cAAevB,GACjBA,SA1KT,iD,2BAAA,GAAmCiC","file":"11.ff437380a3bdcb810103.js","sourcesContent":["import { ApiClient } from \"./_base\";\n//https://stackoverflow.com/questions/40510611/typescript-interface-require-one-of-two-properties-to-exist\n//name describes what it does, makes the passed type only require 1 property, the others being optional\nimport { Components } from \"./generatedcode/_generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n    {\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n    }[Keys];\n\nexport type UpdateGroupErrors = GenericErrors | ErrorCode.GROUP_NOT_FOUND;\nexport type listGroupsErrors = GenericErrors;\nexport type CreateGroupErrors = GenericErrors;\nexport type DeleteGroupErrors =\n    | GenericErrors\n    | ErrorCode.GROUP_NOT_FOUND\n    | ErrorCode.GROUP_NOT_EMPTY;\n\nexport default new (class UserGroupClient extends ApiClient {\n    public async updateGroup(\n        id: number,\n        group: RequireAtLeastOne<Omit<Omit<Components.Schemas.UserGroup, \"id\">, \"users\">>\n    ): Promise<InternalStatus<Components.Schemas.UserGroup, UpdateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            //God I hate how awful JS can look sometimes, this creates a copy of the group argument and overrides the id property\n            // on the copy to be the id argument. This is so the argument isn't mutated\n            const requestObj: Components.Schemas.UserGroup = Object.assign(\n                Object.assign({}, group),\n                { id: id }\n            ) as Components.Schemas.UserGroup;\n            response = await ServerClient.apiClient!.UserGroupController_Update(null, requestObj);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserGroup\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessage\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listGroups(): Promise<\n        InternalStatus<Components.Schemas.UserGroup[], listGroupsErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_List({\n                pageSize: 100,\n                page: 1\n            });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as Components.Schemas.PaginatedUserGroup)!.content\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createGroup(\n        name: string,\n        permissionSet?: Components.Schemas.PermissionSet\n    ): Promise<InternalStatus<Components.Schemas.UserGroup, CreateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Create(null, {\n                name: name,\n                permissionSet: permissionSet\n            } as Components.Schemas.UserGroup);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Components.Schemas.UserGroup\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteGroup(id: number): Promise<InternalStatus<null, DeleteGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.UserGroupController_Delete({ id: id });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_EMPTY, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessage\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as Components.Schemas.ErrorMessage\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}