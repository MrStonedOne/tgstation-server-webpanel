{"version":3,"sources":["webpack:///./src/components/views/Instance/Hosting/Byond.tsx"],"names":["Byond","props","state","versions","errors","activeVersion","latestVersion","selectedVersion","loading","error","this","setState","prevState","Array","from","push","response","ByondClient","listAllVersions","instance","id","code","StatusCode","OK","payload","content","response2","getActiveVersion","version","addError","loadVersions","fetch","then","res","text","data","split","catch","e","InternalError","ErrorCode","APP_FAIL","jsError","Error","selfInstancePermissionSet","byondRights","ByondRights","ListInstalled","ReadActive","map","err","index","key","onClose","prev","newarr","undefined","onChange","switchActive","target","value","className","Prepend","Radio","disabled","InstallOfficialOrChangeActiveVersion","name","defaultChecked","Append","as","htmlFor","overlay","innerid","Fragment","show","endsWith","ref","triggerHandler","Text","substr","length","fixedWidth","icon","type","defaultValue","arr","join","variant","onClick","customFile","arrayBuffer","ERROR","File","custom","label","accept","files","React","Component"],"mappings":"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","file":"5.6626d0d549a7430ad313.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport ByondClient from \"../../../../ApiClient/ByondClient\";\nimport { ByondRights } from \"../../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../../ApiClient/generatedcode/_generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport AccessDenied from \"../../../utils/AccessDenied\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps {\n    instance: Components.Schemas.Instance;\n    selfPermissionSet: Components.Schemas.PermissionSet;\n    selfInstancePermissionSet: Components.Schemas.InstancePermissionSet;\n}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: Components.Schemas.Byond[];\n    activeVersion?: string | null;\n    latestVersion: string;\n    selectedVersion: string;\n    loading: boolean;\n    customFile?: File | null;\n}\n\nexport default class Byond extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            activeVersion: \"\",\n            latestVersion: \"\",\n            selectedVersion: \"\",\n            loading: true\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        const response = await ByondClient.listAllVersions(this.props.instance.id);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                versions: response.payload!.content\n            });\n\n            const response2 = await ByondClient.getActiveVersion(this.props.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.version\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                this.setState({\n                    latestVersion: version,\n                    selectedVersion: version,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n                this.setState({\n                    loading: false\n                });\n            });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        // noinspection JSBitwiseOperatorUsage\n        if (\n            !(\n                this.props.selfInstancePermissionSet.byondRights! & ByondRights.ListInstalled &&\n                this.props.selfInstancePermissionSet.byondRights! & ByondRights.ReadActive\n            )\n        ) {\n            return <AccessDenied />;\n        }\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <div>\n                <h1>\n                    <FormattedMessage id=\"view.instance.hosting.byond\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <div\n                    onChange={async (e: ChangeEvent<HTMLInputElement>) => {\n                        this.setState({\n                            loading: true\n                        });\n                        const response = await ByondClient.switchActive(\n                            this.props.instance.id,\n                            e.target.value\n                        );\n                        if (response.code === StatusCode.OK) {\n                            await this.loadVersions();\n                        } else {\n                            this.addError(response.error);\n                        }\n                        this.setState({\n                            loading: false\n                        });\n                    }}>\n                    {this.state.versions.map(version => {\n                        // noinspection JSBitwiseOperatorUsage\n                        return (\n                            <InputGroup className=\"w-25 mb-1 mx-auto d-flex\" key={version.version}>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Radio\n                                        disabled={\n                                            !(\n                                                this.props.selfInstancePermissionSet.byondRights! &\n                                                ByondRights.InstallOfficialOrChangeActiveVersion\n                                            )\n                                        }\n                                        name=\"byond\"\n                                        id={version.version!}\n                                        value={version.version!}\n                                        defaultChecked={\n                                            version.version! === this.state.activeVersion\n                                        }\n                                    />\n                                </InputGroup.Prepend>\n                                <InputGroup.Append\n                                    className=\"flex-grow-1 m-0\"\n                                    as=\"label\"\n                                    htmlFor={version.version!}>\n                                    <OverlayTrigger\n                                        overlay={tooltip(\"view.instance.hosting.byond.custom\")}\n                                        show={!version.version!.endsWith(\".0\") ? undefined : false}>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"w-100\" {...triggerHandler}>\n                                                {version.version!.endsWith(\".0\")\n                                                    ? version.version!.substr(\n                                                          0,\n                                                          version.version!.length - 2\n                                                      )\n                                                    : version.version}\n                                                {!version.version!.endsWith(\".0\") ? (\n                                                    <div\n                                                        className={\"ml-auto\"}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                ) : null}\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        );\n                    })}\n                </div>\n                <hr />\n                <h4>\n                    <FormattedMessage id=\"view.instance.hosting.byond.add\" />\n                </h4>\n                <InputGroup className=\"w-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            variant=\"success\"\n                            onClick={async () => {\n                                this.setState({\n                                    loading: true\n                                });\n                                const response = await ByondClient.switchActive(\n                                    this.props.instance.id,\n                                    this.state.selectedVersion,\n                                    this.state.customFile\n                                        ? await this.state.customFile.arrayBuffer()\n                                        : undefined\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    this.addError(response.error);\n                                } else {\n                                    this.setState({\n                                        customFile: null\n                                    });\n                                    await this.loadVersions();\n                                }\n                                this.setState({\n                                    loading: false\n                                });\n                            }}>\n                            <FontAwesomeIcon icon=\"plus\" />\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <Form.File\n                        custom\n                        id=\"test\"\n                        className=\"w-25 text-left\"\n                        label={\n                            this.state.customFile ? (\n                                this.state.customFile.name\n                            ) : (\n                                <FormattedMessage id=\"view.instance.hosting.byond.upload\" />\n                            )\n                        }\n                        accept=\".zip\"\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            this.setState({\n                                customFile: e.target.files ? e.target.files[0] : null\n                            });\n                        }}\n                    />\n                </Form>\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}