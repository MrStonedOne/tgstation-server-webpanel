{"version":3,"sources":["webpack:///./src/components/views/Instance/List.tsx"],"names":["withRouter","props","setOnline","bind","actualid","undefined","RouteData","instanceid","parseInt","state","loading","instances","errors","canOnline","canCreate","error","this","setState","prevState","Array","from","push","instancelist","InstanceClient","listInstances","modifiedlist","code","StatusCode","OK","work","payload","instance","modifiedinstance","online","InstancePermissionSetClient","getCurrentInstancePermissionSet","id","then","permissionset","canAccess","ErrorCode","HTTP_ACCESS_DENIED","addError","Promise","all","sort","a","b","loadInstances","UserClient","getCurrentUser","userinfo","instanceManagerRights","resolvePermissionSet","InstanceManagerRights","SetOnline","Create","desiredState","instanceedit","editInstance","text","tablecellstyling","verticalAlign","className","map","err","index","key","onClose","prev","newarr","striped","bordered","hover","variant","responsive","value","toString","style","name","moveJob","path","configurationType","onClick","disabled","renderAddInstance","history","AppRoutes","instancecode","link","route","instancehosting","instanceconfig","instancejobs","overlay","show","ref","triggerHandler","instancecreate","icon","faPlus","React","Component"],"mappings":"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","file":"22.c80e2e1833920ebd8a20.js","sourcesContent":["import { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { CSSProperties, ReactNode } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Table from \"react-bootstrap/Table\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { InstanceManagerRights } from \"../../../ApiClient/generatedcode/_enums\";\nimport { Components } from \"../../../ApiClient/generatedcode/_generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ntype Instance = Components.Schemas.Instance & {\n    canAccess: boolean;\n};\n\ninterface IState {\n    instances: Instance[];\n    loading?: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    //isnt directly used but is used to make react rerender when the selected insance is changed\n    instanceid?: number;\n    canOnline: boolean;\n    canCreate: boolean;\n}\ninterface IProps extends RouteComponentProps {}\n\nexport default withRouter(\n    class InstanceList extends React.Component<IProps, IState> {\n        public constructor(props: IProps) {\n            super(props);\n\n            this.setOnline = this.setOnline.bind(this);\n\n            const actualid =\n                RouteData.instanceid !== undefined ? parseInt(RouteData.instanceid) : undefined;\n\n            this.state = {\n                loading: true,\n                instances: [],\n                errors: [],\n                instanceid: actualid,\n                canOnline: false,\n                canCreate: false\n            };\n        }\n\n        private addError(error: InternalError<ErrorCode>): void {\n            this.setState(prevState => {\n                const errors = Array.from(prevState.errors);\n                errors.push(error);\n                return {\n                    errors\n                };\n            });\n        }\n\n        private async loadInstances(): Promise<void> {\n            const instancelist = await InstanceClient.listInstances();\n            const modifiedlist: Array<Instance> = [];\n\n            if (instancelist.code == StatusCode.OK) {\n                const work: Array<Promise<void>> = [];\n                for (const instance of instancelist.payload) {\n                    const modifiedinstance = instance as Instance;\n                    if (instance.online) {\n                        work.push(\n                            InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                                instance.id\n                            ).then(permissionset => {\n                                if (permissionset.code == StatusCode.OK) {\n                                    modifiedinstance.canAccess = true;\n                                } else {\n                                    modifiedinstance.canAccess = false;\n                                    if (permissionset.error.code !== ErrorCode.HTTP_ACCESS_DENIED) {\n                                        this.addError(permissionset.error);\n                                    }\n                                }\n                                modifiedlist.push(modifiedinstance);\n                            })\n                        );\n                    } else {\n                        modifiedinstance.canAccess = false;\n                        modifiedlist.push(modifiedinstance);\n                    }\n                }\n\n                await Promise.all(work);\n\n                this.setState({\n                    instances: modifiedlist.sort((a, b) => a.id - b.id)\n                });\n            } else {\n                this.addError(instancelist.error);\n            }\n        }\n\n        public async componentDidMount(): Promise<void> {\n            await this.loadInstances();\n\n            await UserClient.getCurrentUser().then(userinfo => {\n                if (userinfo.code === StatusCode.OK) {\n                    const instanceManagerRights = resolvePermissionSet(userinfo.payload)\n                        .instanceManagerRights!;\n                    this.setState({\n                        canOnline: !!(instanceManagerRights & InstanceManagerRights.SetOnline),\n                        canCreate: !!(instanceManagerRights & InstanceManagerRights.Create)\n                    });\n                } else {\n                    this.addError(userinfo.error);\n                }\n            });\n\n            this.setState({\n                loading: false\n            });\n        }\n\n        private async setOnline(instance: Instance) {\n            //Yes this is desynchronized and will use the last known state of the instance\n            // to determine what state we should put it in, thats intentional, if the user clicks Set Online, it needs\n            // to be online, no matter what it previously was\n            const desiredState = !instance.online;\n            const instanceedit = await InstanceClient.editInstance(({\n                id: instance.id,\n                online: desiredState\n            } as unknown) as Components.Schemas.Instance);\n            if (instanceedit.code === StatusCode.OK) {\n                await this.loadInstances();\n            } else {\n                this.addError(instanceedit.error);\n            }\n        }\n\n        public render(): ReactNode {\n            if (this.state.loading) {\n                return <Loading text=\"loading.instance.list\" />;\n            }\n\n            const tablecellstyling: CSSProperties = {\n                verticalAlign: \"middle\"\n            };\n\n            return (\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <h3>\n                        <FormattedMessage id=\"view.instance.list.title\" />\n                    </h3>\n                    <Table striped bordered hover variant=\"dark\" responsive className=\"mb-4\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>\n                                    <FormattedMessage id=\"generic.name\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.online\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.path\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.configmode\" />\n                                </th>\n                                <th>\n                                    <FormattedMessage id=\"generic.action\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.instances.map(value => {\n                                return (\n                                    <tr\n                                        key={value.id}\n                                        className={\n                                            value.id.toString() === RouteData.instanceid\n                                                ? \"font-weight-bold\"\n                                                : \"\"\n                                        }>\n                                        <td style={tablecellstyling}>{value.id}</td>\n                                        <td style={tablecellstyling}>{value.name}</td>\n                                        <td style={tablecellstyling}>\n                                            {value.online! ? (\n                                                <Badge variant=\"success\">\n                                                    <FormattedMessage id=\"generic.online\" />\n                                                </Badge>\n                                            ) : (\n                                                <Badge variant=\"danger\">\n                                                    <FormattedMessage id=\"generic.offline\" />\n                                                </Badge>\n                                            )}\n                                        </td>\n                                        <td style={tablecellstyling}>\n                                            {value.moveJob ? (\n                                                <FormattedMessage id=\"view.instance.moving\" />\n                                            ) : (\n                                                value.path\n                                            )}\n                                        </td>\n                                        <td style={tablecellstyling}>\n                                            <FormattedMessage\n                                                id={`view.instance.configmode.${value.configurationType!.toString()}`}\n                                            />\n                                        </td>\n                                        <td className=\"align-middle p-1\" style={tablecellstyling}>\n                                            <Button\n                                                className=\"mx-1\"\n                                                variant={\n                                                    value.id.toString() === RouteData.instanceid\n                                                        ? \"success\"\n                                                        : \"primary\"\n                                                }\n                                                onClick={() => {\n                                                    RouteData.instanceid = value.id.toString();\n                                                    this.setState({\n                                                        instanceid: value.id\n                                                    });\n                                                }}\n                                                disabled={\n                                                    !value.canAccess ||\n                                                    value.id.toString() === RouteData.instanceid\n                                                }>\n                                                <FormattedMessage id=\"generic.select\" />\n                                            </Button>\n                                            <Button\n                                                className=\"mx-1\"\n                                                variant={value.online ? \"danger\" : \"success\"}\n                                                onClick={() => this.setOnline(value)}\n                                                disabled={!this.state.canOnline}>\n                                                <FormattedMessage\n                                                    id={`view.instance.list.set.${\n                                                        value.online ? \"offline\" : \"online\"\n                                                    }`}\n                                                />\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </Table>\n                    <div className=\"align-middle\">\n                        <div className=\"mb-4\">{this.renderAddInstance()}</div>\n                        <Button\n                            className=\"mx-1\"\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.instancecode.link || AppRoutes.instancecode.route\n                                );\n                            }}\n                            disabled={this.state.instanceid === undefined}>\n                            <FormattedMessage id=\"routes.instancecode\" />\n                        </Button>\n                        <Button\n                            className=\"mx-1\"\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.instancehosting.link ||\n                                        AppRoutes.instancehosting.route\n                                );\n                            }}\n                            disabled={this.state.instanceid === undefined}>\n                            <FormattedMessage id=\"routes.instancehosting\" />\n                        </Button>\n                        <Button\n                            className=\"mx-1\"\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.instanceconfig.link || AppRoutes.instanceconfig.route\n                                );\n                            }}\n                            disabled={this.state.instanceid === undefined}>\n                            <FormattedMessage id=\"routes.instanceconfig\" />\n                        </Button>\n                        <Button\n                            className=\"mx-1\"\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.instancejobs.link || AppRoutes.instancejobs.route\n                                );\n                            }}\n                            disabled={this.state.instanceid === undefined}>\n                            <FormattedMessage id=\"routes.instancejobs\" />\n                        </Button>\n                    </div>\n                </div>\n            );\n        }\n\n        private renderAddInstance(): React.ReactNode {\n            return (\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id=\"create-instance-tooltip\">\n                            <FormattedMessage id=\"perms.instance.create.warning\" />\n                        </Tooltip>\n                    }\n                    show={this.state.canCreate ? false : undefined}>\n                    {({ ref, ...triggerHandler }) => (\n                        <Button\n                            ref={ref}\n                            className=\"mx-1\"\n                            variant=\"success\"\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.instancecreate.link || AppRoutes.instancecreate.route\n                                );\n                            }}\n                            disabled={!this.state.canCreate}\n                            {...triggerHandler}>\n                            <div>\n                                <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                                <FormattedMessage id=\"routes.instancecreate\" />\n                            </div>\n                        </Button>\n                    )}\n                </OverlayTrigger>\n            );\n        }\n    }\n);\n"],"sourceRoot":""}