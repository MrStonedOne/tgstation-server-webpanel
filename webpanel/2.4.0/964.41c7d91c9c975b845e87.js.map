{"version":3,"file":"964.41c7d91c9c975b845e87.js","mappings":"o+DAuBMA,EAAAA,SAAAA,I,8oBAGF,WAAmBC,GAAe,a,4FAAA,UAC9B,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,MAEpB,EAAKC,MAAQ,CACTC,OAAQ,IANkB,E,oCAUlC,SAAiBC,GACbC,KAAKC,UAAS,SAAAC,GACV,IAAMJ,EAASK,MAAMC,KAAKF,EAAUJ,QAEpC,OADAA,EAAOO,KAAKN,GACL,CACHD,OAAAA,Q,6BAKZ,UAA2BQ,GACvB,IAAMC,QAAiBC,EAAAA,EAAAA,aAAA,OAChBF,GADgB,IAEnBG,GAAIT,KAAKU,QAAQJ,SAASG,MAE1BF,EAASI,OAASC,EAAAA,EAAAA,GAClBZ,KAAKU,QAAQG,iBAEbb,KAAKc,SAASP,EAASR,Q,kPAI/B,WAAiC,WACvBgB,EAAc,SAACC,GACjB,OAAOC,EAAAA,EAAAA,KAAwBC,EAAAA,EAAAA,IAAqB,EAAKR,QAAQS,MAAOH,IAGtEI,EAAS,CACXC,KAAM,CACFA,KAAM,uBACNC,KAAMC,EAAAA,GAAAA,OACNC,aAAcxB,KAAKU,QAAQJ,SAASe,KACpCI,UAAWV,EAAYW,EAAAA,GAAAA,SAE3BC,KAAM,CACFN,KAAM,uBACNC,KAAMC,EAAAA,GAAAA,OACNC,aAAcxB,KAAKU,QAAQJ,SAASqB,KACpCF,UAAWV,EAAYW,EAAAA,GAAAA,WAE3BE,aAAc,CACVP,KAAM,+BACNC,KAAMC,EAAAA,GAAAA,OACNM,IAAK,EACLL,aAAcxB,KAAKU,QAAQJ,SAASsB,aACpCH,UAAWV,EAAYW,EAAAA,GAAAA,kBAE3BI,mBAAoB,CAChBT,KAAM,6BACNC,KAAMC,EAAAA,GAAAA,OACNM,IAAK,EACLL,aAAcxB,KAAKU,QAAQJ,SAASwB,mBACpCL,UAAWV,EAAYW,EAAAA,GAAAA,gBAE3BK,kBAAmB,CACfV,KAAM,2BACNC,KAAMC,EAAAA,GAAAA,KACNS,KAAMC,EAAAA,GACNT,aAAcxB,KAAKU,QAAQJ,SAASyB,kBACpCN,UAAWV,EAAYW,EAAAA,GAAAA,oBAI/B,OACI,uBAAKQ,UAAU,eACX,gBAAC,IAAD,CAAiBC,IAAKnC,KAAKU,UAC1BV,KAAKH,MAAMC,OAAOsC,KAAI,SAACC,EAAKC,GACzB,GAAKD,EACL,OACI,gBAAC,KAAD,CACIE,IAAKD,EACLvC,MAAOsC,EACPG,QAAS,kBACL,EAAKvC,UAAS,SAAAwC,GACV,IAAMC,EAASvC,MAAMC,KAAKqC,EAAK3C,QAE/B,OADA4C,EAAOJ,QAASK,EACT,CACH7C,OAAQ4C,YAQhC,gBAAC,IAAD,CAAWtB,OAAQA,EAAQwB,OAAQ5C,KAAKL,mB,sBAlGlDF,CAAyBoD,EAAAA,WAuG/BpD,EAAiBqD,YAAcC,EAAAA,EAC/B,WAAeC,EAAAA,EAAAA,IAAWvD","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx"],"sourcesContent":["import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { InstanceUpdateRequest } from \"../../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputForm fields={fields} onSave={this.editInstance} />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n"],"names":["InstanceSettings","props","editInstance","bind","state","errors","error","this","setState","prevState","Array","from","push","instance","response","InstanceClient","id","context","code","StatusCode","reloadInstance","addError","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","name","type","FieldType","defaultValue","disabled","InstanceManagerRights","path","chatBotLimit","min","autoUpdateInterval","configurationType","enum","ConfigurationType","className","obj","map","err","index","key","onClose","prev","newarr","undefined","onSave","React","contextType","InstanceEditContext","withRouter"],"sourceRoot":""}