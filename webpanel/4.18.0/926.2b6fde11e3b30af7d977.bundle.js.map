{"version":3,"file":"926.2b6fde11e3b30af7d977.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/WIPNotice.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Files.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","import {\r\n    faDownload,\r\n    faFile,\r\n    faFileAlt,\r\n    faFolderMinus,\r\n    faFolderPlus,\r\n    faTimes\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { downloadZip } from \"client-zip\";\r\nimport React from \"react\";\r\nimport { Button, ButtonGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\r\n\r\nimport ConfigurationFileClient from \"../../../../ApiClient/ConfigurationFileClient\";\r\nimport {\r\n    ConfigurationFileResponse,\r\n    ConfigurationRights,\r\n    ConfigurationType\r\n} from \"../../../../ApiClient/generatedcode/generated\";\r\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\r\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\r\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\r\nimport { hasFilesRight } from \"../../../../utils/misc\";\r\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\r\nimport GenericAlert from \"../../../utils/GenericAlert\";\r\nimport { FieldType } from \"../../../utils/InputField\";\r\nimport InputForm from \"../../../utils/InputForm\";\r\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\r\nimport Loading from \"../../../utils/Loading\";\r\nimport WIPNotice from \"../../../utils/WIPNotice\";\r\n\r\n// https://stackoverflow.com/questions/24007073/open-links-made-by-createobjecturl-in-ie11/45732897#45732897\r\nconst downloadFileUsingBlob = (fileName: string, fileData: Blob) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\r\n    const unknownNav = window.navigator as any;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n    if (unknownNav && unknownNav.msSaveOrOpenBlob) {\r\n        // for IE\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n        unknownNav.msSaveOrOpenBlob(fileData, fileName);\r\n    } else {\r\n        // for Non-IE (chrome, firefox etc.)\r\n        const a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        const fileUrl = URL.createObjectURL(fileData);\r\n        a.href = fileUrl;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        a.download = fileName;\r\n        a.click();\r\n        URL.revokeObjectURL(a.href);\r\n        a.remove();\r\n    }\r\n};\r\n\r\ninterface CreateEntitySettings {\r\n    entityName: string;\r\n    isDirectory: boolean;\r\n    replace?: boolean;\r\n}\r\n\r\nclass DirectoryTree {\r\n    public parent: DirectoryTree | null;\r\n    public children: DirectoryTree[];\r\n    public fileResponse: ConfigurationFileResponse;\r\n    public totalFiles: number | undefined;\r\n    public fullyLoaded = false;\r\n\r\n    public constructor(fileResponse: ConfigurationFileResponse, parent?: DirectoryTree) {\r\n        this.fileResponse = fileResponse;\r\n        this.parent = parent ?? null;\r\n        if (!fileResponse.isDirectory) this.fullyLoaded = true;\r\n        this.children = [];\r\n    }\r\n}\r\n\r\ninterface IProps extends WrappedComponentProps {}\r\n\r\ninterface IState {\r\n    errors: Array<InternalError<ErrorCode> | undefined>;\r\n    rootDirectory: DirectoryTree | null;\r\n    loading: boolean;\r\n    selectedFile: DirectoryTree | null;\r\n    selectedCreateNode: DirectoryTree | null;\r\n}\r\n\r\nclass Files extends React.Component<IProps, IState> {\r\n    public declare context: InstanceEditContext;\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errors: [],\r\n            rootDirectory: null,\r\n            loading: true,\r\n            selectedFile: null,\r\n            selectedCreateNode: null\r\n        };\r\n\r\n        this.createEntity = this.createEntity.bind(this);\r\n        this.selectFile = this.selectFile.bind(this);\r\n        this.shortAsyncAction = this.shortAsyncAction.bind(this);\r\n        this.deleteFile = this.deleteFile.bind(this);\r\n        this.loadDirectory = this.loadDirectory.bind(this);\r\n        this.clearDirectory = this.clearDirectory.bind(this);\r\n    }\r\n\r\n    private addError(error: InternalError<ErrorCode>): void {\r\n        this.setState(prevState => {\r\n            const errors = Array.from(prevState.errors);\r\n            errors.push(error);\r\n            return {\r\n                errors\r\n            };\r\n        });\r\n    }\r\n\r\n    public async componentDidMount(): Promise<void> {\r\n        await this.loadRootDir();\r\n    }\r\n\r\n    private async loadRootDir() {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n            const mockResponse = {\r\n                path: \"/\",\r\n                isDirectory: true,\r\n                fileTicket: \"\"\r\n            };\r\n            const rootDirectory = new DirectoryTree(mockResponse);\r\n            await this.loadDirectory(rootDirectory);\r\n\r\n            this.setState({\r\n                rootDirectory: rootDirectory,\r\n                loading: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    private async shortAsyncAction(action: () => Promise<void>): Promise<void> {\r\n        const actionPromise = action();\r\n\r\n        // only set state to loading if it's taking more than 750ms\r\n        let tookTooLong = false;\r\n        const tooLongPromise = new Promise(r => setTimeout(r, 750)).then(() => {\r\n            tookTooLong = true;\r\n        });\r\n\r\n        await Promise.race([actionPromise, tooLongPromise]);\r\n\r\n        if (tookTooLong) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            await actionPromise;\r\n\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        } else this.forceUpdate();\r\n    }\r\n\r\n    private async deleteDirectory(dir: DirectoryTree): Promise<void> {\r\n        const response = await ConfigurationFileClient.deleteDirectory(this.context.instance.id, {\r\n            path: dir.fileResponse.path\r\n        });\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            if (dir.parent != null) {\r\n                const parentIndex = dir.parent.children.indexOf(dir);\r\n                dir.parent.children.splice(parentIndex, 1);\r\n                this.forceUpdate();\r\n            }\r\n        } else {\r\n            this.addError(response.error);\r\n        }\r\n    }\r\n\r\n    private async loadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.clearDirectory(directory);\r\n\r\n            const path =\r\n                directory.fileResponse.path[0] === \"\\\\\" || directory.fileResponse.path[0] === \"/\"\r\n                    ? directory.fileResponse.path.slice(1)\r\n                    : directory.fileResponse.path;\r\n            let maxPages = 1;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const response = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (response.code === StatusCode.OK) {\r\n                    maxPages = response.payload.totalPages;\r\n                    if (maxPages <= page) directory.fullyLoaded = true;\r\n                    const newChildren = response.payload.content.map(\r\n                        c => new DirectoryTree(c, directory)\r\n                    );\r\n                    for (const c of newChildren) {\r\n                        directory.children.push(c);\r\n                    }\r\n                } else {\r\n                    this.addError(response.error);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            directory.children = directory.children\r\n                .sort() // alphabetize first\r\n                .reverse()\r\n                .sort((_, b) => (b.fileResponse.isDirectory ? 1 : 0));\r\n        }\r\n    }\r\n\r\n    private async selectFile(file: DirectoryTree): Promise<void> {\r\n        if (this.state.selectedFile === file) {\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n            return;\r\n        }\r\n\r\n        let doctoredPath = file.fileResponse.path;\r\n        while (doctoredPath.startsWith(\"/\")) doctoredPath = doctoredPath.substring(1);\r\n\r\n        if (!file.fileResponse.isDirectory) {\r\n            const response = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                doctoredPath,\r\n                false\r\n            );\r\n\r\n            const success = response.code === StatusCode.OK;\r\n            if (success) {\r\n                file.fileResponse = response.payload;\r\n            } else {\r\n                this.addError(response.error);\r\n                file.fileResponse.lastReadHash = null;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            selectedFile: file,\r\n            selectedCreateNode: null\r\n        });\r\n    }\r\n\r\n    private async deleteFile(): Promise<void> {\r\n        const selectedFile = this.state.selectedFile!;\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: selectedFile.fileResponse.path,\r\n                lastReadHash: selectedFile.fileResponse.lastReadHash\r\n            },\r\n            new Uint8Array()\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            const parentDirectory = selectedFile.parent!;\r\n            const parentIndex = parentDirectory.children.indexOf(selectedFile);\r\n            parentDirectory.children.splice(parentIndex, 1);\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n        } else this.addError(response.error);\r\n    }\r\n\r\n    private async downloadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (\r\n            !confirm(\r\n                this.props.intl.formatMessage(\r\n                    { id: \"view.instance.files.zip.confirm\" },\r\n                    { path: directory.fileResponse.path }\r\n                )\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const enumerateDirectory = async (\r\n            dir: ConfigurationFileResponse\r\n        ): Promise<ConfigurationFileResponse[] | null> => {\r\n            let children: ConfigurationFileResponse[] = [];\r\n            let maxPages = 1;\r\n\r\n            const path = dir.path[0] === \"\\\\\" || dir.path[0] === \"/\" ? dir.path.slice(1) : dir.path;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const directoryResponse = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (directoryResponse.code === StatusCode.OK) {\r\n                    maxPages = directoryResponse.payload.totalPages;\r\n                    children = children.concat(directoryResponse.payload.content);\r\n                } else {\r\n                    this.addError(directoryResponse.error);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return children;\r\n        };\r\n\r\n        let errorEncountered = false;\r\n        const downloadSingleFile = async (\r\n            file: ConfigurationFileResponse\r\n        ): Promise<File | null> => {\r\n            const fileResponse = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                file.path,\r\n                true\r\n            );\r\n\r\n            const pathInZip = file.path.substring(directory.fileResponse.path.length);\r\n            if (fileResponse.code === StatusCode.OK) {\r\n                const download = fileResponse.payload;\r\n                const file = new File([download.content!], pathInZip);\r\n                return file;\r\n            }\r\n\r\n            this.addError(fileResponse.error);\r\n            errorEncountered = true;\r\n            return null;\r\n        };\r\n\r\n        let directoriesToEnumerate: ConfigurationFileResponse[] = [directory.fileResponse];\r\n\r\n        const fileDownloads: Promise<File | null>[] = [];\r\n\r\n        while (directoriesToEnumerate.length > 0) {\r\n            const tasks: Promise<ConfigurationFileResponse[] | null>[] = [];\r\n            directoriesToEnumerate.forEach(directory => tasks.push(enumerateDirectory(directory)));\r\n            directoriesToEnumerate = [];\r\n            await Promise.all(tasks);\r\n\r\n            if (errorEncountered) {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                return;\r\n            }\r\n\r\n            for (const task of tasks) {\r\n                const dirInfo = await task;\r\n                if (dirInfo == null) {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                dirInfo.forEach(directoryEntry => {\r\n                    if (directoryEntry.isDirectory) {\r\n                        directoriesToEnumerate.push(directoryEntry);\r\n                    } else {\r\n                        fileDownloads.push(downloadSingleFile(directoryEntry));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        await Promise.all(fileDownloads);\r\n        if (errorEncountered) {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        const downloadFiles: File[] = [];\r\n        for (const fileDownload of fileDownloads) {\r\n            downloadFiles.push((await fileDownload)!);\r\n        }\r\n\r\n        const zipBlob = await downloadZip(downloadFiles).blob();\r\n\r\n        const index = Math.max(\r\n            directory.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            directory.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n\r\n        const fileName = directory.fileResponse.path.slice(index + 1) + \".zip\";\r\n        downloadFileUsingBlob(fileName, zipBlob);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async downloadFile(): Promise<void> {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const selectedFile = this.state.selectedFile!;\r\n        const response = await ConfigurationFileClient.getConfigFile(\r\n            this.context.instance.id,\r\n            selectedFile.fileResponse.path,\r\n            true\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            const index = Math.max(\r\n                selectedFile.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n                selectedFile.fileResponse.path.lastIndexOf(\"/\")\r\n            );\r\n            const fileName = selectedFile.fileResponse.path.slice(index + 1);\r\n\r\n            downloadFileUsingBlob(fileName, response.payload.content!);\r\n        } else this.addError(response.error);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async createEntity(\r\n        settings: CreateEntitySettings,\r\n        parent: DirectoryTree\r\n    ): Promise<void> {\r\n        let fileData: ArrayBuffer;\r\n        if (settings.isDirectory) {\r\n            fileData = new Uint8Array();\r\n        } else {\r\n            const inputPromise = new Promise<File | null>(resolve => {\r\n                const input = document.createElement(\"input\");\r\n                input.type = \"file\";\r\n                input.onchange = e => {\r\n                    const files = (e.target as HTMLInputElement)?.files;\r\n                    if (files) resolve(files[0]);\r\n                    else resolve(null);\r\n                };\r\n                input.click();\r\n            });\r\n\r\n            const localFile = await inputPromise;\r\n            if (!localFile) return;\r\n\r\n            // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\r\n            fileData = await localFile.arrayBuffer();\r\n        }\r\n\r\n        this.setState({ loading: true });\r\n\r\n        let remoteFilePath = parent.fileResponse.path;\r\n        if (!settings.replace) remoteFilePath += \"/\" + settings.entityName;\r\n        else remoteFilePath = \"/\" + remoteFilePath;\r\n        if (remoteFilePath.startsWith(\"//\")) remoteFilePath = remoteFilePath.substring(1);\r\n        if (settings.isDirectory) remoteFilePath += \"/webpanel.dir.create.tmp\";\r\n\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: remoteFilePath,\r\n                lastReadHash: settings.replace ? parent.fileResponse.lastReadHash : null\r\n            },\r\n            fileData\r\n        );\r\n\r\n        if (response.code !== StatusCode.OK) {\r\n            this.addError(response.error);\r\n        } else if (settings.replace) {\r\n            parent.fileResponse = response.payload;\r\n        }\r\n\r\n        if (!settings.replace) {\r\n            parent.fullyLoaded = false;\r\n            await this.loadDirectory(parent);\r\n        }\r\n\r\n        let normalizedRemotePath = remoteFilePath.replace(\"\\\\\", \"/\");\r\n        if (normalizedRemotePath.startsWith(\"/\"))\r\n            normalizedRemotePath = normalizedRemotePath.substring(1);\r\n        const newFileNode =\r\n            parent.children.find(child =>\r\n                normalizedRemotePath.startsWith(child.fileResponse.path.replace(\"\\\\\", \"/\"))\r\n            ) ?? null;\r\n\r\n        if (newFileNode)\r\n            if (settings.isDirectory) {\r\n                await this.loadDirectory(newFileNode);\r\n                this.setState({\r\n                    selectedCreateNode: null,\r\n                    selectedFile: null\r\n                });\r\n            } else await this.selectFile(newFileNode);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private clearDirectory(directory: DirectoryTree): void {\r\n        // reload the directory\r\n        directory.fullyLoaded = false;\r\n        directory.children.forEach(child => {\r\n            if (child === this.state.selectedFile)\r\n                this.setState({\r\n                    selectedFile: null\r\n                });\r\n            else if (child === this.state.selectedCreateNode)\r\n                this.setState({\r\n                    selectedCreateNode: null\r\n                });\r\n            if (child.fileResponse.isDirectory) this.clearDirectory(child);\r\n        });\r\n\r\n        directory.children = [];\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        if (this.state.loading) {\r\n            return <Loading text=\"loading.instance.files\" />;\r\n        }\r\n\r\n        const instanceConfigMode = this.context.instance.configurationType;\r\n\r\n        if (instanceConfigMode === ConfigurationType.Disallowed) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <GenericAlert title=\"view.instance.files.disallowed\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const canListDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.List\r\n        );\r\n\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <DebugJsonViewer obj={this.state} />\r\n                <h2 className=\"text-center\">\r\n                    <FormattedMessage id=\"view.instance.files.file_browser\" />\r\n                </h2>\r\n                {this.state.errors.map((err, index) => {\r\n                    if (!err) return;\r\n                    return (\r\n                        <ErrorAlert\r\n                            key={index}\r\n                            error={err}\r\n                            onClose={() =>\r\n                                this.setState(prev => {\r\n                                    const newarr = Array.from(prev.errors);\r\n                                    newarr[index] = undefined;\r\n                                    return {\r\n                                        errors: newarr\r\n                                    };\r\n                                })\r\n                            }\r\n                        />\r\n                    );\r\n                })}\r\n                <div className=\"d-flex flex-row\">\r\n                    {canListDirectories ? (\r\n                        <div\r\n                            className=\"text-left\"\r\n                            style={{\r\n                                paddingRight: \"16px\",\r\n                                maxHeight: \"800px\",\r\n                                minWidth: \"200px\",\r\n                                overflowY: \"scroll\"\r\n                            }}>\r\n                            {this.renderDirectory(this.state.rootDirectory!)}\r\n                        </div>\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                maxWidth: \"200px\"\r\n                            }}>\r\n                            <GenericAlert title=\"view.instance.files.disallowed.directory\" />\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className=\"flex-fill flex-column text-center align-self-center\"\r\n                        style={{ padding: \"16px\" }}>\r\n                        {!canWrite ? (\r\n                            <GenericAlert title=\"view.instance.files.disallowed.write\" />\r\n                        ) : (\r\n                            <React.Fragment />\r\n                        )}\r\n                        {this.state.selectedCreateNode ? (\r\n                            this.renderCreate()\r\n                        ) : this.state.selectedFile ? (\r\n                            this.renderSelectedFile()\r\n                        ) : canListDirectories ? (\r\n                            <h4>\r\n                                <FormattedMessage id=\"view.instance.files.select_item\" />\r\n                            </h4>\r\n                        ) : (\r\n                            this.renderBrowserlessForms()\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDirectory(dir: DirectoryTree): React.ReactNode {\r\n        const index = Math.max(\r\n            dir.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            dir.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const selected = dir === this.state.selectedFile;\r\n        if (!dir.fileResponse.isDirectory) {\r\n            const fileName = dir.fileResponse.path.slice(index + 1);\r\n            return (\r\n                <li className=\"browser-li\">\r\n                    <Button\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}\r\n                        className=\"nowrap\">\r\n                        <FontAwesomeIcon icon={faFileAlt} />\r\n                        &nbsp;{fileName}\r\n                    </Button>\r\n                </li>\r\n            );\r\n        }\r\n\r\n        const directoryName =\r\n            dir == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : dir.fileResponse.path.slice(index + 1);\r\n\r\n        return (\r\n            <div className=\"mb-2\">\r\n                <ButtonGroup>\r\n                    <Button\r\n                        variant={!dir.fullyLoaded ? \"secondary\" : \"primary\"}\r\n                        onClick={() => {\r\n                            if (dir.fullyLoaded) {\r\n                                this.clearDirectory(dir);\r\n                                this.forceUpdate();\r\n                            } else {\r\n                                void this.shortAsyncAction(() => this.loadDirectory(dir));\r\n                            }\r\n                        }}>\r\n                        <FontAwesomeIcon icon={dir.fullyLoaded ? faFolderMinus : faFolderPlus} />\r\n                    </Button>\r\n                    <Button\r\n                        className=\"nowrap\"\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}>\r\n                        {directoryName}\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <ul className=\"browser-ul\">\r\n                    {dir.children.map(subDir => (\r\n                        <li key={subDir.fileResponse.path}>{this.renderDirectory(subDir)}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderCreate(): React.ReactNode {\r\n        const fields = {\r\n            entityName: {\r\n                type: FieldType.String as FieldType.String,\r\n                name: \"fields.instance.files.create.name\",\r\n                tooltip: \"fields.instance.files.create.name.tip\",\r\n                defaultValue: \"\"\r\n            },\r\n            isDirectory: {\r\n                type: FieldType.Boolean as FieldType.Boolean,\r\n                name: \"fields.instance.files.create.directory\",\r\n                defaultValue: false\r\n            }\r\n        };\r\n\r\n        const createNode = this.state.selectedCreateNode!;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>\r\n                    {createNode.fileResponse.path}\r\n                    {createNode.parent ? \"/\" : \"\"}\r\n                </h5>\r\n                <h5>\r\n                    <FormattedMessage id=\"view.instance.files.create\" />\r\n                </h5>\r\n                <hr />\r\n                <InputForm\r\n                    fields={fields}\r\n                    onSave={(fields: CreateEntitySettings) =>\r\n                        void this.createEntity(fields, createNode)\r\n                    }\r\n                    saveMessageId=\"fields.instance.files.create\"\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderSelectedFile(): React.ReactNode {\r\n        const canRead = hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.Read);\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        const fileDirectoryTree = this.state.selectedFile!;\r\n        const index = Math.max(\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const fileName = fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n\r\n        const fileIsNotRefreshed =\r\n            !fileDirectoryTree.fileResponse.isDirectory &&\r\n            !fileDirectoryTree.fileResponse.lastReadHash;\r\n\r\n        const directoryName =\r\n            fileDirectoryTree == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n        const selectedCreateNode = this.state.selectedCreateNode === fileDirectoryTree;\r\n\r\n        const canDeleteDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Delete\r\n        );\r\n\r\n        let headerText = fileDirectoryTree.fileResponse.path.replaceAll(\"\\\\\", \"/\");\r\n        if (!headerText.startsWith(\"/\")) headerText = \"/\" + headerText;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>{headerText}</h5>\r\n                <hr />\r\n                <div className=\"mb-3\">\r\n                    {!fileDirectoryTree.fileResponse.isDirectory ? (\r\n                        <React.Fragment>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-download-location-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.download.location\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canRead}\r\n                                    onClick={() => void this.downloadFile()}>\r\n                                    <FormattedMessage id=\"view.instance.files.download\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"warning\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() =>\r\n                                        void this.createEntity(\r\n                                            {\r\n                                                entityName: fileName,\r\n                                                isDirectory: false,\r\n                                                replace: true\r\n                                            },\r\n                                            fileDirectoryTree\r\n                                        )\r\n                                    }>\r\n                                    <FormattedMessage id=\"view.instance.files.replace\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip-delete\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    { id: \"view.instance.files.delete.confirm\" },\r\n                                                    { path: fileDirectoryTree.fileResponse.path }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() => this.deleteFile());\r\n                                    }}>\r\n                                    <FormattedMessage id=\"view.instance.files.delete\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => void this.downloadDirectory(fileDirectoryTree)}>\r\n                                <FontAwesomeIcon icon={faDownload} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.download.directory\" />\r\n                            </Button>\r\n                            <Button\r\n                                variant={selectedCreateNode ? \"secondary\" : \"primary\"}\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => {\r\n                                    if (this.state.selectedCreateNode != fileDirectoryTree) {\r\n                                        this.setState({\r\n                                            selectedCreateNode: fileDirectoryTree\r\n                                        });\r\n                                    }\r\n                                }}>\r\n                                <FontAwesomeIcon icon={faFile} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.create\" />\r\n                            </Button>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={\r\n                                    canDeleteDirectories &&\r\n                                    fileDirectoryTree.fullyLoaded &&\r\n                                    fileDirectoryTree.children.length === 0\r\n                                        ? false\r\n                                        : undefined\r\n                                }\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"cant-delete-dir-tooltip\" {...props}>\r\n                                        <FormattedMessage\r\n                                            id={\r\n                                                !fileDirectoryTree.fullyLoaded\r\n                                                    ? \"view.instance.files.delete.directory.populated.unloaded\"\r\n                                                    : canDeleteDirectories\r\n                                                    ? \"view.instance.files.delete.directory.populated\"\r\n                                                    : \"view.instance.files.disallowed.directory.delete\"\r\n                                            }\r\n                                        />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2 nowrap\"\r\n                                    disabled={\r\n                                        !fileDirectoryTree.fullyLoaded ||\r\n                                        !canDeleteDirectories ||\r\n                                        fileDirectoryTree.children.length > 0 ||\r\n                                        fileDirectoryTree == this.state.rootDirectory\r\n                                    }\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    {\r\n                                                        id:\r\n                                                            \"view.instance.files.delete.directory.confirm\"\r\n                                                    },\r\n                                                    { directoryName }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() =>\r\n                                                this.deleteDirectory(fileDirectoryTree)\r\n                                            );\r\n                                    }}>\r\n                                    <FontAwesomeIcon icon={faTimes} />\r\n                                    &nbsp;\r\n                                    <FormattedMessage id=\"view.instance.files.delete.directory\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderBrowserlessForms(): React.ReactNode {\r\n        return <WIPNotice />;\r\n    }\r\n}\r\n\r\nFiles.contextType = InstanceEditContext;\r\nexport default injectIntl(Files);\r\n"],"names":["WIPNotice","React","render","className","border","id","href","as","VERSION","MODE","window","location","toString","downloadFileUsingBlob","fileName","fileData","unknownNav","navigator","msSaveOrOpenBlob","a","document","createElement","body","appendChild","fileUrl","URL","createObjectURL","download","click","revokeObjectURL","remove","DirectoryTree","constructor","fileResponse","parent","children","totalFiles","fullyLoaded","this","isDirectory","Files","props","super","state","errors","rootDirectory","loading","selectedFile","selectedCreateNode","createEntity","bind","selectFile","shortAsyncAction","deleteFile","loadDirectory","clearDirectory","addError","error","setState","prevState","Array","from","push","loadRootDir","hasFilesRight","context","instancePermissionSet","ConfigurationRights","path","fileTicket","action","actionPromise","tookTooLong","tooLongPromise","Promise","r","setTimeout","then","race","forceUpdate","dir","response","ConfigurationFileClient","instance","code","StatusCode","parentIndex","indexOf","splice","directory","slice","maxPages","page","payload","totalPages","newChildren","content","map","c","sort","reverse","_","b","file","doctoredPath","startsWith","substring","lastReadHash","Uint8Array","parentDirectory","confirm","intl","formatMessage","enumerateDirectory","async","directoryResponse","concat","errorEncountered","downloadSingleFile","pathInZip","length","File","directoriesToEnumerate","fileDownloads","tasks","forEach","all","task","dirInfo","directoryEntry","downloadFiles","fileDownload","zipBlob","downloadZip","blob","index","Math","max","lastIndexOf","settings","inputPromise","resolve","input","type","onchange","e","files","target","localFile","arrayBuffer","remoteFilePath","replace","entityName","normalizedRemotePath","newFileNode","find","child","text","configurationType","ConfigurationType","title","canListDirectories","canWrite","obj","err","key","onClose","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","renderDirectory","maxWidth","padding","renderCreate","renderSelectedFile","renderBrowserlessForms","selected","variant","onClick","icon","faFileAlt","directoryName","faFolderMinus","faFolderPlus","subDir","fields","FieldType","name","tooltip","defaultValue","createNode","onSave","saveMessageId","canRead","fileDirectoryTree","fileIsNotRefreshed","canDeleteDirectories","headerText","replaceAll","downloadDirectory","faDownload","faFile","placement","show","overlay","disabled","deleteDirectory","faTimes","downloadFile","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}