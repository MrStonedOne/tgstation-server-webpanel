{"version":3,"file":"345.ec93e728b18ecaafa8f4.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/InstancePermissions.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Tab.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabContainer.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabContent.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/TabPane.js","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/Tabs.js"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Alert, Col, Form, InputGroup, Tab, Tabs } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    AdministrationRights,\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    InstanceManagerRights,\n    InstancePermissionSetResponse,\n    InstancePermissionSetRights,\n    InstanceResponse,\n    RepositoryRights,\n    UserGroup,\n    UserResponse\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../../ApiClient/UserClient\";\nimport UserGroupClient from \"../../../../ApiClient/UserGroupClient\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport {\n    hasAdminRight,\n    hasInstanceManagerRight,\n    hasInstancePermRight,\n    resolvePermissionSet\n} from \"../../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField, { AnyEnum, FieldType } from \"../../../utils/InputField\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\n\ninterface Permission {\n    readonly bitflag: number;\n    readonly currentVal: boolean;\n}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    loadingPerms: boolean;\n    instanceNeedsReload: boolean;\n    tab: string;\n    users?: UserResponse[] | null;\n    groups?: UserGroup[] | null;\n    instancePermissionSets?: InstancePermissionSetResponse[];\n    selectedPermissionSetId: number;\n    userPermissions: InstancePermissionSetResponse;\n    currentPermissions: InstancePermissionSetResponse | null;\n    permsinstancepermissionset: Record<string, Permission>;\n    permsrepository: Record<string, Permission>;\n    permsbyond: Record<string, Permission>;\n    permsdreammaker: Record<string, Permission>;\n    permsdreamdaemon: Record<string, Permission>;\n    permschatbots: Record<string, Permission>;\n    permsconfiguration: Record<string, Permission>;\n}\n\nclass InstancePermissions extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadCurrentPermissions = this.loadCurrentPermissions.bind(this);\n        this.createPermissionSetForCurrent = this.createPermissionSetForCurrent.bind(this);\n        this.grantPermissions = this.grantPermissions.bind(this);\n\n        this.state = {\n            errors: [],\n            loading: true,\n            loadingPerms: true,\n            instanceNeedsReload: false,\n            tab: \"instancepermissionsetperms\",\n            userPermissions: {\n                permissionSetId: 0,\n                instancePermissionSetRights: 0,\n                repositoryRights: 0,\n                byondRights: 0,\n                dreamMakerRights: 0,\n                dreamDaemonRights: 0,\n                chatBotRights: 0,\n                configurationRights: 0\n            }, // updated correctly in DidMount using context\n            currentPermissions: null,\n            selectedPermissionSetId: 0,\n            permsinstancepermissionset: {},\n            permsrepository: {},\n            permsbyond: {},\n            permsdreammaker: {},\n            permsdreamdaemon: {},\n            permschatbots: {},\n            permsconfiguration: {}\n        };\n    }\n\n    private loadEnums(newPermissionSet: InstancePermissionSetResponse): void {\n        this.setState({\n            currentPermissions: newPermissionSet\n        });\n\n        const loadEnum = <\n            T extends Record<string, string | number>,\n            U extends keyof typeof newPermissionSet,\n            V extends keyof typeof this.state\n        >(\n            permEnum: T,\n            permSourceField: U,\n            permTargetField: V\n        ) => {\n            Object.entries(permEnum).forEach(([k, v]) => {\n                /* enums are objects that are reverse mapped, for example, an enum with a = 1 and b = 2 would look like this:\n                 * {\n                 *   \"a\": 1,\n                 *   \"b\": 2,\n                 *   1: \"a\",\n                 *   2: \"b\"\n                 * }\n                 * so we need to drop everything that doesnt resolve to a string because otherwise we end up with twice the values\n                 */\n                if (!isNaN(parseInt(k))) return;\n\n                const key = k.toLowerCase();\n                const val = v as number;\n\n                //we dont care about nothing\n                if (key == \"none\") return;\n\n                const currentVal = !!(newPermissionSet[permSourceField] & val);\n                this.setState(\n                    prevState =>\n                        (({\n                            [permTargetField]: {\n                                ...(prevState[permTargetField] as Record<string, Permission>),\n                                [key]: {\n                                    currentVal: currentVal,\n                                    bitflag: val\n                                }\n                            }\n                        } as unknown) as IState)\n                );\n            });\n        };\n\n        loadEnum(\n            InstancePermissionSetRights,\n            \"instancePermissionSetRights\",\n            \"permsinstancepermissionset\"\n        );\n        loadEnum(RepositoryRights, \"repositoryRights\", \"permsrepository\");\n        loadEnum(ByondRights, \"byondRights\", \"permsbyond\");\n        loadEnum(DreamMakerRights, \"dreamMakerRights\", \"permsdreammaker\");\n        loadEnum(DreamDaemonRights, \"dreamDaemonRights\", \"permsdreamdaemon\");\n        loadEnum(ChatBotRights, \"chatBotRights\", \"permschatbots\");\n        loadEnum(ConfigurationRights, \"configurationRights\", \"permsconfiguration\");\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadCurrentPermissions(selectedPermissionSetId: number) {\n        this.setState({\n            loadingPerms: true\n        });\n\n        if (selectedPermissionSetId === resolvePermissionSet(this.context.user).id) {\n            // This can hit the cache and seem \"too\" fast.\n            // slow it down a little\n            const sanicSpeedLimit = new Promise(r => setTimeout(r, 200));\n            const response = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.context.instance.id,\n                true\n            );\n            await sanicSpeedLimit;\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    userPermissions: response.payload\n                });\n\n                this.loadEnums(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        } else if (\n            hasInstancePermRight(\n                this.context.instancePermissionSet,\n                InstancePermissionSetRights.Read\n            )\n        ) {\n            const response = await InstancePermissionSetClient.getByPermissionSetId(\n                this.context.instance.id,\n                selectedPermissionSetId\n            );\n            if (response.code === StatusCode.OK) {\n                this.loadEnums(response.payload);\n            } else if (response.error.code == ErrorCode.NO_DB_ENTITY) {\n                // null it out, meaning it can be created\n                this.setState({\n                    currentPermissions: null\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        this.setState({\n            loadingPerms: false\n        });\n    }\n\n    private async loadUsersAndGroups(): Promise<void> {\n        const permissionSet = resolvePermissionSet(this.context.user);\n\n        if (!hasAdminRight(permissionSet, AdministrationRights.ReadUsers)) {\n            // leave as null so we know to use local data to parse\n            this.setState({\n                groups: null,\n                users: null\n            });\n            return;\n        }\n\n        let loadedFromRemote = false;\n\n        // load all users\n        const usersResponsePromise = UserClient.listUsers({\n            page: 1,\n            pageSize: 100\n        });\n        const groupsResponse = await UserGroupClient.listGroups({\n            page: 1,\n            pageSize: 100\n        });\n\n        loadedFromRemote = true;\n        if (groupsResponse.code === StatusCode.OK) {\n            this.setState({\n                groups: groupsResponse.payload.content\n            });\n        } else {\n            this.addError(groupsResponse.error);\n            loadedFromRemote = false;\n        }\n\n        // only add in users whose permission sets aren't covered by groups\n        const usersResponse = await usersResponsePromise;\n        if (usersResponse.code === StatusCode.OK) {\n            this.setState({\n                users: usersResponse.payload.content.filter(userResponse => !userResponse.group)\n            });\n        } else {\n            this.addError(usersResponse.error);\n            loadedFromRemote = false;\n        }\n\n        if (!loadedFromRemote) {\n            if (this.context.user.group) {\n                // best we can do\n                this.setState({\n                    groups: [this.context.user.group],\n                    users: []\n                });\n            } else {\n                this.setState({\n                    groups: [],\n                    users: [this.context.user]\n                });\n            }\n        }\n    }\n\n    private async loadAllPermissionSets(): Promise<void> {\n        let loadedPermissionSets = false;\n        if (\n            hasInstancePermRight(\n                this.context.instancePermissionSet,\n                InstancePermissionSetRights.Read\n            )\n        ) {\n            const response = await InstancePermissionSetClient.listInstancePermissionSets(\n                this.context.instance.id,\n                {\n                    page: 1,\n                    pageSize: 100\n                }\n            );\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSets: response.payload.content\n                });\n                loadedPermissionSets = true;\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (!loadedPermissionSets) {\n            this.setState({\n                instancePermissionSets: [this.context.instancePermissionSet]\n            });\n        }\n    }\n\n    private async createPermissionSetForCurrent(): Promise<void> {\n        const response = await InstancePermissionSetClient.createInstancePermissionSet(\n            this.context.instance.id,\n            {\n                permissionSetId: this.state.selectedPermissionSetId\n            }\n        );\n\n        if (response.code != StatusCode.OK) {\n            this.addError(response.error);\n        } else {\n            this.setState({\n                currentPermissions: response.payload\n            });\n        }\n    }\n\n    private async grantPermissions(): Promise<void> {\n        // permissions checked on input\n        const instanceedit = await InstanceClient.grantPermissions(({\n            id: this.context.instance.id\n        } as unknown) as InstanceResponse);\n\n        if (instanceedit.code != StatusCode.OK) {\n            this.addError(instanceedit.error);\n        } else {\n            await this.loadCurrentPermissions(this.state.selectedPermissionSetId);\n        }\n    }\n\n    private async deletePermissionSet(): Promise<void> {\n        if (\n            !confirm(\n                \"Are you sure you want to delete this permission set? The selected user/group will lose access to the instance.\"\n            )\n        ) {\n            return;\n        }\n\n        const response = await InstancePermissionSetClient.deleteInstancePermissionSet(\n            this.context.instance.id,\n            this.state.selectedPermissionSetId\n        );\n\n        // no entity is good enough for us\n        if (response.code != StatusCode.OK && response.error.code != ErrorCode.NO_DB_ENTITY) {\n            this.addError(response.error);\n        } else if (\n            this.state.selectedPermissionSetId === resolvePermissionSet(this.context.user).id\n        ) {\n            // kick 'em out\n            RouteData.selectedinstanceid = undefined;\n            this.props.history.push(AppRoutes.instancelist.link ?? AppRoutes.instancelist.route);\n        } else {\n            this.setState({\n                currentPermissions: null\n            });\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const currentPermissionSetId = resolvePermissionSet(this.context.user).id!;\n        this.setState({\n            selectedPermissionSetId: currentPermissionSetId,\n            userPermissions: this.context.instancePermissionSet\n        });\n\n        const prom = this.loadCurrentPermissions(currentPermissionSetId);\n        const prom2 = this.loadAllPermissionSets();\n        await this.loadUsersAndGroups();\n        await prom;\n        await prom2;\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public async componentWillUnmount(): Promise<void> {\n        if (this.state.instanceNeedsReload) {\n            await this.context.reloadInstance();\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance.perms\" />;\n        }\n\n        const ownersMap = new Map<string, number>();\n        const ownersList: AnyEnum = {};\n\n        if (this.state.users && this.state.groups) {\n            this.state.users?.forEach(user => {\n                const key = `User: ${user.name}${user.id === this.context.user.id ? \" (You)\" : \"\"}`;\n                ownersMap.set(key, user.permissionSet!.id!);\n                ownersList[key] = user.permissionSet!.id!;\n            });\n            this.state.groups?.forEach(group => {\n                const key = `Group: ${group.name}${\n                    group.id === this.context.user.group?.id ? \" (Your Group)\" : \"\"\n                }`;\n                ownersMap.set(key, group.permissionSet.id!);\n                ownersList[key] = group.permissionSet.id!;\n            });\n        } else {\n            if (this.context.user.group) {\n                const key = `Group: ${this.context.user.group.name} (Your Group)`;\n                ownersMap.set(key, this.context.user.group.permissionSet.id!);\n                ownersList[key] = this.context.user.group.permissionSet.id!;\n            } else {\n                const key = `User: ${this.context.user.name} (You)`;\n                ownersMap.set(key, this.context.user.permissionSet!.id!);\n                ownersList[key] = this.context.user.permissionSet!.id!;\n            }\n\n            this.state.instancePermissionSets?.forEach(instancePermissionSet => {\n                if (\n                    instancePermissionSet.permissionSetId ===\n                    resolvePermissionSet(this.context.user).id\n                ) {\n                    return;\n                }\n\n                const key = `Permission Set ${instancePermissionSet.permissionSetId}`;\n                ownersMap.set(key, instancePermissionSet.permissionSetId);\n                ownersList[key] = instancePermissionSet.permissionSetId;\n            });\n        }\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.perms\" />\n                </h1>\n                <DebugJsonViewer obj={this.state} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <InputField\n                    name=\"fields.instance.perms.owner\"\n                    type={FieldType.Enum}\n                    enum={ownersList}\n                    noLocalize\n                    defaultValue={this.state.selectedPermissionSetId}\n                    disabled={\n                        this.context.instancePermissionSet.instancePermissionSetRights ===\n                        InstancePermissionSetRights.None\n                    }\n                    onChange={newPermissionSetId => {\n                        this.setState({\n                            selectedPermissionSetId: newPermissionSetId\n                        });\n                        void this.loadCurrentPermissions(newPermissionSetId);\n                    }}\n                />\n                <hr />\n                {this.renderPermissionEditor()}\n            </div>\n        );\n    }\n\n    private renderPermissionEditor(): React.ReactNode {\n        if (this.state.loadingPerms) {\n            return <Loading text=\"loading.perms\" />;\n        }\n\n        let canGrant = false;\n        let post = <React.Fragment />;\n        const currentPermissionSet = resolvePermissionSet(this.context.user);\n        if (\n            currentPermissionSet.id === this.state.selectedPermissionSetId &&\n            hasInstanceManagerRight(currentPermissionSet, InstanceManagerRights.GrantPermissions) &&\n            (!this.state.currentPermissions ||\n                !hasInstancePermRight(\n                    this.state.currentPermissions,\n                    InstancePermissionSetRights.Write\n                ))\n        ) {\n            canGrant = true;\n            post = (\n                <React.Fragment>\n                    <hr />\n                    <h5>\n                        <FormattedMessage id=\"view.instance.perms.grant.desc\" />\n                    </h5>\n                    <Button variant=\"success\" onClick={() => void this.grantPermissions()}>\n                        <FormattedMessage id=\"view.instance.perms.grant\" />\n                    </Button>\n                </React.Fragment>\n            );\n        }\n\n        if (!this.state.currentPermissions) {\n            const canCreate = hasInstancePermRight(\n                this.state.userPermissions,\n                InstancePermissionSetRights.Create\n            );\n\n            return (\n                <div className=\"text-center mt-2\">\n                    <h3>\n                        <FormattedMessage id=\"view.instance.perms.missing\" />\n                    </h3>\n                    {canGrant ? (\n                        <React.Fragment /> // Realistically, this should never trigger\n                    ) : (\n                        <React.Fragment>\n                            <br />\n                            <OverlayTrigger\n                                placement=\"top\"\n                                overlay={props => (\n                                    <Tooltip id=\"create-ips-tooltop\" {...props}>\n                                        <FormattedMessage id=\"view.instance.perms.create\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    variant=\"success\"\n                                    disabled={!canCreate}\n                                    onClick={() => void this.createPermissionSetForCurrent()}>\n                                    <FormattedMessage id=\"view.instance.perms.create\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </React.Fragment>\n                    )}\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {this.renderEditorTabs()}\n                {post}\n            </React.Fragment>\n        );\n    }\n\n    private renderEditorTabs(): React.ReactNode {\n        const canEdit = hasInstancePermRight(\n            this.state.userPermissions,\n            InstancePermissionSetRights.Write\n        );\n\n        return (\n            <React.Fragment>\n                {canEdit ? (\n                    <React.Fragment />\n                ) : (\n                    <Alert className=\"clearfix\" variant=\"error\">\n                        <FormattedMessage id=\"perms.instancepermissionset.cantedit\" />\n                    </Alert>\n                )}\n                <Tabs\n                    activeKey={this.state.tab}\n                    onSelect={newkey => {\n                        if (newkey) {\n                            this.setState({\n                                tab: newkey\n                            });\n                        }\n                    }}\n                    id=\"permission-tabs\"\n                    className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\">\n                    <Tab\n                        eventKey=\"instancepermissionsetperms\"\n                        title={<FormattedMessage id=\"perms.instancepermissionset\" />}>\n                        {this.renderPerms(\n                            \"permsinstancepermissionset\",\n                            \"instancepermissionset\",\n                            canEdit\n                        )}\n                    </Tab>\n                    <Tab\n                        eventKey=\"repositoryperms\"\n                        title={<FormattedMessage id=\"perms.repository\" />}>\n                        {this.renderPerms(\"permsrepository\", \"repository\", canEdit)}\n                    </Tab>\n                    <Tab eventKey=\"byondperms\" title={<FormattedMessage id=\"perms.byond\" />}>\n                        {this.renderPerms(\"permsbyond\", \"byond\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"dreammakerperms\"\n                        title={<FormattedMessage id=\"perms.dreammaker\" />}>\n                        {this.renderPerms(\"permsdreammaker\", \"dreammaker\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"dreamdaemonperms\"\n                        title={<FormattedMessage id=\"perms.dreamdaemon\" />}>\n                        {this.renderPerms(\"permsdreamdaemon\", \"dreamdaemon\", canEdit)}\n                    </Tab>\n                    <Tab eventKey=\"chatbotsperms\" title={<FormattedMessage id=\"perms.chatbots\" />}>\n                        {this.renderPerms(\"permschatbots\", \"chatbots\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"configurationperms\"\n                        title={<FormattedMessage id=\"perms.configuration\" />}>\n                        {this.renderPerms(\"permsconfiguration\", \"configuration\", canEdit)}\n                    </Tab>\n                </Tabs>\n                {this.state.tab === \"instancepermissionsetperms\" ? (\n                    <React.Fragment>\n                        <br />\n                        <Button variant=\"danger\" onClick={() => void this.deletePermissionSet()}>\n                            <FormattedMessage id=\"view.instance.perms.delete\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n\n    private renderPerms(\n        enumname:\n            | \"permsinstancepermissionset\"\n            | \"permsrepository\"\n            | \"permsbyond\"\n            | \"permsdreammaker\"\n            | \"permsdreamdaemon\"\n            | \"permschatbots\"\n            | \"permsconfiguration\",\n        permprefix: string,\n        canEdit: boolean\n    ): React.ReactNode {\n        const inputs: Record<\n            string,\n            { input: React.RefObject<HTMLInputElement>; field: React.RefObject<HTMLDivElement> }\n        > = {};\n        const setBold = (\n            inputRef: React.RefObject<HTMLInputElement>,\n            fieldRef: React.RefObject<HTMLDivElement>,\n            defaultVal: boolean\n        ) => {\n            if (!inputRef.current || !fieldRef.current) return;\n            if (inputRef.current.checked !== defaultVal) {\n                fieldRef.current.classList.add(\"font-weight-bold\");\n            } else {\n                fieldRef.current.classList.remove(\"font-weight-bold\");\n            }\n        };\n        const setAll = (val: boolean): (() => void) => {\n            return () => {\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) return;\n\n                    refs.input.current.checked = val;\n                    setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                }\n            };\n        };\n        const resetAll = () => {\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                refs.input.current.checked = this.state[enumname][permname].currentVal;\n                setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n            }\n        };\n        const save = async () => {\n            this.setState({\n                loadingPerms: true\n            });\n\n            let bitflag = 0;\n\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                bitflag += refs.input.current.checked ? this.state[enumname][permname].bitflag : 0;\n            }\n\n            if (!this.state.currentPermissions) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            let rightsType: string;\n            switch (enumname) {\n                case \"permsinstancepermissionset\":\n                    rightsType = \"InstancePermissionSetRights\";\n                    break;\n                case \"permsrepository\":\n                    rightsType = \"RepositoryRights\";\n                    break;\n                case \"permsbyond\":\n                    rightsType = \"ByondRights\";\n                    break;\n                case \"permsdreammaker\":\n                    rightsType = \"DreamMakerRights\";\n                    break;\n                case \"permsdreamdaemon\":\n                    rightsType = \"DreamDaemonRights\";\n                    break;\n                case \"permschatbots\":\n                    rightsType = \"ChatBotRights\";\n                    break;\n                case \"permsconfiguration\":\n                    rightsType = \"ConfigurationRights\";\n                    break;\n            }\n\n            const newset = Object.assign(Object.assign({}, this.state.currentPermissions), {\n                [rightsType]: bitflag\n            } as { InstancePermissionSetRights: InstancePermissionSetRights } | { RepositoryRights: RepositoryRights } | { ByondRights: ByondRights } | { DreamMakerRights: DreamMakerRights } | { DreamDaemonRights: DreamDaemonRights } | { ChatBotRights: ChatBotRights } | { ConfigurationRights: ConfigurationRights });\n\n            const response = await InstancePermissionSetClient.updateInstancePermissionSet(\n                this.context.instance.id,\n                newset\n            );\n\n            if (response.code == StatusCode.OK) {\n                if (newset.permissionSetId === this.state.userPermissions?.permissionSetId) {\n                    this.setState({\n                        userPermissions: response.payload,\n                        instanceNeedsReload: true\n                    });\n                }\n\n                this.loadEnums(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n\n            this.setState({\n                loadingPerms: false\n            });\n        };\n\n        return (\n            <React.Fragment>\n                {canEdit ? (\n                    <React.Fragment>\n                        <h5>\n                            <FormattedMessage id=\"generic.setall\" />\n                        </h5>\n                        <Button onClick={setAll(true)}>\n                            <FormattedMessage id=\"generic.true\" />\n                        </Button>{\" \"}\n                        <Button onClick={setAll(false)}>\n                            <FormattedMessage id=\"generic.false\" />\n                        </Button>{\" \"}\n                        <Button onClick={resetAll}>\n                            <FormattedMessage id=\"generic.reset\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n                <Col md={8} lg={7} xl={6} className=\"mx-auto\">\n                    <hr />\n                    {Object.entries(this.state[enumname]).map(([perm, value]) => {\n                        const inputRef = React.createRef<HTMLInputElement>();\n                        const fieldRef = React.createRef<HTMLDivElement>();\n                        inputs[perm] = { input: inputRef, field: fieldRef };\n                        return (\n                            <InputGroup\n                                key={`${enumname}.${perm}`}\n                                as=\"label\"\n                                htmlFor={perm}\n                                className=\"mb-0\">\n                                <InputGroup.Prepend className=\"flex-grow-1 overflow-auto\">\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`perms.${permprefix}.${perm}.desc`}>\n                                                <FormattedMessage\n                                                    id={`perms.${permprefix}.${perm}.desc`}\n                                                />\n                                            </Tooltip>\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"flex-fill\" ref={fieldRef}>\n                                                <div {...triggerHandler}>\n                                                    <FormattedMessage\n                                                        id={`perms.${permprefix}.${perm}`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-auto d-flex align-items-center\">\n                                                    <Form.Check\n                                                        inline\n                                                        type=\"switch\"\n                                                        custom\n                                                        id={`${enumname}.${perm}`}\n                                                        className=\"d-flex justify-content-center align-content-center mx-2\"\n                                                        label=\"\"\n                                                        ref={inputRef}\n                                                        disabled={!canEdit}\n                                                        defaultChecked={value.currentVal}\n                                                        onChange={() => {\n                                                            setBold(\n                                                                inputRef,\n                                                                fieldRef,\n                                                                value.currentVal\n                                                            );\n                                                        }}\n                                                    />\n                                                    <div\n                                                        {...triggerHandler}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                </div>\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Prepend>\n                            </InputGroup>\n                        );\n                    })}\n                    <hr />\n                </Col>\n                {canEdit ? (\n                    <Button onClick={save}>\n                        <FormattedMessage id=\"generic.savepage\" />\n                    </Button>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nInstancePermissions.contextType = InstanceEditContext;\nexport default withRouter(InstancePermissions);\n","import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\n\n/* eslint-disable react/require-render-return, react/no-unused-prop-types */\nvar Tab = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Tab, _React$Component);\n\n  function Tab() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Tab.prototype;\n\n  _proto.render = function render() {\n    throw new Error('ReactBootstrap: The `Tab` component is not meant to be rendered! ' + \"It's an abstract component that is only valid as a direct Child of the `Tabs` Component. \" + 'For custom tabs components use TabPane and TabsContainer directly');\n    return null;\n  };\n\n  return Tab;\n}(React.Component);\n\nTab.Container = TabContainer;\nTab.Content = TabContent;\nTab.Pane = TabPane;\nexport default Tab;","import React, { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport TabContext from './TabContext';\nimport SelectableContext from './SelectableContext';\n\nvar TabContainer = function TabContainer(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      generateCustomChildId = _useUncontrolled.generateChildId,\n      onSelect = _useUncontrolled.onSelect,\n      activeKey = _useUncontrolled.activeKey,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children;\n\n  var generateChildId = useMemo(function () {\n    return generateCustomChildId || function (key, type) {\n      return id ? id + \"-\" + type + \"-\" + key : null;\n    };\n  }, [id, generateCustomChildId]);\n  var tabContext = useMemo(function () {\n    return {\n      onSelect: onSelect,\n      activeKey: activeKey,\n      transition: transition,\n      mountOnEnter: mountOnEnter || false,\n      unmountOnExit: unmountOnExit || false,\n      getControlledId: function getControlledId(key) {\n        return generateChildId(key, 'tabpane');\n      },\n      getControllerId: function getControllerId(key) {\n        return generateChildId(key, 'tab');\n      }\n    };\n  }, [onSelect, activeKey, transition, mountOnEnter, unmountOnExit, generateChildId]);\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: tabContext\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: onSelect || null\n  }, children));\n};\n\nexport default TabContainer;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"as\", \"className\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar TabContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'tab-content');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, decoratedBsPrefix)\n  }));\n});\nexport default TabContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"activeKey\", \"getControlledId\", \"getControllerId\"],\n    _excluded2 = [\"bsPrefix\", \"className\", \"active\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"mountOnEnter\", \"unmountOnExit\", \"transition\", \"as\", \"eventKey\"];\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport TabContext from './TabContext';\nimport SelectableContext, { makeEventKey } from './SelectableContext';\nimport Fade from './Fade';\n\nfunction useTabContext(props) {\n  var context = useContext(TabContext);\n  if (!context) return props;\n\n  var activeKey = context.activeKey,\n      getControlledId = context.getControlledId,\n      getControllerId = context.getControllerId,\n      rest = _objectWithoutPropertiesLoose(context, _excluded);\n\n  var shouldTransition = props.transition !== false && rest.transition !== false;\n  var key = makeEventKey(props.eventKey);\n  return _extends({}, props, {\n    active: props.active == null && key != null ? makeEventKey(activeKey) === key : props.active,\n    id: getControlledId(props.eventKey),\n    'aria-labelledby': getControllerId(props.eventKey),\n    transition: shouldTransition && (props.transition || rest.transition || Fade),\n    mountOnEnter: props.mountOnEnter != null ? props.mountOnEnter : rest.mountOnEnter,\n    unmountOnExit: props.unmountOnExit != null ? props.unmountOnExit : rest.unmountOnExit\n  });\n}\n\nvar TabPane = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useTabContext = useTabContext(props),\n      bsPrefix = _useTabContext.bsPrefix,\n      className = _useTabContext.className,\n      active = _useTabContext.active,\n      onEnter = _useTabContext.onEnter,\n      onEntering = _useTabContext.onEntering,\n      onEntered = _useTabContext.onEntered,\n      onExit = _useTabContext.onExit,\n      onExiting = _useTabContext.onExiting,\n      onExited = _useTabContext.onExited,\n      mountOnEnter = _useTabContext.mountOnEnter,\n      unmountOnExit = _useTabContext.unmountOnExit,\n      Transition = _useTabContext.transition,\n      _useTabContext$as = _useTabContext.as,\n      Component = _useTabContext$as === void 0 ? 'div' : _useTabContext$as,\n      _ = _useTabContext.eventKey,\n      rest = _objectWithoutPropertiesLoose(_useTabContext, _excluded2);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'tab-pane');\n  if (!active && !Transition && unmountOnExit) return null;\n  var pane = /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"tabpanel\",\n    \"aria-hidden\": !active,\n    className: classNames(className, prefix, {\n      active: active\n    })\n  }));\n  if (Transition) pane = /*#__PURE__*/React.createElement(Transition, {\n    in: active,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, pane); // We provide an empty the TabContext so `<Nav>`s in `<TabPane>`s don't\n  // conflict with the top level one.\n\n  return /*#__PURE__*/React.createElement(TabContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(SelectableContext.Provider, {\n    value: null\n  }, pane));\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"id\", \"onSelect\", \"transition\", \"mountOnEnter\", \"unmountOnExit\", \"children\", \"activeKey\"];\nimport React from 'react';\nimport requiredForA11y from 'prop-types-extra/lib/isRequiredForA11y';\nimport { useUncontrolled } from 'uncontrollable';\nimport Nav from './Nav';\nimport NavLink from './NavLink';\nimport NavItem from './NavItem';\nimport TabContainer from './TabContainer';\nimport TabContent from './TabContent';\nimport TabPane from './TabPane';\nimport { forEach, map } from './ElementChildren';\nvar defaultProps = {\n  variant: 'tabs',\n  mountOnEnter: false,\n  unmountOnExit: false\n};\n\nfunction getDefaultActiveKey(children) {\n  var defaultActiveKey;\n  forEach(children, function (child) {\n    if (defaultActiveKey == null) {\n      defaultActiveKey = child.props.eventKey;\n    }\n  });\n  return defaultActiveKey;\n}\n\nfunction renderTab(child) {\n  var _child$props = child.props,\n      title = _child$props.title,\n      eventKey = _child$props.eventKey,\n      disabled = _child$props.disabled,\n      tabClassName = _child$props.tabClassName,\n      id = _child$props.id;\n\n  if (title == null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(NavItem, {\n    as: NavLink,\n    eventKey: eventKey,\n    disabled: disabled,\n    id: id,\n    className: tabClassName\n  }, title);\n}\n\nvar Tabs = function Tabs(props) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      id = _useUncontrolled.id,\n      onSelect = _useUncontrolled.onSelect,\n      transition = _useUncontrolled.transition,\n      mountOnEnter = _useUncontrolled.mountOnEnter,\n      unmountOnExit = _useUncontrolled.unmountOnExit,\n      children = _useUncontrolled.children,\n      _useUncontrolled$acti = _useUncontrolled.activeKey,\n      activeKey = _useUncontrolled$acti === void 0 ? getDefaultActiveKey(children) : _useUncontrolled$acti,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  return /*#__PURE__*/React.createElement(TabContainer, {\n    id: id,\n    activeKey: activeKey,\n    onSelect: onSelect,\n    transition: transition,\n    mountOnEnter: mountOnEnter,\n    unmountOnExit: unmountOnExit\n  }, /*#__PURE__*/React.createElement(Nav, _extends({}, controlledProps, {\n    role: \"tablist\",\n    as: \"nav\"\n  }), map(children, renderTab)), /*#__PURE__*/React.createElement(TabContent, null, map(children, function (child) {\n    var childProps = _extends({}, child.props);\n\n    delete childProps.title;\n    delete childProps.disabled;\n    delete childProps.tabClassName;\n    return /*#__PURE__*/React.createElement(TabPane, childProps);\n  })));\n};\n\nTabs.defaultProps = defaultProps;\nTabs.displayName = 'Tabs';\nexport default Tabs;"],"names":["InstancePermissions","React","constructor","props","super","this","loadCurrentPermissions","bind","createPermissionSetForCurrent","grantPermissions","state","errors","loading","loadingPerms","instanceNeedsReload","tab","userPermissions","permissionSetId","instancePermissionSetRights","repositoryRights","byondRights","dreamMakerRights","dreamDaemonRights","chatBotRights","configurationRights","currentPermissions","selectedPermissionSetId","permsinstancepermissionset","permsrepository","permsbyond","permsdreammaker","permsdreamdaemon","permschatbots","permsconfiguration","loadEnums","newPermissionSet","setState","loadEnum","permEnum","permSourceField","permTargetField","Object","entries","forEach","k","v","isNaN","parseInt","key","toLowerCase","val","currentVal","prevState","bitflag","InstancePermissionSetRights","RepositoryRights","ByondRights","DreamMakerRights","DreamDaemonRights","ChatBotRights","ConfigurationRights","addError","error","Array","from","push","resolvePermissionSet","context","user","id","sanicSpeedLimit","Promise","r","setTimeout","response","InstancePermissionSetClient","instance","code","StatusCode","payload","hasInstancePermRight","instancePermissionSet","ErrorCode","permissionSet","hasAdminRight","AdministrationRights","groups","users","loadedFromRemote","usersResponsePromise","UserClient","page","pageSize","groupsResponse","UserGroupClient","content","usersResponse","filter","userResponse","group","loadedPermissionSets","instancePermissionSets","instanceedit","InstanceClient","confirm","RouteData","undefined","history","AppRoutes","currentPermissionSetId","prom","prom2","loadAllPermissionSets","loadUsersAndGroups","reloadInstance","render","text","ownersMap","Map","ownersList","name","set","className","obj","map","err","index","onClose","prev","newarr","type","FieldType","enum","noLocalize","defaultValue","disabled","onChange","newPermissionSetId","renderPermissionEditor","canGrant","post","currentPermissionSet","hasInstanceManagerRight","InstanceManagerRights","variant","onClick","canCreate","placement","overlay","renderEditorTabs","canEdit","activeKey","onSelect","newkey","eventKey","title","renderPerms","deletePermissionSet","enumname","permprefix","inputs","setBold","inputRef","fieldRef","defaultVal","current","checked","classList","add","remove","setAll","permname","refs","input","field","md","lg","xl","perm","value","as","htmlFor","ref","triggerHandler","inline","custom","label","defaultChecked","fixedWidth","icon","async","rightsType","InternalError","jsError","Error","newset","assign","contextType","InstanceEditContext","withRouter","Tab","_React$Component","apply","arguments","prototype","Container","Content","Pane","_useUncontrolled","generateCustomChildId","generateChildId","transition","mountOnEnter","unmountOnExit","children","useMemo","tabContext","getControlledId","getControllerId","_excluded","TabContent","_ref","bsPrefix","_ref$as","Component","decoratedBsPrefix","_excluded2","TabPane","_useTabContext","useContext","rest","shouldTransition","active","useTabContext","onEnter","onEntering","onEntered","onExit","onExiting","onExited","Transition","_useTabContext$as","prefix","pane","role","in","displayName","renderTab","child","_child$props","tabClassName","Tabs","_useUncontrolled$acti","defaultActiveKey","getDefaultActiveKey","controlledProps","childProps","defaultProps"],"sourceRoot":""}