{"version":3,"file":"611.642e48fe6b765268bbed.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/RepositoryClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    RepositoryCreateRequest,\n    RepositoryResponse,\n    RepositoryUpdateRequest\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type cloneRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type deleteRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type getRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type editRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\n\nexport default new (class RepositoryClient extends ApiClient {\n    public async cloneRepository(\n        instanceid: number,\n        settings: RepositoryCreateRequest\n    ): Promise<InternalStatus<RepositoryResponse, cloneRepositoryErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.repository.repositoryControllerCreate(\n                settings,\n                {\n                    headers: {\n                        Instance: instanceid\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteRepository(\n        instanceid: number\n    ): Promise<InternalStatus<RepositoryResponse, deleteRepositoryErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.repository.repositoryControllerDelete({\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getRepository(\n        instanceid: number\n    ): Promise<\n        InternalStatus<RepositoryResponse & { bootstrapped?: boolean }, getRepositoryErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.repository.repositoryControllerRead({\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: Object.assign(\n                        { bootstraped: true },\n                        response.data as RepositoryResponse\n                    )\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async editRepository(\n        instanceid: number,\n        newSettings: RepositoryUpdateRequest\n    ): Promise<\n        InternalStatus<RepositoryResponse & { longRunning?: boolean }, editRepositoryErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.repository.repositoryControllerUpdate(\n                newSettings,\n                {\n                    headers: {\n                        Instance: instanceid\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: Object.assign(\n                        { longRunning: true },\n                        response.data as RepositoryResponse\n                    )\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","instanceid","settings","response","ServerClient","headers","Instance","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","Object","assign","bootstraped","newSettings","longRunning"],"sourceRoot":""}