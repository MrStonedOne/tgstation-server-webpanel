{"version":3,"file":"740.42a933d8b9e821788d8f.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/ChatBots.tsx"],"sourcesContent":["import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n    faArrowLeft,\n    faArrowRight,\n    faCheck,\n    faClipboard,\n    faComment,\n    faHashtag,\n    faPlus,\n    faTrash\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\n\nimport ChatBotClient from \"../../../../ApiClient/ChatBotClient\";\nimport {\n    ChatBotResponse,\n    ChatBotRights,\n    ChatChannel,\n    ChatProvider\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, {\n    allAddons,\n    ErrorCode\n} from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasChatBotRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm, { InputFormField } from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum DiscordDMOutputDisplayType {\n    Always = 0,\n    OnError = 1,\n    Never = 2\n}\n\nenum IrcPasswordType {\n    Server = 0,\n    SASL = 1,\n    NickServ = 2\n}\n\ninterface ChatBotConnectionBuilder {\n    provider: ChatProvider;\n    name: string;\n    enabled: boolean;\n    channelLimit: number;\n    reconnectionInterval: number;\n}\n\ninterface ChatBotUpdate extends ChatBotConnectionBuilder {\n    connectionString: string;\n}\n\ninterface DiscordConnectionBuilder extends ChatBotConnectionBuilder {\n    botToken: string;\n    basedMeme: boolean;\n    deploymentBranding: boolean;\n    dmOutputDisplay: DiscordDMOutputDisplayType;\n}\n\ninterface IrcConnectionBuilder extends ChatBotConnectionBuilder {\n    name: string;\n    address: string;\n    port: number;\n    nickname: string;\n    useSsl: boolean;\n    passwordType: IrcPasswordType;\n    password?: string;\n}\n\ninterface ChatBot extends ChatBotResponse {\n    loadedWithConnectionString?: boolean;\n}\n\ninterface IProps extends WrappedComponentProps {}\n\ninterface IState {\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    chatBots: ChatBot[];\n    selectedAddNode: boolean;\n    selectedChatBot: ChatBot | null;\n    selectedChannel: ChatChannel | null;\n    addBotProvider: ChatProvider;\n    flashExport: boolean;\n}\n\nclass ChatBots extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            errors: [],\n            chatBots: [],\n            selectedAddNode: false,\n            selectedChatBot: null,\n            selectedChannel: null,\n            addBotProvider: ChatProvider.Discord,\n            flashExport: false\n        };\n\n        this.renderChatBotBrowser = this.renderChatBotBrowser.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read))\n            await this.refresh();\n        else\n            this.setState({\n                loading: false\n            });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async refresh(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read)) {\n            this.setState({\n                loading: true\n            });\n\n            let maxPages = 1;\n            let chatBots: ChatBot[] = [];\n            for (let page = 1; page <= maxPages; ++page) {\n                const response = await ChatBotClient.listChatBots(this.context.instance.id, {\n                    page\n                });\n\n                if (response.code === StatusCode.OK) {\n                    maxPages = response.payload.totalPages;\n\n                    chatBots = chatBots.concat(response.payload.content);\n                } else {\n                    this.addError(response.error);\n                    break;\n                }\n            }\n\n            // List endpoint does not pull connection string\n            chatBots.forEach(chatBot => (chatBot.loadedWithConnectionString = false));\n\n            this.setState({\n                chatBots,\n                loading: false\n            });\n        }\n    }\n\n    private async addChatBot(connectionBuilder: ChatBotConnectionBuilder): Promise<void> {\n        let connectionString: string;\n        let discordBuilder: DiscordConnectionBuilder;\n        let ircBuilder: IrcConnectionBuilder;\n\n        if (!connectionBuilder.name) {\n            alert(\n                this.props.intl.formatMessage({\n                    id: \"view.instance.chat.create.missing.name\"\n                })\n            );\n            return;\n        }\n\n        switch (connectionBuilder.provider) {\n            case ChatProvider.Discord:\n                discordBuilder = connectionBuilder as DiscordConnectionBuilder;\n                if (!discordBuilder.botToken) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.token\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${discordBuilder.botToken};${discordBuilder.dmOutputDisplay};${\n                    discordBuilder.basedMeme ? \"1\" : \"0\"\n                };${discordBuilder.deploymentBranding ? \"1\" : \"0\"}`;\n                break;\n            case ChatProvider.Irc:\n                ircBuilder = connectionBuilder as IrcConnectionBuilder;\n                if (!ircBuilder.address) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.address\"\n                        })\n                    );\n                    return;\n                }\n                if (!ircBuilder.nickname) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.nick\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${ircBuilder.address};${ircBuilder.port};${\n                    ircBuilder.nickname\n                };${ircBuilder.useSsl ? \"1\" : \"0\"}`;\n                if (ircBuilder.password)\n                    connectionString += `;${ircBuilder.passwordType};${ircBuilder.password}`;\n                break;\n            default:\n                throw new Error(\"Bad provider!\");\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.createChatBot(this.context.instance.id, {\n            provider: connectionBuilder.provider,\n            name: connectionBuilder.name,\n            enabled: connectionBuilder.enabled,\n            connectionString,\n            channelLimit: connectionBuilder.channelLimit,\n            reconnectionInterval: connectionBuilder.reconnectionInterval\n        });\n\n        if (response.code === StatusCode.OK) {\n            const newChatBot: ChatBot = response.payload;\n            newChatBot.loadedWithConnectionString = true;\n            const newChatBots = [...this.state.chatBots];\n            newChatBots.push(newChatBot);\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: newChatBot,\n                selectedAddNode: false\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async reloadChatBot(chatBot: ChatBot): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.getChatBot(this.context.instance.id, chatBot.id);\n        if (response.code === StatusCode.OK) {\n            chatBot = response.payload;\n            chatBot.loadedWithConnectionString = true;\n\n            const chatBots = [...this.state.chatBots];\n            const index = chatBots.indexOf(chatBot);\n            chatBots[index] = chatBot;\n\n            this.setState({\n                chatBots,\n                selectedChatBot: chatBot\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatBot(chatBotUpdate: ChatBotUpdate): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        let chatBot = this.state.selectedChatBot!;\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            ...chatBotUpdate,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async addChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (!chatChannel.channelData) {\n            alert(\n                this.props.intl.formatMessage({ id: \"view.instance.chat.create.missing.channel\" })\n            );\n            return;\n        }\n\n        if (chatBot.provider === ChatProvider.Discord) {\n            const reg = new RegExp(\"^[0-9]+$\");\n            if (!reg.test(chatChannel.channelData)) {\n                alert(\n                    this.props.intl.formatMessage({\n                        id: \"view.instance.chat.create.invalid.discord\"\n                    })\n                );\n                return;\n            }\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        newChannels.push(chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n                    selectedChannel: chatBot.channels[chatBot.channels.length - 1]\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const channelToEdit = newChannels[newChannels.indexOf(this.state.selectedChannel!)];\n\n        Object.assign(channelToEdit, chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.channel.confirm\" },\n                    {\n                        channelName: chatChannel.tag ?? chatChannel.channelData\n                    }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const index = newChannels.indexOf(chatChannel);\n        newChannels.splice(index, 1);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n\n                    selectedChannel: null\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatBot(chatBot: ChatBot): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.confirm\" },\n                    { botName: chatBot.name }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.deleteChatBot(this.context.instance.id, chatBot.id);\n\n        if (response.code === StatusCode.OK) {\n            const newChatBots = [...this.state.chatBots];\n            const index = newChatBots.indexOf(chatBot);\n            newChatBots.splice(index, 1);\n\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: null\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.chat\" />;\n        }\n\n        const canRead = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read);\n        const canCreate = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Create);\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.chat\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <div className=\"d-flex flex-row\">\n                    <div\n                        className=\"text-left\"\n                        style={{\n                            paddingRight: \"16px\",\n                            maxHeight: \"800px\",\n                            minWidth: \"300px\",\n                            overflowY: \"scroll\"\n                        }}>\n                        <ul className=\"browser-ul\">\n                            {canRead ? (\n                                this.state.chatBots.map(this.renderChatBotBrowser)\n                            ) : (\n                                <React.Fragment />\n                            )}\n                            {canCreate ? (\n                                <li className=\"browser-li\">\n                                    <OverlayTrigger\n                                        placement=\"top\"\n                                        show={\n                                            this.state.chatBots.length <\n                                            this.context.instance.chatBotLimit\n                                                ? false\n                                                : undefined\n                                        }\n                                        overlay={props => (\n                                            <Tooltip id=\"too-many-chat-bots\" {...props}>\n                                                <FormattedMessage\n                                                    id=\"view.instance.chat.limit\"\n                                                    values={{\n                                                        max: this.context.instance.chatBotLimit\n                                                    }}\n                                                />\n                                            </Tooltip>\n                                        )}>\n                                        <Button\n                                            className=\"nowrap\"\n                                            disabled={\n                                                this.state.chatBots.length >=\n                                                this.context.instance.chatBotLimit\n                                            }\n                                            onClick={() =>\n                                                this.setState({\n                                                    selectedChatBot: null,\n                                                    selectedChannel: null,\n                                                    selectedAddNode: !!(\n                                                        !this.state.selectedAddNode ||\n                                                        this.state.selectedChatBot\n                                                    )\n                                                })\n                                            }>\n                                            <FontAwesomeIcon icon={faPlus} />\n                                            &nbsp;\n                                            <FormattedMessage id=\"view.instance.chat.create\" />\n                                        </Button>\n                                    </OverlayTrigger>\n                                </li>\n                            ) : (\n                                <React.Fragment />\n                            )}\n                        </ul>\n                    </div>\n                    <div\n                        className=\"flex-fill flex-column text-center align-self-center\"\n                        style={{ padding: \"16px\" }}>\n                        {this.state.selectedChannel ? (\n                            this.renderAddEditChannel(false)\n                        ) : this.state.selectedChatBot && !this.state.selectedAddNode ? (\n                            this.renderAddEditChatBot(false)\n                        ) : this.state.selectedAddNode ? (\n                            this.state.selectedChatBot ? (\n                                this.renderAddEditChannel(true)\n                            ) : (\n                                this.renderAddEditChatBot(true)\n                            )\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.instance.chat.select_item\" />\n                            </h4>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderChatBotBrowser(chatBot: ChatBotResponse): React.ReactNode {\n        const selected = this.state.selectedChatBot === chatBot;\n        const canWriteChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n        return (\n            <li key={chatBot.id} className=\"browser-li\">\n                <Button\n                    variant={selected ? \"secondary\" : \"primary\"}\n                    onClick={() =>\n                        this.setState({\n                            selectedChatBot:\n                                selected &&\n                                !this.state.selectedChannel &&\n                                !this.state.selectedAddNode\n                                    ? null\n                                    : chatBot,\n                            selectedChannel: null,\n                            selectedAddNode: false\n                        })\n                    }\n                    className=\"nowrap\">\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </Button>\n                {canWriteChannels && selected ? (\n                    <ul className=\"browser-ul\">\n                        {chatBot.channels.map(channel => {\n                            const channelSelected = this.state.selectedChannel === channel;\n                            return (\n                                <li key={channel.channelData} className=\"browser-li\">\n                                    <Button\n                                        variant={channelSelected ? \"secondary\" : \"primary\"}\n                                        onClick={() =>\n                                            this.setState({\n                                                selectedChannel: channelSelected ? null : channel\n                                            })\n                                        }\n                                        className=\"nowrap\">\n                                        <FontAwesomeIcon icon={faHashtag} />\n                                        &nbsp;\n                                        {channel.tag ? `(${channel.tag})` : channel.channelData}\n                                    </Button>\n                                </li>\n                            );\n                        })}\n                        <li className=\"browser-li\">\n                            <OverlayTrigger\n                                placement=\"top\"\n                                show={\n                                    chatBot.channels.length < chatBot.channelLimit\n                                        ? false\n                                        : undefined\n                                }\n                                overlay={props => (\n                                    <Tooltip id=\"too-many-chat-channels\" {...props}>\n                                        <FormattedMessage\n                                            id=\"view.instance.chat.limit.channels\"\n                                            values={{ max: chatBot.channelLimit }}\n                                        />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    className=\"nowrap\"\n                                    disabled={chatBot.channels.length >= chatBot.channelLimit}\n                                    onClick={() =>\n                                        this.setState({\n                                            selectedChannel: null,\n                                            selectedAddNode: !!(\n                                                !this.state.selectedAddNode ||\n                                                this.state.selectedChannel\n                                            )\n                                        })\n                                    }>\n                                    <FontAwesomeIcon icon={faPlus} />\n                                    &nbsp;\n                                    <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </li>\n                    </ul>\n                ) : (\n                    <React.Fragment />\n                )}\n            </li>\n        );\n    }\n\n    private async exportChannelsToClipboard(): Promise<void> {\n        const channels = this.state.selectedChatBot!.channels;\n        const channelsJson = JSON.stringify(channels);\n        await navigator.clipboard.writeText(channelsJson);\n        this.setState({\n            flashExport: true\n        });\n\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        this.setState({\n            flashExport: false\n        });\n    }\n\n    private async importChannelsFromClipboard(): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        let channelsJson;\n        if (navigator.clipboard.readText) {\n            channelsJson = await navigator.clipboard.readText();\n        } else {\n            channelsJson = prompt(\n                \"Your browser doesn't allow clipboard reading. Please paste your entry here.\"\n            ); // CBA to localize rn\n            if (!channelsJson) {\n                this.setState({\n                    loading: false\n                });\n                return;\n            }\n        }\n\n        let channels;\n        try {\n            channels = JSON.parse(channelsJson) as ChatChannel[];\n        } catch (jsError) {\n            const addon: allAddons =\n                jsError instanceof Error\n                    ? {\n                          jsError\n                      }\n                    : { void: true };\n            this.addError(new InternalError(ErrorCode.BAD_CHANNELS_JSON, addon));\n\n            this.setState({\n                loading: false\n            });\n            return;\n        }\n\n        let chatBot = this.state.selectedChatBot!;\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private renderAddEditChatBot(add: boolean): React.ReactNode {\n        const providerFieldCommon = {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.chat.provider\",\n            defaultValue: this.state.addBotProvider,\n            enum: ChatProvider,\n            noLocalize: true\n        };\n\n        const providerField = {\n            ...providerFieldCommon,\n            onChange: (newValue: ChatProvider) => {\n                this.setState({ addBotProvider: newValue });\n            }\n        };\n\n        const fieldsCommon = {\n            provider: { ...providerFieldCommon },\n            name: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.name\",\n                tooltip: \"fields.instance.chat.name.tip\"\n            },\n            enabled: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.enabled\",\n                tooltip: \"fields.instance.chat.enabled.tip\",\n                defaultValue: true\n            },\n            channelLimit: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.limit\",\n                tooltip: \"fields.instance.chat.limit.tip\",\n                min: 0,\n                max: 65535,\n                defaultValue: 10\n            },\n            reconnectionInterval: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.reconnect\",\n                tooltip: \"fields.instance.chat.reconnect.tip\",\n                min: 0,\n                defaultValue: 5\n            }\n        };\n\n        if (add) {\n            const fieldsDiscord = {\n                ...fieldsCommon,\n                botToken: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.discord.token\",\n                    tooltip: \"fields.instance.chat.create.discord.token.tip\"\n                },\n                dmOutputDisplayType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.discord.output\",\n                    tooltip: \"fields.instance.chat.create.discord.output.tip\",\n                    defaultValue: DiscordDMOutputDisplayType.Always,\n                    enum: DiscordDMOutputDisplayType,\n                    noLocalize: true\n                },\n                basedMeme: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.discord.based\",\n                    tooltip: \"fields.instance.chat.create.discord.based.tip\",\n                    defaultValue: true\n                },\n                deploymentBranding: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.discord.branding\",\n                    tooltip: \"fields.instance.chat.create.discord.branding.tip\",\n                    defaultValue: true\n                }\n            };\n\n            const fieldsIrc = {\n                ...fieldsCommon,\n                address: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.address\",\n                    tooltip: \"fields.instance.chat.create.irc.address.tip\"\n                },\n                port: {\n                    type: FieldType.Number as FieldType.Number,\n                    name: \"fields.instance.chat.create.irc.port\",\n                    min: 1,\n                    max: 65535,\n                    defaultValue: 6697 // RFC7194\n                },\n                nickname: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.nick\"\n                },\n                password: {\n                    type: FieldType.Password as FieldType.Password,\n                    name: \"fields.instance.chat.create.irc.pass\",\n                    tooltip: \"fields.instance.chat.create.irc.pass.tip\"\n                },\n                passwordType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.irc.passtype\",\n                    defaultValue: IrcPasswordType.SASL,\n                    enum: IrcPasswordType,\n                    noLocalize: true\n                },\n                useSsl: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.irc.ssl\",\n                    tooltip: \"fields.instance.chat.create.irc.ssl.tip\"\n                }\n            };\n\n            (fieldsCommon.provider as InputFormField).disabled = true;\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create\" />\n                    </h5>\n                    <hr />\n                    <InputField {...providerField} />\n                    <hr />\n                    <InputForm\n                        key={`bot-create-form-${this.state.addBotProvider}`}\n                        hideDisabled\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.save\"\n                        fields={\n                            this.state.addBotProvider === ChatProvider.Discord\n                                ? fieldsDiscord\n                                : fieldsIrc\n                        }\n                        onSave={(connectionBuilder: ChatBotConnectionBuilder) =>\n                            void this.addChatBot(connectionBuilder)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const chatBot = this.state.selectedChatBot!;\n        const canReadConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.ReadConnectionString\n        );\n        const canEditConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteConnectionString\n        );\n\n        const fieldsEdit = {\n            ...fieldsCommon,\n            connectionString: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.edit.connection\",\n                tooltip: \"fields.instance.chat.edit.connection.tip\",\n                defaultValue: canReadConnectionString\n                    ? chatBot.loadedWithConnectionString\n                        ? chatBot.connectionString\n                        : this.props.intl.formatMessage({\n                              id: \"fields.instance.chat.edit.connection.unloaded\"\n                          })\n                    : this.props.intl.formatMessage({\n                          id: \"fields.instance.chat.edit.connection.deny\"\n                      }),\n                disabled: !canEditConnectionString\n            }\n        };\n\n        (fieldsEdit.name as InputFormField).defaultValue = chatBot.name;\n        (fieldsEdit.enabled as InputFormField).defaultValue = chatBot.enabled;\n        (fieldsEdit.channelLimit as InputFormField).defaultValue = chatBot.channelLimit;\n        (fieldsEdit.reconnectionInterval as InputFormField).defaultValue =\n            chatBot.reconnectionInterval;\n\n        (fieldsEdit.name as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteName\n        );\n        (fieldsEdit.enabled as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteEnabled\n        );\n        (fieldsEdit.channelLimit as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannelLimit\n        );\n        (fieldsEdit.reconnectionInterval as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteReconnectionInterval\n        );\n\n        const canDelete = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Delete);\n\n        const canEditChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n\n        return (\n            <React.Fragment>\n                <h5>\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </h5>\n                <hr />\n                {!chatBot.loadedWithConnectionString ? (\n                    <React.Fragment>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            show={canReadConnectionString ? false : undefined}\n                            overlay={props => (\n                                <Tooltip id=\"chat-bot-read-conn-perm\" {...props}>\n                                    <FormattedMessage id=\"view.instance.chat.reload.deny\" />\n                                </Tooltip>\n                            )}>\n                            <Button\n                                className=\"nowrap\"\n                                disabled={!canReadConnectionString}\n                                onClick={() => void this.reloadChatBot(chatBot)}>\n                                <FormattedMessage id=\"view.instance.chat.reload\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <br />\n                        <br />\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n                <InputForm\n                    fields={fieldsEdit}\n                    onSave={(chatBotUpdate: ChatBotUpdate) => void this.editChatBot(chatBotUpdate)}\n                />\n                <hr />\n                <div className=\"text-center mb-3\">\n                    <OverlayTrigger\n                        placement=\"top\"\n                        show={canDelete ? false : undefined}\n                        overlay={props => (\n                            <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                                <FormattedMessage id=\"view.instance.chat.delete.deny\" />\n                            </Tooltip>\n                        )}>\n                        <Button\n                            className=\"nowrap mx-2\"\n                            disabled={!canDelete}\n                            variant=\"danger\"\n                            onClick={() => void this.deleteChatBot(chatBot)}>\n                            <FontAwesomeIcon icon={faTrash} />\n                            &nbsp;\n                            <FormattedMessage id=\"view.instance.chat.delete\" />\n                        </Button>\n                    </OverlayTrigger>\n                    {navigator.clipboard ? (\n                        <React.Fragment>\n                            <Button\n                                className=\"nowrap mx-2\"\n                                variant={this.state.flashExport ? \"success\" : \"secondary\"}\n                                onClick={() => void this.exportChannelsToClipboard()}>\n                                {this.state.flashExport ? (\n                                    <FontAwesomeIcon icon={faCheck} />\n                                ) : (\n                                    <React.Fragment>\n                                        <FontAwesomeIcon icon={faClipboard} />\n                                        <FontAwesomeIcon icon={faArrowLeft} />\n                                    </React.Fragment>\n                                )}\n                                &nbsp;\n                                <FormattedMessage id=\"view.instance.chat.channels.export\" />\n                            </Button>\n                            <OverlayTrigger\n                                placement=\"top\"\n                                show={canEditChannels ? false : undefined}\n                                overlay={props => (\n                                    <Tooltip id=\"chat-bot-edit-channels-perm\" {...props}>\n                                        <FormattedMessage id=\"view.instance.chat.channels.deny\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    className=\"nowrap mx-2\"\n                                    disabled={!canEditChannels}\n                                    variant=\"primary\"\n                                    onClick={() => void this.importChannelsFromClipboard()}>\n                                    <FontAwesomeIcon icon={faClipboard} />\n                                    <FontAwesomeIcon icon={faArrowRight} />\n                                    &nbsp;\n                                    <FormattedMessage id=\"view.instance.chat.channels.import\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </React.Fragment>\n                    ) : null}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private renderAddEditChannel(add: boolean): React.ReactNode {\n        const chatBot = this.state.selectedChatBot!;\n\n        const fieldsCommon = {\n            tag: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.channel.tag\",\n                tooltip: \"fields.instance.chat.channel.tag.tip\"\n            },\n            isAdminChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.admin\",\n                tooltip: \"fields.instance.chat.channel.admin.tip\"\n            },\n            isWatchdogChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.watchdog\",\n                tooltip: \"fields.instance.chat.channel.watchdog.tip\"\n            },\n            isUpdatesChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.updates\",\n                tooltip: \"fields.instance.chat.channel.updates.tip\"\n            },\n            isSystemChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.system\",\n                tooltip: \"fields.instance.chat.channel.system.tip\"\n            }\n        };\n\n        const canEditChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n\n        if (add) {\n            const fieldsDiscord = {\n                // we remap this to discord later because of uint64 memes\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.discord\",\n                    tooltip: \"fields.instance.chat.channel.discord.tip\"\n                },\n                ...fieldsCommon\n            };\n            const fieldsIrc = {\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.irc\",\n                    tooltip: \"fields.instance.chat.channel.irc.tip\",\n                    defaultValue: \"#\"\n                },\n                ...fieldsCommon\n            };\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                    </h5>\n                    <hr />\n                    <InputForm\n                        key={`bot-channel-create-form-${chatBot.provider}`}\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.channel\"\n                        fields={\n                            chatBot.provider === ChatProvider.Discord ? fieldsDiscord : fieldsIrc\n                        }\n                        onSave={(chatChannel: ChatChannel) =>\n                            void this.addChatChannel(chatBot, chatChannel)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const channel = this.state.selectedChannel!;\n\n        (fieldsCommon.isAdminChannel as InputFormField).defaultValue = channel.isAdminChannel;\n        (fieldsCommon.isUpdatesChannel as InputFormField).defaultValue = channel.isUpdatesChannel;\n        (fieldsCommon.isWatchdogChannel as InputFormField).defaultValue = channel.isWatchdogChannel;\n        (fieldsCommon.isSystemChannel as InputFormField).defaultValue = channel.isSystemChannel;\n        (fieldsCommon.tag as InputFormField).defaultValue = channel.tag;\n\n        return (\n            <React.Fragment key={chatBot.channels.indexOf(channel)}>\n                <h5>\n                    {channel.channelData}\n                    {channel.tag ? ` (${channel.tag})` : \"\"}\n                </h5>\n                <hr />\n                <InputForm\n                    fields={fieldsCommon}\n                    onSave={chatChannelStub => {\n                        const chatChannel = {\n                            channelData: this.state.selectedChannel!.channelData,\n                            ...chatChannelStub\n                        };\n                        void this.editChatChannel(chatBot, chatChannel);\n                    }}\n                />\n                <hr />\n                <OverlayTrigger\n                    placement=\"top\"\n                    show={canEditChannels ? false : undefined}\n                    overlay={props => (\n                        <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                            <FormattedMessage id=\"view.instance.chat.delete.channel.deny\" />\n                        </Tooltip>\n                    )}>\n                    <Button\n                        className=\"nowrap\"\n                        disabled={!canEditChannels}\n                        variant=\"danger\"\n                        onClick={() => void this.deleteChatChannel(chatBot, channel)}>\n                        <FormattedMessage id=\"view.instance.chat.delete.channel\" />\n                    </Button>\n                </OverlayTrigger>\n            </React.Fragment>\n        );\n    }\n}\n\nChatBots.contextType = InstanceEditContext;\nexport default injectIntl(ChatBots);\n"],"names":["DiscordDMOutputDisplayType","IrcPasswordType","ChatBots","React","constructor","props","super","this","state","loading","errors","chatBots","selectedAddNode","selectedChatBot","selectedChannel","addBotProvider","ChatProvider","flashExport","renderChatBotBrowser","bind","hasChatBotRight","context","instancePermissionSet","ChatBotRights","refresh","setState","addError","error","prevState","Array","from","push","maxPages","page","response","ChatBotClient","instance","id","code","StatusCode","payload","totalPages","concat","content","forEach","chatBot","loadedWithConnectionString","connectionBuilder","connectionString","discordBuilder","ircBuilder","name","alert","intl","formatMessage","provider","botToken","dmOutputDisplay","basedMeme","deploymentBranding","address","nickname","port","useSsl","password","passwordType","Error","enabled","channelLimit","reconnectionInterval","newChatBot","newChatBots","index","indexOf","chatBotUpdate","chatChannel","channelData","RegExp","test","newChannels","channels","length","channelToEdit","Object","assign","confirm","channelName","tag","splice","botName","render","text","canRead","canCreate","className","obj","map","err","key","onClose","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","placement","show","chatBotLimit","overlay","values","max","disabled","onClick","icon","faPlus","padding","renderAddEditChannel","renderAddEditChatBot","selected","canWriteChannels","variant","faDiscord","faComment","channel","channelSelected","faHashtag","channelsJson","JSON","stringify","navigator","clipboard","writeText","Promise","resolve","setTimeout","readText","prompt","parse","jsError","addon","void","InternalError","ErrorCode","add","providerFieldCommon","type","FieldType","defaultValue","enum","noLocalize","providerField","onChange","newValue","fieldsCommon","tooltip","min","fieldsDiscord","dmOutputDisplayType","Always","fieldsIrc","SASL","hideDisabled","includeAll","saveMessageId","fields","onSave","addChatBot","canReadConnectionString","canEditConnectionString","fieldsEdit","canDelete","canEditChannels","reloadChatBot","editChatBot","deleteChatBot","faTrash","exportChannelsToClipboard","faCheck","faClipboard","faArrowLeft","importChannelsFromClipboard","faArrowRight","isAdminChannel","isWatchdogChannel","isUpdatesChannel","isSystemChannel","addChatChannel","chatChannelStub","editChatChannel","deleteChatChannel","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}