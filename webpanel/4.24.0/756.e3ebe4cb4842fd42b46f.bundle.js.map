{"version":3,"file":"756.e3ebe4cb4842fd42b46f.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/DreamDaemonClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    DreamDaemonRequest,\n    DreamDaemonResponse,\n    ErrorMessageResponse,\n    JobResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type getWatchdogStatusErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type updateWatchdogStatusErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport default new (class DreamDaemonClient extends ApiClient {\n    public async getWatchdogStatus(\n        instance: number\n    ): Promise<InternalStatus<DreamDaemonResponse, getWatchdogStatusErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamDaemonResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateWatchdogStatus(\n        instance: number,\n        newSettings: DreamDaemonRequest\n    ): Promise<InternalStatus<DreamDaemonResponse, updateWatchdogStatusErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerUpdate(\n                newSettings,\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamDaemonResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async startWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerCreate({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async stopWatchdog(instance: number): Promise<InternalStatus<null, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerDelete({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async restartWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerRestart({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async dumpWatchdog(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.dreamDaemon.dreamDaemonControllerCreateDump({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","instance","response","ServerClient","headers","Instance","toString","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","newSettings"],"sourceRoot":""}