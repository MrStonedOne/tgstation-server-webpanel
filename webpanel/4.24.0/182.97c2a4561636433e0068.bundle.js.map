{"version":3,"file":"182.97c2a4561636433e0068.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Byond.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/JobHistory.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/InstanceEdit.tsx"],"sourcesContent":["import { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport ByondClient from \"../../../../ApiClient/ByondClient\";\nimport { ByondResponse, ByondRights } from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasByondRight } from \"../../../../utils/misc\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\ninterface IProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: ByondResponse[];\n    activeVersion?: string | null;\n    latestVersion: string;\n    selectedVersion: string;\n    loading: boolean;\n    customFile?: File | null;\n    page: number;\n    maxPage?: number;\n}\n\nclass Byond extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            activeVersion: \"\",\n            latestVersion: \"\",\n            selectedVersion: \"\",\n            loading: true,\n            page: RouteData.byondlistpage ?? 1\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        if (hasByondRight(this.context.instancePermissionSet, ByondRights.ListInstalled)) {\n            const response = await ByondClient.listAllVersions(this.context.instance.id, {\n                page: this.state.page\n            });\n            if (response.code === StatusCode.OK) {\n                if (\n                    this.state.page > response.payload.totalPages &&\n                    response.payload.totalPages !== 0\n                ) {\n                    this.setState({\n                        page: 1\n                    });\n                    return;\n                }\n\n                this.setState({\n                    versions: response.payload.content,\n                    maxPage: response.payload.totalPages\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (hasByondRight(this.context.instancePermissionSet, ByondRights.ReadActive)) {\n            const response2 = await ByondClient.getActiveVersion(this.context.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.version\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        }\n    }\n\n    private async switchVersion(version: string, useCustom: boolean): Promise<void> {\n        this.setState({\n            loading: true\n        });\n        const response = await ByondClient.switchActive(\n            this.context.instance.id,\n            version,\n            useCustom && this.state.customFile\n                ? await this.state.customFile.arrayBuffer()\n                : undefined\n        );\n        if (response.code === StatusCode.ERROR) {\n            this.addError(response.error);\n        } else {\n            if (useCustom) {\n                this.setState({\n                    customFile: null\n                });\n            }\n            if (response.payload.installJob) {\n                JobsController.registerJob(response.payload.installJob, this.context.instance.id);\n                JobsController.registerCallback(\n                    response.payload.installJob.id,\n                    () => void this.loadVersions()\n                );\n            } else {\n                await this.loadVersions();\n            }\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    public async componentDidUpdate(\n        prevProps: Readonly<IProps>,\n        prevState: Readonly<IState>\n    ): Promise<void> {\n        if (prevState.page !== this.state.page) {\n            RouteData.byondlistpage = this.state.page;\n            await this.loadVersions();\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                this.setState({\n                    latestVersion: version,\n                    selectedVersion: version,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n                this.setState({\n                    loading: false\n                });\n            });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.byond\" />;\n        }\n\n        const canSeeVersions = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.ListInstalled\n        );\n        const canSeeCurrent = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.ReadActive\n        );\n        const canInstallCustom = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.InstallCustomVersion\n        );\n        const canInstallAndSwitch = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.InstallOfficialOrChangeActiveVersion\n        );\n        const canDelete = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.DeleteInstall\n        );\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state.versions} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.byond\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {canSeeVersions ? (\n                    <>\n                        {!canSeeCurrent ? (\n                            <GenericAlert title=\"view.instance.byond.current_denied\" />\n                        ) : null}\n                        <div>\n                            {this.state.versions.map(version => {\n                                // noinspection JSBitwiseOperatorUsage\n                                return (\n                                    <InputGroup\n                                        className=\"w-md-25 mb-1 mx-auto d-flex\"\n                                        key={version.version}>\n                                        {canInstallAndSwitch || canSeeCurrent ? (\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    name=\"byond\"\n                                                    id={version.version!}\n                                                    value={version.version!}\n                                                    disabled={!canInstallAndSwitch}\n                                                    checked={\n                                                        version.version! ===\n                                                        this.state.activeVersion\n                                                    }\n                                                    onChange={async () => {\n                                                        await this.switchVersion(\n                                                            version.version!,\n                                                            false\n                                                        );\n                                                    }}\n                                                />\n                                            </InputGroup.Prepend>\n                                        ) : null}\n                                        <label\n                                            className=\"flex-grow-1 m-0\"\n                                            htmlFor={version.version!}>\n                                            <OverlayTrigger\n                                                overlay={tooltip(\"view.instance.byond.custom\")}\n                                                show={\n                                                    !version.version!.endsWith(\".0\")\n                                                        ? undefined\n                                                        : false\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <InputGroup.Text\n                                                        className=\"w-100\"\n                                                        {...triggerHandler}>\n                                                        {version.version!.endsWith(\".0\")\n                                                            ? version.version!.substr(\n                                                                  0,\n                                                                  version.version!.length - 2\n                                                              )\n                                                            : version.version}\n                                                        {!version.version!.endsWith(\".0\") ? (\n                                                            <div\n                                                                className={\"ml-auto\"}\n                                                                ref={\n                                                                    ref as React.Ref<HTMLDivElement>\n                                                                }>\n                                                                <FontAwesomeIcon\n                                                                    fixedWidth\n                                                                    icon=\"info\"\n                                                                />\n                                                            </div>\n                                                        ) : null}\n                                                    </InputGroup.Text>\n                                                )}\n                                            </OverlayTrigger>\n                                        </label>\n                                        {version.version! !== this.state.activeVersion ? (\n                                            <InputGroup.Append>\n                                                <OverlayTrigger\n                                                    overlay={tooltip(\"generic.no_perm\")}\n                                                    show={!canDelete ? undefined : false}>\n                                                    <Button\n                                                        variant=\"danger\"\n                                                        disabled={!canDelete}\n                                                        onClick={async () => {\n                                                            this.setState({\n                                                                loading: true\n                                                            });\n                                                            const response = await ByondClient.deleteVersion(\n                                                                this.context.instance.id,\n                                                                version.version!\n                                                            );\n                                                            if (\n                                                                response.code === StatusCode.ERROR\n                                                            ) {\n                                                                this.addError(response.error);\n                                                            } else {\n                                                                JobsController.registerJob(\n                                                                    response.payload,\n                                                                    this.context.instance.id\n                                                                );\n                                                                JobsController.registerCallback(\n                                                                    response.payload.id,\n                                                                    () => void this.loadVersions()\n                                                                );\n                                                            }\n                                                            this.setState({\n                                                                loading: false\n                                                            });\n                                                        }}>\n                                                        <FontAwesomeIcon icon={faTrash} />\n                                                    </Button>\n                                                </OverlayTrigger>\n                                            </InputGroup.Append>\n                                        ) : null}\n                                    </InputGroup>\n                                );\n                            })}\n                        </div>\n                        <PageHelper\n                            className=\"mt-4\"\n                            selectPage={newPage => this.setState({ page: newPage })}\n                            totalPages={this.state.maxPage ?? 1}\n                            currentPage={this.state.page}\n                        />\n                    </>\n                ) : canSeeCurrent ? (\n                    <>\n                        <GenericAlert title=\"view.instance.byond.list_denied\" />\n                        <FormattedMessage\n                            id=\"view.instance.byond.current_version\"\n                            values={{ version: this.state.activeVersion }}\n                        />\n                    </>\n                ) : (\n                    <GenericAlert title=\"view.instance.byond.current_and_list_denied\" />\n                )}\n                <hr />\n                <h4>\n                    <FormattedMessage id=\"view.instance.byond.add\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitch ? undefined : false}>\n                            <Button\n                                variant=\"success\"\n                                disabled={!canInstallAndSwitch}\n                                onClick={async () => {\n                                    await this.switchVersion(this.state.selectedVersion, true);\n                                }}>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustom ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustom}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.byond.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </div>\n        );\n    }\n}\nByond.contextType = InstanceEditContext;\nexport default Byond;\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    CompileJobResponse,\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { DeploymentsData, ViewDataType } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n    const [compileJobs, setCompileJobs] = useState<CompileJobResponse[] | null>(null);\n    const [compileJobsPage, setCompileJobsPage] = useState<number>(1);\n    const [compileJobsTotalPages, setCompileJobsTotalPages] = useState<number>(0);\n\n    // adjusts the size of the viewer pages, undefined uses default server page size\n    const [compileJobsPageSize, setCompileJobsPageSize] = useState<number | undefined>(5);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n    const canReadDeployments = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.CompileJobs\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    async function loadCompileJobs(page: number): Promise<void> {\n        if (!canReadDeployments) {\n            return;\n        }\n\n        // loading is handled in viewer component\n        setCompileJobs(null);\n        const response = await DreamMakerClient.listCompileJobs(instanceEditContext.instance.id, {\n            page,\n            pageSize: compileJobsPageSize\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (!compileJobsPageSize) setCompileJobsPageSize(response.payload.pageSize);\n\n            setCompileJobsTotalPages(response.payload.totalPages);\n            setCompileJobsPage(page);\n            setCompileJobs(response.payload.content);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        void loadCompileJobs(1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 1,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        requireDMApiValidation: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.requireDMApiValidation,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    let deploymentViewData: DeploymentsData | null = null;\n    const paging = {\n        currentPage: compileJobsPage,\n        totalPages: compileJobsTotalPages,\n        loadPage: loadCompileJobs,\n        pageSize: compileJobsPageSize ?? 0 // will always be set before being accessed\n    };\n\n    if (!canReadDeployments) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            paging\n        };\n    } else if (compileJobs) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            compileJobs,\n            paging\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            {displayErrors(errorState)}\n            {canReadDeployments ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {isLoading ? (\n                <Loading text=\"loading.deployments\" />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={async () => {\n                                const response = await DreamMakerClient.startCompile(\n                                    instanceEditContext.instance.id\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    addError(errorState, response.error);\n                                } else {\n                                    JobsController.registerJob(\n                                        response.payload,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.fastmode = 5;\n                                }\n                            }}>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport JobsClient, { TGSJobResponse } from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport JobCard from \"../../../utils/JobCard\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\nexport default function JobHistory(): JSX.Element {\n    const instanceEditContext = React.useContext(InstanceEditContext);\n\n    const [jobs, setJobs] = useState<TGSJobResponse[]>([]);\n    const [errors, setErrors] = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(\n        RouteData.jobhistorypage.get(instanceEditContext.instance.id) ?? 1\n    );\n    const [maxPage, setMaxPage] = useState<number | undefined>(undefined);\n\n    //const [];\n\n    useEffect(() => {\n        async function loadJobs() {\n            const response = await JobsClient.listJobs(instanceEditContext.instance.id, {\n                page: page\n            });\n            if (response.code === StatusCode.OK) {\n                if (page > response.payload.totalPages && response.payload.totalPages !== 0)\n                    setPage(1);\n                setJobs(response.payload.content);\n                setMaxPage(response.payload.totalPages);\n            } else {\n                addError(response.error);\n            }\n            setLoading(false);\n        }\n\n        RouteData.jobhistorypage.set(instanceEditContext.instance.id, page);\n        setLoading(true);\n        void loadJobs();\n    }, [page, instanceEditContext.instance.id]);\n\n    useEffect(() => {}, [errors]);\n\n    function addError(error: InternalError<ErrorCode>): void {\n        setErrors(prevState => {\n            const errors = Array.from(prevState);\n            errors.push(error);\n            return errors;\n        });\n    }\n\n    async function onCancel(job: TGSJobResponse) {\n        const status = await JobsClient.deleteJob(job.instanceid, job.id);\n\n        if (status.code === StatusCode.OK) {\n            JobsController.fastmode = 5;\n        } else {\n            addError(status.error);\n        }\n    }\n\n    if (loading) {\n        return <Loading text=\"loading.instance.jobs.list\" />;\n    }\n\n    return (\n        <div>\n            <DebugJsonViewer obj={jobs} />\n            {errors.map((err, index) => {\n                if (!err) return;\n                return (\n                    <ErrorAlert\n                        key={index}\n                        error={err}\n                        onClose={() =>\n                            setErrors(prev => {\n                                const newarr = Array.from(prev);\n                                newarr[index] = undefined;\n                                return newarr;\n                            })\n                        }\n                    />\n                );\n            })}\n            {jobs\n                .sort((a, b) => b.id - a.id)\n                .filter(job => !!job.stoppedAt)\n                .map(job => (\n                    <JobCard job={job} key={job.id} onCancel={onCancel} />\n                ))}\n            <PageHelper\n                selectPage={newPage => setPage(newPage)}\n                totalPages={maxPage ?? 1}\n                currentPage={page}\n            />\n        </div>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonRequest,\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { ViewDataType, WatchdogData } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nexport default function Server(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void loadWatchdogSettings(), [instanceEditContext.instance.id]);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonRequest): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        if (!confirm()) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        if (!confirm()) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        startProfiler: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostartprofiler\",\n            defaultValue: watchdogSettings.startProfiler,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetProfiler\n            )\n        },\n        logOutput: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.logoutput\",\n            defaultValue: watchdogSettings.logOutput,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetLogOutput\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        healthCheckSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.healthcheck\",\n            defaultValue: watchdogSettings.healthCheckSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHealthCheckInterval\n            )\n        },\n        dumpOnHealthCheckRestart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.dumpOnHealthCheckRestart\",\n            defaultValue: watchdogSettings.dumpOnHealthCheckRestart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.CreateDump\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        },\n        mapThreads: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.mapthreads\",\n            defaultValue: watchdogSettings.mapThreads,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMapThreads\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    const canViewDeployment = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadRevision\n    );\n\n    let deploymentViewData: WatchdogData | null = null;\n    if (watchdogSettings) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.Watchdog,\n            activeCompileJob: watchdogSettings.activeCompileJob,\n            stagedCompileJob: watchdogSettings.stagedCompileJob\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                            ? \"danger\"\n                            : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            <hr />\n            {canViewDeployment ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={startWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={stopWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={restartWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={dumpWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                ? GracefulAction.Stop\n                                : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n        </div>\n    );\n}\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport {\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    InstancePermissionSetResponse,\n    RepositoryRights\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { InstanceEditSidebar } from \"../../../ApiClient/util/config\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport AccessDenied from \"../../utils/AccessDenied\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport Byond from \"./Edit/Byond\";\nimport ChatBots from \"./Edit/ChatBots\";\nimport Config from \"./Edit/Config\";\nimport { Deployment } from \"./Edit/Deployment\";\nimport Files from \"./Edit/Files\";\nimport InstancePermissions from \"./Edit/InstancePermissions\";\nimport JobHistory from \"./Edit/JobHistory\";\nimport Repository from \"./Edit/Repository\";\nimport Server from \"./Edit/Server\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nconst minimumByondPerms =\n    ByondRights.ReadActive |\n    ByondRights.ListInstalled |\n    ByondRights.InstallOfficialOrChangeActiveVersion |\n    ByondRights.InstallCustomVersion;\n\nconst minimumServerPerms =\n    DreamDaemonRights.SetPort |\n    DreamDaemonRights.SetAutoStart |\n    DreamDaemonRights.SetSecurity |\n    DreamDaemonRights.ReadMetadata |\n    DreamDaemonRights.SetWebClient |\n    DreamDaemonRights.SoftRestart |\n    DreamDaemonRights.SoftShutdown |\n    DreamDaemonRights.Restart |\n    DreamDaemonRights.Shutdown |\n    DreamDaemonRights.Start |\n    DreamDaemonRights.SetStartupTimeout |\n    DreamDaemonRights.SetHealthCheckInterval |\n    DreamDaemonRights.CreateDump |\n    DreamDaemonRights.SetTopicTimeout |\n    DreamDaemonRights.SetAdditionalParameters |\n    DreamDaemonRights.SetVisibility;\n\nconst minimumRepoPerms =\n    RepositoryRights.SetOrigin |\n    RepositoryRights.SetSha |\n    RepositoryRights.MergePullRequest |\n    RepositoryRights.UpdateBranch |\n    RepositoryRights.ChangeCommitter |\n    RepositoryRights.ChangeTestMergeCommits |\n    RepositoryRights.ChangeCredentials |\n    RepositoryRights.SetReference |\n    RepositoryRights.Read |\n    RepositoryRights.ChangeAutoUpdateSettings |\n    RepositoryRights.Delete |\n    RepositoryRights.ChangeSubmoduleUpdate;\n\nconst minimumDeployPerms =\n    DreamMakerRights.Read |\n    DreamMakerRights.Compile |\n    DreamMakerRights.SetApiValidationPort |\n    DreamMakerRights.SetDme |\n    DreamMakerRights.SetApiValidationRequirement |\n    DreamMakerRights.SetTimeout |\n    DreamMakerRights.SetSecurityLevel;\n\nconst minimumChatPerms = ChatBotRights.Read | ChatBotRights.Create;\n\nconst minimumFilePerms =\n    ConfigurationRights.Read | ConfigurationRights.List | ConfigurationRights.Write;\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public static tabs: [\n        string,\n        IconProp,\n        (\n            instancePermissionSet: InstancePermissionSetResponse,\n            generalContext: GeneralContext\n        ) => boolean,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ComponentType<any>?\n    ][] = [\n        [\"info\", \"info\", () => true, Config],\n        [\n            \"repository\",\n            \"code-branch\",\n            instancePermissionSet => !!(instancePermissionSet.repositoryRights & minimumRepoPerms),\n            Repository\n        ],\n        [\n            \"byond\",\n            \"list-ul\",\n            instancePermissionSet => !!(instancePermissionSet.byondRights & minimumByondPerms),\n            Byond\n        ],\n        [\n            \"deployment\",\n            \"hammer\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamMakerRights & minimumDeployPerms),\n            Deployment\n        ],\n        [\n            \"dreamdaemon\",\n            \"server\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamDaemonRights & minimumServerPerms),\n            Server\n        ],\n        [\n            \"chatbots\",\n            \"comments\",\n            instancePermissionSet => !!(instancePermissionSet.chatBotRights & minimumChatPerms),\n            ChatBots\n        ],\n        [\n            \"files\",\n            \"folder-open\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.configurationRights & minimumFilePerms),\n            Files\n        ],\n        [\"users\", \"users\", () => true, InstancePermissions],\n        [\"jobs\", \"stream\", () => true, JobHistory]\n    ];\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab ?? InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.reloadInstance();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (\n            this.props.match.params.tab &&\n            prevProps.match.params.tab != this.props.match.params.tab\n        ) {\n            this.setState({\n                tab: this.props.match.params.tab\n            });\n        }\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid,\n                true\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = () => {\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey ?? InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link ?? AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey ?? InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className={\n                        \"flex-nowrap text-nowrap flex-column hover-bar sticky-top \" +\n                        (configOptions.instanceeditsidebar.value === InstanceEditSidebar.COLLAPSE\n                            ? \"pin-close\"\n                            : configOptions.instanceeditsidebar.value === InstanceEditSidebar.EXPAND\n                            ? \"pin-open\"\n                            : \"\")\n                    }\n                    style={{ top: \"8em\" }}>\n                    {InstanceEdit.tabs.map(([tabKey, icon, accessCb, component]) => {\n                        if (!this.state.instancePermissionSet) {\n                            throw Error(\n                                \"this.state.instancePermissionSet is null in instanceedit nav map\"\n                            );\n                        }\n                        const wip = !component;\n                        const accessDenied = !accessCb(\n                            this.state.instancePermissionSet,\n                            this.context\n                        );\n\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab\"\n                                    className={\n                                        (wip ? \"no-access text-white\" : \"\") +\n                                        (accessDenied ? \"no-access text-white font-italic\" : \"\") +\n                                        \" text-left\"\n                                    }>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon\n                                            icon={accessDenied ? \"lock\" : icon}\n                                            fixedWidth\n                                        />\n                                        <div\n                                            className={\n                                                \"tab-text d-inline-block \" +\n                                                (accessDenied ? \"font-weight-lighter\" : \"\")\n                                            }>\n                                            <span className=\"pl-1\">\n                                                <FormattedMessage\n                                                    id={`view.instanceedit.tabs.${tabKey}`}\n                                                />\n                                            </span>\n                                        </div>\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card className=\"behind-nav\">\n                    <Card.Header className=\"text-center mb-2 sticky-top\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <div className=\"d-flex flex-row z-front\">\n                            <Card.Body className=\"flex-grow-0\">{nav()}</Card.Body>\n                            <Card.Body className=\"bg-body\">\n                                <Tab.Content>\n                                    {InstanceEdit.tabs.map(([tabKey, , accessCb, Comp]) => {\n                                        if (!this.state.instancePermissionSet) {\n                                            throw Error(\n                                                \"this.state.instancePermissionSet is null in render card map\"\n                                            );\n                                        }\n                                        return (\n                                            <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                                {Comp ? (\n                                                    !accessCb(\n                                                        this.state.instancePermissionSet,\n                                                        this.context\n                                                    ) ? (\n                                                        <AccessDenied />\n                                                    ) : (\n                                                        <Comp />\n                                                    )\n                                                ) : (\n                                                    <WIPNotice />\n                                                )}\n                                            </Tab.Pane>\n                                        );\n                                    })}\n                                </Tab.Content>\n                            </Card.Body>\n                        </div>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\n\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n"],"names":["Byond","React","constructor","props","super","this","state","versions","errors","activeVersion","latestVersion","selectedVersion","loading","page","RouteData","addError","error","setState","prevState","Array","from","push","hasByondRight","context","instancePermissionSet","ByondRights","response","ByondClient","instance","id","code","StatusCode","payload","totalPages","content","maxPage","response2","version","useCustom","customFile","arrayBuffer","undefined","installJob","JobsController","loadVersions","prevProps","fetch","then","res","text","data","split","catch","e","InternalError","ErrorCode","jsError","Error","render","canSeeVersions","canSeeCurrent","canInstallCustom","canInstallAndSwitch","canDelete","tooltip","innerid","className","obj","map","err","index","key","onClose","prev","newarr","title","name","value","disabled","checked","onChange","async","switchVersion","htmlFor","overlay","show","endsWith","ref","triggerHandler","substr","length","fixedWidth","icon","variant","onClick","faTrash","selectPage","newPage","currentPage","values","type","defaultValue","arr","target","join","faPlus","custom","label","accept","files","contextType","InstanceEditContext","InstanceSettings","editInstance","bind","moving","instanceId","newPath","path","online","InstanceClient","reloadInstance","response3","Promise","resolve","setTimeout","moveJob","response4","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","FieldType","InstanceManagerRights","chatBotLimit","min","autoUpdateInterval","configurationType","enum","ConfigurationType","onSave","withRouter","Deployment","instanceEditContext","useContext","errorState","useState","isLoading","setIsLoading","deployInfo","setDeployInfo","compileJobs","setCompileJobs","compileJobsPage","setCompileJobsPage","compileJobsTotalPages","setCompileJobsTotalPages","compileJobsPageSize","setCompileJobsPageSize","canRead","hasDreamMakerRight","DreamMakerRights","canCompile","canReadDeployments","loadDeployInfo","DreamMakerClient","loadCompileJobs","pageSize","timeout","useEffect","parsedTimeMatch","exec","parsedTime","groups","parseInt","days","hours","minutes","seconds","projectName","apiValidationPort","max","apiValidationSecurityLevel","DreamDaemonSecurity","requireDMApiValidation","deploymentViewData","paging","loadPage","viewDataType","ViewDataType","displayErrors","viewData","hideDisabled","newTimeout","_result","Math","floor","result","tooltipid","JobHistory","jobs","setJobs","setErrors","setLoading","setPage","setMaxPage","onCancel","job","status","JobsClient","instanceid","loadJobs","sort","a","b","filter","stoppedAt","GracefulAction","Server","watchdogSettings","setWatchdogSettings","loadWatchdogSettings","hasDreamDaemonRight","DreamDaemonRights","DreamDaemonClient","saveWatchdogSettings","newSettings","autoStart","startProfiler","logOutput","port","visibility","DreamDaemonVisibility","securityLevel","startupTimeout","topicRequestTimeout","healthCheckSeconds","dumpOnHealthCheckRestart","allowWebClient","additionalParameters","mapThreads","anyEditableField","Object","some","field","no_perm_tooltip","canStart","canStop","canRestart","canDump","canMetadata","canGracefulAny","canActionAny","canViewDeployment","activeCompileJob","stagedCompileJob","pill","WatchdogStatus","confirm","softRestart","Restart","softShutdown","Stop","None","minimumByondPerms","minimumServerPerms","minimumRepoPerms","RepositoryRights","minimumDeployPerms","minimumChatPerms","ChatBotRights","minimumFilePerms","ConfigurationRights","InstanceEdit","deleteContextError","match","params","tab","tabs","Set","deleteError","newSet","delete","componentDidUpdate","InstancePermissionSetClient","add","assign","serverInfo","instancename","mountOnEnter","unmountOnExit","activeKey","defaultActiveKey","onSelect","eventKey","history","AppRoutes","fill","configOptions","InstanceEditSidebar","style","top","tabKey","accessCb","component","wip","accessDenied","bsPrefix","nav","Comp","Config","repositoryRights","Repository","byondRights","dreamMakerRights","dreamDaemonRights","chatBotRights","ChatBots","configurationRights","Files","InstancePermissions","GeneralContext"],"sourceRoot":""}