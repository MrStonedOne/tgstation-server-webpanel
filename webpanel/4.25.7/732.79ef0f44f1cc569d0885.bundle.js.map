{"version":3,"file":"732.79ef0f44f1cc569d0885.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/utils/tgs_changelog.ts","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","export enum TgsComponent {\n    Configuration = \"Configuration\",\n    Core = \"Core\",\n    HostWatchdog = \"HostWatchdog\",\n    WebControlPanel = \"WebControlPanel\",\n    HttpApi = \"HttpApi\",\n    DreamMakerApi = \"DreamMakerApi\",\n    InteropApi = \"InteropApi\",\n    NugetCommon = \"NugetCommon\",\n    NugetApi = \"NugetApi\",\n    NugetClient = \"NugetClient\"\n}\n\ninterface Change {\n    Descriptions: string[];\n    Author: string;\n    PullRequest: number;\n}\n\ntype ComponentVersionMap = {\n    [key in TgsComponent]: string;\n};\n\nexport interface Changelist {\n    Version: string;\n    ComponentVersions?: ComponentVersionMap;\n    Changes?: Change[];\n    Unreleased?: boolean;\n}\n\ntype ComponentMap = {\n    [key in TgsComponent]: Changelist[];\n};\n\nexport default interface TGSChangelog {\n    Components: ComponentMap;\n}\n","import { faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { SemVer } from \"semver\";\nimport YAML from \"yaml\";\n\nimport AdminClient, { UpdateErrors } from \"../../../ApiClient/AdminClient\";\nimport {\n    AdministrationRights,\n    ServerUpdateResponse\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { hasAdminRight, resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport TGSChangelog, { Changelist, TgsComponent } from \"../../../utils/tgs_changelog\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps\n    extends RouteComponentProps<{\n        all: string;\n    }> {}\ninterface IState {\n    versions: TGSVersion[];\n    changelog: TGSChangelog | null;\n    gitHubOwner: string | null;\n    gitHubRepo: string | null;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    //manual entry\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            changelog: null,\n            versions: [],\n            errors: [],\n            loading: true,\n            gitHubOwner: null,\n            gitHubRepo: null\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        if (\n            !hasAdminRight(\n                resolvePermissionSet(this.context.user),\n                AdministrationRights.ChangeVersion\n            )\n        ) {\n            return;\n        }\n\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                this.setState({\n                    gitHubOwner: results[2],\n                    gitHubRepo: results[3]\n                });\n\n                const loadChangelogPromise = this.loadChangelog(results[2], results[3]);\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        const changelog = await loadChangelogPromise;\n                        this.setState({\n                            changelog,\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private async loadChangelog(owner: string, repo: string): Promise<TGSChangelog | null> {\n        const changelogYmlB64 = await GithubClient.getFile(\n            owner,\n            repo,\n            \"changelog.yml\",\n            \"gh-pages\"\n        );\n        switch (changelogYmlB64.code) {\n            case StatusCode.ERROR: {\n                this.addError(changelogYmlB64.error);\n                break;\n            }\n            case StatusCode.OK: {\n                try {\n                    const changelogYml = window.atob(changelogYmlB64.payload);\n                    return YAML.parse(changelogYml) as TGSChangelog;\n                } catch (e) {\n                    this.addError(new InternalError(ErrorCode.BAD_YML, { void: true }));\n                }\n\n                break;\n            }\n        }\n\n        return null;\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async uploadVersion(): Promise<void> {\n        const inputPromise = new Promise<File | null>(resolve => {\n            const input = document.createElement(\"input\");\n            input.type = \"file\";\n            input.onchange = e => {\n                const files = (e.target as HTMLInputElement)?.files;\n                if (files) resolve(files[0]);\n                else resolve(null);\n            };\n            input.click();\n        });\n\n        const localFile = await inputPromise;\n        if (!localFile) return;\n\n        if (!localFile.name.toLowerCase().endsWith(\".zip\")) {\n            alert(\"Invalid zipfile!\");\n            return;\n        }\n\n        // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\n        const fileData = await localFile.arrayBuffer();\n\n        const targetVersionStr = prompt(\"Enter the TGS version semver:\");\n        if (!targetVersionStr) return;\n\n        const targetVersionSemver = new SemVer(targetVersionStr);\n\n        // reformat it for them in case they fucked up a little\n        const targetVersion = `${targetVersionSemver.major}.${targetVersionSemver.minor}.${targetVersionSemver.patch}`;\n\n        if (targetVersion != targetVersionStr) {\n            alert(\"Invalid semver!\");\n            return;\n        }\n\n        if (\n            !confirm(\n                `JUST WHAT DO YOU THINK YOU'RE DOING!? This is your only and final warning: Uploading a TGS Version .zip that is improperly formatted or that does not match the version you just entered (${targetVersion}) can brick your installation! Think carefully before pressing OK to continue.`\n            )\n        ) {\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.uploadVersion(targetVersion, fileData));\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.updateServer(this.state.selectedOption));\n    }\n\n    private async serverUpdated(\n        request: Promise<InternalStatus<ServerUpdateResponse, UpdateErrors>>\n    ): Promise<void> {\n        const response = await request;\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                return;\n            }\n            case StatusCode.OK: {\n                break;\n            }\n        }\n\n        ServerClient.autoLogin = false;\n        // i need that timer to be async\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        window.setInterval(async () => {\n            const response = await UserClient.getCurrentUser(true);\n            switch (response.code) {\n                //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                //in both cases, we should reboot\n                case StatusCode.ERROR: {\n                    window.location.reload();\n                }\n            }\n        }, 2000);\n        this.setState({\n            updating: true\n        });\n    }\n\n    private buildVersionDiffFromChangelog(targetVersion: string): string | null {\n        const releaseNotes = this.state.changelog;\n        if (!releaseNotes) {\n            return null;\n        }\n\n        const currentVersion = this.context.serverInfo.version;\n\n        const targetVersionSemver = new SemVer(targetVersion);\n        const currentVersionSemver = new SemVer(currentVersion);\n\n        let markdown = \"\";\n\n        const targetComponentVersions = releaseNotes.Components[TgsComponent.Core].find(\n            changelist => changelist.Version == targetVersion\n        )!.ComponentVersions!;\n\n        markdown += `Please refer to the [README](https://github.com/tgstation/tgstation-server#setup) for setup instructions. Full changelog can be found [here](https://raw.githubusercontent.com/tgstation/tgstation-server/gh-pages/changelog.yml).\\n\\n#### Component Versions\\nCore: ${targetVersion}\\nConfiguration: ${targetComponentVersions.Configuration}\\nHTTP API: ${targetComponentVersions.HttpApi}\\nDreamMaker API: ${targetComponentVersions.DreamMakerApi} (Interop: ${targetComponentVersions.InteropApi})\\n[Web Control Panel](https://github.com/tgstation/tgstation-server-webpanel): ${targetComponentVersions.WebControlPanel}\\nHost Watchdog: ${targetComponentVersions.HostWatchdog}\\n\\n`;\n\n        let lowerVersion: string;\n        let higherVersion: string;\n        if (targetVersionSemver < currentVersionSemver) {\n            markdown +=\n                \"## _The version you are switching to is below the current version._\\n## _The following changes will be **un**-applied!_\";\n            lowerVersion = targetVersion;\n            higherVersion = currentVersion;\n        } else {\n            lowerVersion = currentVersion;\n            higherVersion = targetVersion;\n        }\n\n        const lowerVersionSemver = new SemVer(lowerVersion);\n        const higherVersionSemver = new SemVer(higherVersion);\n\n        // implemented similarly to https://github.com/tgstation/tgstation-server/blob/63815c950f18fe999c1dade7fa2773752de9f149/tools/Tgstation.Server.ReleaseNotes/Program.cs#L1392\n        const coreChangelists = releaseNotes.Components[TgsComponent.Core]\n            .filter(changelist => {\n                const changelistVersionSemver = new SemVer(changelist.Version);\n                return (\n                    changelistVersionSemver >= lowerVersionSemver &&\n                    changelistVersionSemver <= higherVersionSemver\n                );\n            })\n            .sort((changelistA, changelistB) =>\n                new SemVer(changelistA.Version).compare(changelistB.Version)\n            )\n            .reverse();\n\n        const currentReleaseChangelists: Map<TgsComponent, Changelist>[] = [];\n\n        for (let i = 0; i < coreChangelists.length - 1; ++i) {\n            const currentDic = new Map<TgsComponent, Changelist>();\n            currentReleaseChangelists.push(currentDic);\n            const nowRelease = coreChangelists[i];\n            const previousRelease = coreChangelists[i + 1];\n\n            currentDic.set(TgsComponent.Core, nowRelease);\n            Object.keys(nowRelease.ComponentVersions!).forEach(componentStr => {\n                const component = componentStr as TgsComponent;\n                const componentVersionStr = nowRelease.ComponentVersions![component];\n                const componentVersion = new SemVer(componentVersionStr);\n                if (\n                    component == TgsComponent.Core ||\n                    component == TgsComponent.NugetClient ||\n                    component == TgsComponent.NugetApi ||\n                    component == TgsComponent.NugetCommon\n                )\n                    return;\n\n                const takeNotesFrom = new SemVer(previousRelease.ComponentVersions![component]);\n                const changesEnumerator = releaseNotes.Components[component]\n                    .filter(changelist => {\n                        const changelistVersion = new SemVer(changelist.Version);\n                        return (\n                            changelistVersion > takeNotesFrom &&\n                            changelistVersion <= componentVersion\n                        );\n                    })\n                    .flatMap(x => x.Changes!)\n                    .sort((changeA, changeB) => changeA.PullRequest - changeB.PullRequest);\n                const changelist: Changelist = {\n                    Version: componentVersionStr,\n                    Changes: changesEnumerator\n                };\n\n                if (changesEnumerator.length > 0) currentDic.set(component, changelist);\n            });\n        }\n\n        currentReleaseChangelists.forEach(releaseDictionary => {\n            markdown += \"\\n\\n\";\n            const coreCl = releaseDictionary.get(TgsComponent.Core)!;\n            const coreVersion = new SemVer(coreCl.Version);\n\n            if (coreVersion.patch > 0) {\n                markdown += `## Patch ${coreVersion.patch}`;\n            } else if (coreVersion.minor > 0) {\n                markdown += `# Update ${coreVersion.minor}.0`;\n            } else {\n                markdown += `# **Major Update ${coreVersion.major}.0.0**`;\n            }\n\n            for (const component in TgsComponent) {\n                const changelist = releaseDictionary.get(component as TgsComponent);\n                if (\n                    !changelist ||\n                    (changelist.Changes?.length == 0 && component != TgsComponent.Configuration)\n                ) {\n                    continue;\n                }\n\n                markdown += \"\\n\\n#### \";\n                if (component == TgsComponent.Configuration) {\n                    markdown += \"**\";\n                }\n\n                markdown += this.componentDisplayName(component);\n                if (component == TgsComponent.Configuration) {\n                    markdown += `\\n- **The new configuration version is \\`${changelist.Version}\\` Please update your \\`General:ConfigVersion\\` setting appropriately.**`;\n                }\n\n                changelist.Changes?.forEach(change =>\n                    change.Descriptions.forEach(line => {\n                        markdown += `\\n- ${line} ([#${change.PullRequest}](https://github.com/${this\n                            .state.gitHubOwner!}/${this.state.gitHubRepo!}/pull/${\n                            change.PullRequest\n                        })) [@${change.Author}](https://github.com/${change.Author})`;\n                    })\n                );\n            }\n        });\n\n        return markdown;\n    }\n\n    private componentDisplayName(component: string): string {\n        switch (component) {\n            case TgsComponent.HttpApi:\n                return \"HTTP API\";\n            case TgsComponent.InteropApi:\n                return \"Interop API\";\n            case TgsComponent.Configuration:\n                return \"**Configuration**\";\n            case TgsComponent.DreamMakerApi:\n                return \"DreamMaker API\";\n            case TgsComponent.HostWatchdog:\n                return \"Host Watchdog (Requires reinstall to apply)\";\n            case TgsComponent.Core:\n                return \"Core\";\n            case TgsComponent.WebControlPanel:\n                return \"Web Control Panel\";\n            default:\n                throw new Error(\"Unknown component: \" + component);\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const permissionSet = resolvePermissionSet(this.context.user);\n        const canChangeVersion = hasAdminRight(permissionSet, AdministrationRights.ChangeVersion);\n        const canUploadVersion = hasAdminRight(permissionSet, AdministrationRights.UploadVersion);\n\n        const selectedVersionMarkdown = this.state.selectedVersion\n            ? (\n                  this.buildVersionDiffFromChangelog(this.state.selectedVersion.version) ??\n                  this.state.selectedVersion.body\n              )\n                  .replaceAll(\"\\r\", \"\")\n                  .replaceAll(\"\\n\", \"\\n\\n\")\n            : null;\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown>{selectedVersionMarkdown!}</ReactMarkdown>\n                        <div className=\"text-center\">\n                            <hr />\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\" placement=\"right\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                show={timing}>\n                                <Button onClick={this.updateServer} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        {canChangeVersion ? (\n                            <Col xs={8} md={6} className=\"mx-auto\">\n                                {this.state.versions.map((version, index) => {\n                                    return (\n                                        <InputGroup className=\"mb-3\" key={version.version}>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    id={version.version}\n                                                    name=\"version\"\n                                                    disabled={version.current}\n                                                    value={version.version}\n                                                    checked={\n                                                        this.state.selectedOption ===\n                                                        version.version\n                                                    }\n                                                    onChange={handleChange}\n                                                />\n                                            </InputGroup.Prepend>\n                                            <FormControl\n                                                as={\"label\"}\n                                                htmlFor={version.version}\n                                                disabled>\n                                                {version.version}\n                                                {version.current ? (\n                                                    <FormattedMessage id=\"view.admin.update.current\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                                {index == 0 ? (\n                                                    <FormattedMessage id=\"view.admin.update.latest\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormControl>\n                                        </InputGroup>\n                                    );\n                                })}\n                                <Button\n                                    variant=\"link\"\n                                    onClick={() => {\n                                        this.props.history.push(\n                                            (AppRoutes.admin_update.link ??\n                                                AppRoutes.admin_update.route) + \"all/\",\n                                            {\n                                                reload: true\n                                            }\n                                        );\n                                    }}\n                                    disabled={!!this.props.match.params.all}>\n                                    <FormattedMessage id=\"view.admin.update.showall\" />\n                                </Button>\n                                <br />\n                                <Button\n                                    onClick={this.loadNotes}\n                                    disabled={!this.state.selectedOption}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                </Button>\n                            </Col>\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.admin.update.selectversion.deny\" />\n                            </h4>\n                        )}\n                        <br />\n                        <OverlayTrigger\n                            overlay={\n                                <Tooltip id=\"create-instance-tooltip\">\n                                    <FormattedMessage id=\"view.admin.update.upload.deny\" />\n                                </Tooltip>\n                            }\n                            show={canUploadVersion ? false : undefined}>\n                            {({ ref, ...triggerHandler }) => (\n                                <Button\n                                    ref={ref}\n                                    className=\"mx-1\"\n                                    variant=\"success\"\n                                    onClick={() => void this.uploadVersion()}\n                                    disabled={!canUploadVersion}\n                                    {...triggerHandler}>\n                                    <div>\n                                        <FontAwesomeIcon className=\"mr-2\" icon={faUpload} />\n                                        <FormattedMessage id=\"view.admin.update.upload\" />\n                                    </div>\n                                </Button>\n                            )}\n                        </OverlayTrigger>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\" && match[1][0] !== \"5\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","TgsComponent","Update","React","constructor","super","this","loadNotes","bind","updateServer","state","changelog","versions","errors","loading","gitHubOwner","gitHubRepo","loadVersions","setState","componentWillUnmount","timer","window","clearInterval","addError","error","prevState","Array","from","push","hasAdminRight","resolvePermissionSet","context","user","AdministrationRights","adminInfo","AdminClient","code","StatusCode","url","payload","trackedRepositoryUrl","results","exec","InternalError","ErrorCode","jsError","Error","body","version","current","old","loadChangelogPromise","loadChangelog","versionInfo","GithubClient","owner","repo","serverInfo","all","match","params","console","log","changelogYmlB64","changelogYml","atob","YAML","e","void","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","inputPromise","Promise","resolve","input","document","createElement","type","onchange","files","target","click","localFile","toLowerCase","endsWith","alert","fileData","arrayBuffer","targetVersionStr","prompt","targetVersionSemver","SemVer","targetVersion","major","minor","patch","confirm","serverUpdated","request","response","ServerClient","async","UserClient","location","reload","updating","buildVersionDiffFromChangelog","releaseNotes","currentVersion","currentVersionSemver","markdown","targetComponentVersions","Components","Core","find","changelist","Version","ComponentVersions","lowerVersion","higherVersion","Configuration","HttpApi","DreamMakerApi","InteropApi","WebControlPanel","HostWatchdog","lowerVersionSemver","higherVersionSemver","coreChangelists","filter","changelistVersionSemver","sort","changelistA","changelistB","compare","reverse","currentReleaseChangelists","i","length","currentDic","Map","nowRelease","previousRelease","set","Object","keys","forEach","componentStr","component","componentVersionStr","componentVersion","NugetClient","NugetApi","NugetCommon","takeNotesFrom","changesEnumerator","changelistVersion","flatMap","x","Changes","changeA","changeB","PullRequest","releaseDictionary","coreCl","get","coreVersion","componentDisplayName","change","Descriptions","line","Author","render","Loading","text","handleChange","changeEvent","value","permissionSet","canChangeVersion","canUploadVersion","selectedVersionMarkdown","replaceAll","timing","map","err","index","ErrorAlert","key","onClose","prev","newarr","id","Button","onClick","OverlayTrigger","overlay","Tooltip","placement","show","disabled","Col","xs","md","InputGroup","checked","onChange","FormControl","as","htmlFor","variant","history","AppRoutes","ref","triggerHandler","uploadVersion","icon","faUpload","contextType","GeneralContext","withRouter","hook","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","assign","TypedEmitter","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","warn","method","retryCount","onAbuseLimit","oldversions","paginate","repos","listReleases","done","data","reduce","result","release","InternalStatus","transformPR","pr","number","title","author","login","merged_at","link","html_url","head","sha","tail","base","testmergelabel","labels","some","label","includes","wantedPRs","pulls","list","wantedPR","pull_number","wantedCommit","extraCommit","listCommits","per_page","commit","message","split","_extraCommit","getCommit","path","getContent","mediaType","format","isArray","raw","content","element","isDirectory"],"sourceRoot":""}