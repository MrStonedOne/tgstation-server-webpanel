{"version":3,"file":"182.8f731c00cbe89bf1f205.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Byond.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/JobHistory.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/InstanceEdit.tsx"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport ByondClient from \"../../../../ApiClient/ByondClient\";\nimport { ByondResponse, ByondRights } from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasByondRight } from \"../../../../utils/misc\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\ninterface IProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: ByondResponse[];\n    activeVersion?: string | null;\n    latestVersion: string;\n    selectedVersion: string;\n    loading: boolean;\n    customFile?: File | null;\n    page: number;\n    maxPage?: number;\n}\n\nclass Byond extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            activeVersion: \"\",\n            latestVersion: \"\",\n            selectedVersion: \"\",\n            loading: true,\n            page: RouteData.byondlistpage ?? 1\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        if (hasByondRight(this.context.instancePermissionSet, ByondRights.ListInstalled)) {\n            const response = await ByondClient.listAllVersions(this.context.instance.id, {\n                page: this.state.page\n            });\n            if (response.code === StatusCode.OK) {\n                if (\n                    this.state.page > response.payload.totalPages &&\n                    response.payload.totalPages !== 0\n                ) {\n                    this.setState({\n                        page: 1\n                    });\n                    return;\n                }\n\n                this.setState({\n                    versions: response.payload.content,\n                    maxPage: response.payload.totalPages\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (hasByondRight(this.context.instancePermissionSet, ByondRights.ReadActive)) {\n            const response2 = await ByondClient.getActiveVersion(this.context.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.version\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        }\n    }\n\n    public async componentDidUpdate(\n        prevProps: Readonly<IProps>,\n        prevState: Readonly<IState>\n    ): Promise<void> {\n        if (prevState.page !== this.state.page) {\n            RouteData.byondlistpage = this.state.page;\n            await this.loadVersions();\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.loadVersions();\n\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                this.setState({\n                    latestVersion: version,\n                    selectedVersion: version,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n                this.setState({\n                    loading: false\n                });\n            });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.byond\" />;\n        }\n\n        const canSeeVersions = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.ListInstalled\n        );\n        const canSeeCurrent = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.ReadActive\n        );\n        const canInstallCustom = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.InstallCustomVersion\n        );\n        const canInstallAndSwitch = hasByondRight(\n            this.context.instancePermissionSet,\n            ByondRights.InstallOfficialOrChangeActiveVersion\n        );\n\n        const tooltip = (innerid?: string) => {\n            if (!innerid) return <React.Fragment />;\n\n            return (\n                <Tooltip id={innerid}>\n                    <FormattedMessage id={innerid} />\n                </Tooltip>\n            );\n        };\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state.versions} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.byond\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {canSeeVersions ? (\n                    <>\n                        {!canSeeCurrent ? (\n                            <GenericAlert title=\"view.instance.byond.current_denied\" />\n                        ) : null}\n                        <div\n                            onChange={async (e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    loading: true\n                                });\n                                const response = await ByondClient.switchActive(\n                                    this.context.instance.id,\n                                    e.target.value\n                                );\n                                if (response.code === StatusCode.OK) {\n                                    await this.loadVersions();\n                                } else {\n                                    this.addError(response.error);\n                                }\n                                this.setState({\n                                    loading: false\n                                });\n                            }}>\n                            {this.state.versions.map(version => {\n                                // noinspection JSBitwiseOperatorUsage\n                                return (\n                                    <InputGroup\n                                        className=\"w-md-25 mb-1 mx-auto d-flex\"\n                                        key={version.version}>\n                                        {canInstallAndSwitch || canSeeCurrent ? (\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    name=\"byond\"\n                                                    id={version.version!}\n                                                    value={version.version!}\n                                                    disabled={!canInstallAndSwitch}\n                                                    defaultChecked={\n                                                        version.version! ===\n                                                        this.state.activeVersion\n                                                    }\n                                                />\n                                            </InputGroup.Prepend>\n                                        ) : null}\n                                        <label\n                                            className=\"flex-grow-1 m-0\"\n                                            htmlFor={version.version!}>\n                                            <OverlayTrigger\n                                                overlay={tooltip(\"view.instance.byond.custom\")}\n                                                show={\n                                                    !version.version!.endsWith(\".0\")\n                                                        ? undefined\n                                                        : false\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <InputGroup.Text\n                                                        className=\"w-100\"\n                                                        {...triggerHandler}>\n                                                        {version.version!.endsWith(\".0\")\n                                                            ? version.version!.substr(\n                                                                  0,\n                                                                  version.version!.length - 2\n                                                              )\n                                                            : version.version}\n                                                        {!version.version!.endsWith(\".0\") ? (\n                                                            <div\n                                                                className={\"ml-auto\"}\n                                                                ref={\n                                                                    ref as React.Ref<HTMLDivElement>\n                                                                }>\n                                                                <FontAwesomeIcon\n                                                                    fixedWidth\n                                                                    icon=\"info\"\n                                                                />\n                                                            </div>\n                                                        ) : null}\n                                                    </InputGroup.Text>\n                                                )}\n                                            </OverlayTrigger>\n                                        </label>\n                                    </InputGroup>\n                                );\n                            })}\n                        </div>\n                        <PageHelper\n                            className=\"mt-4\"\n                            selectPage={newPage => this.setState({ page: newPage })}\n                            totalPages={this.state.maxPage ?? 1}\n                            currentPage={this.state.page}\n                        />\n                    </>\n                ) : canSeeCurrent ? (\n                    <>\n                        <GenericAlert title=\"view.instance.byond.list_denied\" />\n                        <FormattedMessage\n                            id=\"view.instance.byond.current_version\"\n                            values={{ version: this.state.activeVersion }}\n                        />\n                    </>\n                ) : (\n                    <GenericAlert title=\"view.instance.byond.current_and_list_denied\" />\n                )}\n                <hr />\n                <h4>\n                    <FormattedMessage id=\"view.instance.byond.add\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestVersion.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = prev.selectedVersion.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedVersion: arr.join(\".\")\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitch ? undefined : false}>\n                            <Button\n                                variant={canInstallAndSwitch ? \"success\" : \"danger\"}\n                                disabled={!canInstallAndSwitch}\n                                onClick={async () => {\n                                    this.setState({\n                                        loading: true\n                                    });\n                                    const response = await ByondClient.switchActive(\n                                        this.context.instance.id,\n                                        this.state.selectedVersion,\n                                        this.state.customFile\n                                            ? await this.state.customFile.arrayBuffer()\n                                            : undefined\n                                    );\n                                    if (response.code === StatusCode.ERROR) {\n                                        this.addError(response.error);\n                                    } else {\n                                        this.setState({\n                                            customFile: null\n                                        });\n                                        await this.loadVersions();\n                                    }\n                                    this.setState({\n                                        loading: false\n                                    });\n                                }}>\n                                <FontAwesomeIcon icon=\"plus\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustom ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustom}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.byond.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </div>\n        );\n    }\n}\nByond.contextType = InstanceEditContext;\nexport default Byond;\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            void this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputForm fields={fields} onSave={this.editInstance} />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    CompileJobResponse,\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { DeploymentsData, ViewDataType } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n    const [compileJobs, setCompileJobs] = useState<CompileJobResponse[] | null>(null);\n    const [compileJobsPage, setCompileJobsPage] = useState<number>(1);\n    const [compileJobsTotalPages, setCompileJobsTotalPages] = useState<number>(0);\n\n    // adjusts the size of the viewer pages, undefined uses default server page size\n    const [compileJobsPageSize, setCompileJobsPageSize] = useState<number | undefined>(5);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n    const canReadDeployments = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.CompileJobs\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    async function loadCompileJobs(page: number): Promise<void> {\n        if (!canReadDeployments) {\n            return;\n        }\n\n        // loading is handled in viewer component\n        setCompileJobs(null);\n        const response = await DreamMakerClient.listCompileJobs(instanceEditContext.instance.id, {\n            page,\n            pageSize: compileJobsPageSize\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (!compileJobsPageSize) setCompileJobsPageSize(response.payload.pageSize);\n\n            setCompileJobsTotalPages(response.payload.totalPages);\n            setCompileJobsPage(page);\n            setCompileJobs(response.payload.content);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        void loadCompileJobs(1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 1,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        requireDMApiValidation: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.requireDMApiValidation,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    let deploymentViewData: DeploymentsData | null = null;\n    const paging = {\n        currentPage: compileJobsPage,\n        totalPages: compileJobsTotalPages,\n        loadPage: loadCompileJobs,\n        pageSize: compileJobsPageSize ?? 0 // will always be set before being accessed\n    };\n\n    if (!canReadDeployments) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            paging\n        };\n    } else if (compileJobs) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            compileJobs,\n            paging\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            {displayErrors(errorState)}\n            {canReadDeployments ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {isLoading ? (\n                <Loading text=\"loading.deployments\" />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={async () => {\n                                const response = await DreamMakerClient.startCompile(\n                                    instanceEditContext.instance.id\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    addError(errorState, response.error);\n                                } else {\n                                    JobsController.registerJob(\n                                        response.payload,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.fastmode = 5;\n                                }\n                            }}>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport JobsClient, { TGSJobResponse } from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport JobCard from \"../../../utils/JobCard\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\nexport default function JobHistory(): JSX.Element {\n    const instanceEditContext = React.useContext(InstanceEditContext);\n\n    const [jobs, setJobs] = useState<TGSJobResponse[]>([]);\n    const [errors, setErrors] = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(\n        RouteData.jobhistorypage.get(instanceEditContext.instance.id) ?? 1\n    );\n    const [maxPage, setMaxPage] = useState<number | undefined>(undefined);\n\n    //const [];\n\n    useEffect(() => {\n        async function loadJobs() {\n            const response = await JobsClient.listJobs(instanceEditContext.instance.id, {\n                page: page\n            });\n            if (response.code === StatusCode.OK) {\n                if (page > response.payload.totalPages && response.payload.totalPages !== 0)\n                    setPage(1);\n                setJobs(response.payload.content);\n                setMaxPage(response.payload.totalPages);\n            } else {\n                addError(response.error);\n            }\n            setLoading(false);\n        }\n\n        RouteData.jobhistorypage.set(instanceEditContext.instance.id, page);\n        setLoading(true);\n        void loadJobs();\n    }, [page, instanceEditContext.instance.id]);\n\n    useEffect(() => {}, [errors]);\n\n    function addError(error: InternalError<ErrorCode>): void {\n        setErrors(prevState => {\n            const errors = Array.from(prevState);\n            errors.push(error);\n            return errors;\n        });\n    }\n\n    async function onCancel(job: TGSJobResponse) {\n        const status = await JobsClient.deleteJob(job.instanceid, job.id);\n\n        if (status.code === StatusCode.OK) {\n            JobsController.fastmode = 5;\n        } else {\n            addError(status.error);\n        }\n    }\n\n    if (loading) {\n        return <Loading text=\"loading.instance.jobs.list\" />;\n    }\n\n    return (\n        <div>\n            <DebugJsonViewer obj={jobs} />\n            {errors.map((err, index) => {\n                if (!err) return;\n                return (\n                    <ErrorAlert\n                        key={index}\n                        error={err}\n                        onClose={() =>\n                            setErrors(prev => {\n                                const newarr = Array.from(prev);\n                                newarr[index] = undefined;\n                                return newarr;\n                            })\n                        }\n                    />\n                );\n            })}\n            {jobs\n                .sort((a, b) => b.id - a.id)\n                .filter(job => !!job.stoppedAt)\n                .map(job => (\n                    <JobCard job={job} key={job.id} onCancel={onCancel} />\n                ))}\n            <PageHelper\n                selectPage={newPage => setPage(newPage)}\n                totalPages={maxPage ?? 1}\n                currentPage={page}\n            />\n        </div>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { ViewDataType, WatchdogData } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nexport default function Server(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void loadWatchdogSettings(), [instanceEditContext.instance.id]);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonResponse): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        startProfiler: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostartprofiler\",\n            defaultValue: watchdogSettings.startProfiler,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetProfiler\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        heartbeatSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.heartbeat\",\n            defaultValue: watchdogSettings.heartbeatSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHeartbeatInterval\n            )\n        },\n        dumpOnHeartbeatFail: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.dumponheartbeatfail\",\n            defaultValue: watchdogSettings.dumpOnHeartbeatRestart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.CreateDump\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    const canViewDeployment = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadRevision\n    );\n\n    let deploymentViewData: WatchdogData | null = null;\n    if (watchdogSettings) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.Watchdog,\n            activeCompileJob: watchdogSettings.activeCompileJob,\n            stagedCompileJob: watchdogSettings.stagedCompileJob\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                            ? \"danger\"\n                            : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            <hr />\n            {canViewDeployment ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={startWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={stopWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={restartWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={dumpWatchdog}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                ? GracefulAction.Stop\n                                : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n        </div>\n    );\n}\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport {\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    InstancePermissionSetResponse,\n    RepositoryRights\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { InstanceEditSidebar } from \"../../../ApiClient/util/config\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport AccessDenied from \"../../utils/AccessDenied\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport Byond from \"./Edit/Byond\";\nimport ChatBots from \"./Edit/ChatBots\";\nimport Config from \"./Edit/Config\";\nimport { Deployment } from \"./Edit/Deployment\";\nimport Files from \"./Edit/Files\";\nimport InstancePermissions from \"./Edit/InstancePermissions\";\nimport JobHistory from \"./Edit/JobHistory\";\nimport Repository from \"./Edit/Repository\";\nimport Server from \"./Edit/Server\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nconst minimumByondPerms =\n    ByondRights.ReadActive |\n    ByondRights.ListInstalled |\n    ByondRights.InstallOfficialOrChangeActiveVersion |\n    ByondRights.InstallCustomVersion;\n\nconst minimumServerPerms =\n    DreamDaemonRights.SetPort |\n    DreamDaemonRights.SetAutoStart |\n    DreamDaemonRights.SetSecurity |\n    DreamDaemonRights.ReadMetadata |\n    DreamDaemonRights.SetWebClient |\n    DreamDaemonRights.SoftRestart |\n    DreamDaemonRights.SoftShutdown |\n    DreamDaemonRights.Restart |\n    DreamDaemonRights.Shutdown |\n    DreamDaemonRights.Start |\n    DreamDaemonRights.SetStartupTimeout |\n    DreamDaemonRights.SetHeartbeatInterval |\n    DreamDaemonRights.CreateDump |\n    DreamDaemonRights.SetTopicTimeout |\n    DreamDaemonRights.SetAdditionalParameters |\n    DreamDaemonRights.SetVisibility;\n\nconst minimumRepoPerms =\n    RepositoryRights.SetOrigin |\n    RepositoryRights.SetSha |\n    RepositoryRights.MergePullRequest |\n    RepositoryRights.UpdateBranch |\n    RepositoryRights.ChangeCommitter |\n    RepositoryRights.ChangeTestMergeCommits |\n    RepositoryRights.ChangeCredentials |\n    RepositoryRights.SetReference |\n    RepositoryRights.Read |\n    RepositoryRights.ChangeAutoUpdateSettings |\n    RepositoryRights.Delete |\n    RepositoryRights.ChangeSubmoduleUpdate;\n\nconst minimumDeployPerms =\n    DreamMakerRights.Read |\n    DreamMakerRights.Compile |\n    DreamMakerRights.SetApiValidationPort |\n    DreamMakerRights.SetDme |\n    DreamMakerRights.SetApiValidationRequirement |\n    DreamMakerRights.SetTimeout |\n    DreamMakerRights.SetSecurityLevel;\n\nconst minimumChatPerms = ChatBotRights.Read | ChatBotRights.Create;\n\nconst minimumFilePerms =\n    ConfigurationRights.Read | ConfigurationRights.List | ConfigurationRights.Write;\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public static tabs: [\n        string,\n        IconProp,\n        (\n            instancePermissionSet: InstancePermissionSetResponse,\n            generalContext: GeneralContext\n        ) => boolean,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ComponentType<any>?\n    ][] = [\n        [\"info\", \"info\", () => true, Config],\n        [\n            \"repository\",\n            \"code-branch\",\n            instancePermissionSet => !!(instancePermissionSet.repositoryRights & minimumRepoPerms),\n            Repository\n        ],\n        [\n            \"deployment\",\n            \"hammer\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamMakerRights & minimumDeployPerms),\n            Deployment\n        ],\n        [\n            \"dd\",\n            \"server\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamDaemonRights & minimumServerPerms),\n            Server\n        ],\n        [\n            \"byond\",\n            \"list-ul\",\n            instancePermissionSet => !!(instancePermissionSet.byondRights & minimumByondPerms),\n            Byond\n        ],\n        [\n            \"chatbots\",\n            \"comments\",\n            instancePermissionSet => !!(instancePermissionSet.chatBotRights & minimumChatPerms),\n            ChatBots\n        ],\n        [\n            \"files\",\n            \"folder-open\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.configurationRights & minimumFilePerms),\n            Files\n        ],\n        [\"users\", \"users\", () => true, InstancePermissions],\n        [\"jobs\", \"stream\", () => true, JobHistory]\n    ];\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab ?? InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.reloadInstance();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (\n            this.props.match.params.tab &&\n            prevProps.match.params.tab != this.props.match.params.tab\n        ) {\n            this.setState({\n                tab: this.props.match.params.tab\n            });\n        }\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid,\n                true\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = () => {\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey ?? InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link ?? AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey ?? InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className={\n                        \"flex-nowrap text-nowrap flex-column hover-bar sticky-top \" +\n                        (configOptions.instanceeditsidebar.value === InstanceEditSidebar.COLLAPSE\n                            ? \"pin-close\"\n                            : configOptions.instanceeditsidebar.value === InstanceEditSidebar.EXPAND\n                            ? \"pin-open\"\n                            : \"\")\n                    }\n                    style={{ top: \"8em\" }}>\n                    {InstanceEdit.tabs.map(([tabKey, icon, accessCb, component]) => {\n                        if (!this.state.instancePermissionSet) {\n                            throw Error(\n                                \"this.state.instancePermissionSet is null in instanceedit nav map\"\n                            );\n                        }\n                        const wip = !component;\n                        const accessDenied = !accessCb(\n                            this.state.instancePermissionSet,\n                            this.context\n                        );\n\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab\"\n                                    className={\n                                        (wip ? \"no-access text-white\" : \"\") +\n                                        (accessDenied ? \"no-access text-white font-italic\" : \"\") +\n                                        \" text-left\"\n                                    }>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon\n                                            icon={accessDenied ? \"lock\" : icon}\n                                            fixedWidth\n                                        />\n                                        <div\n                                            className={\n                                                \"tab-text d-inline-block \" +\n                                                (accessDenied ? \"font-weight-lighter\" : \"\")\n                                            }>\n                                            <span className=\"pl-1\">\n                                                <FormattedMessage\n                                                    id={`view.instanceedit.tabs.${tabKey}`}\n                                                />\n                                            </span>\n                                        </div>\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card>\n                    <Card.Header className=\"text-center mb-2 sticky-top\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <div className=\"d-flex flex-row\">\n                            <Card.Body className=\"flex-grow-0\">{nav()}</Card.Body>\n                            <Card.Body className=\"bg-body\">\n                                <Tab.Content>\n                                    {InstanceEdit.tabs.map(([tabKey, , accessCb, Comp]) => {\n                                        if (!this.state.instancePermissionSet) {\n                                            throw Error(\n                                                \"this.state.instancePermissionSet is null in render card map\"\n                                            );\n                                        }\n                                        return (\n                                            <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                                {Comp ? (\n                                                    !accessCb(\n                                                        this.state.instancePermissionSet,\n                                                        this.context\n                                                    ) ? (\n                                                        <AccessDenied />\n                                                    ) : (\n                                                        <Comp />\n                                                    )\n                                                ) : (\n                                                    <WIPNotice />\n                                                )}\n                                            </Tab.Pane>\n                                        );\n                                    })}\n                                </Tab.Content>\n                            </Card.Body>\n                        </div>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\n\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n"],"names":["Byond","React","constructor","props","super","this","state","versions","errors","activeVersion","latestVersion","selectedVersion","loading","page","RouteData","addError","error","setState","prevState","Array","from","push","hasByondRight","context","instancePermissionSet","ByondRights","response","ByondClient","instance","id","code","StatusCode","payload","totalPages","content","maxPage","response2","version","prevProps","loadVersions","fetch","then","res","text","data","split","catch","e","InternalError","ErrorCode","jsError","Error","render","canSeeVersions","canSeeCurrent","canInstallCustom","canInstallAndSwitch","tooltip","innerid","className","obj","map","err","index","key","onClose","prev","newarr","undefined","title","onChange","async","target","value","name","disabled","defaultChecked","htmlFor","overlay","show","endsWith","ref","triggerHandler","substr","length","fixedWidth","icon","selectPage","newPage","currentPage","values","type","defaultValue","arr","join","variant","onClick","customFile","arrayBuffer","custom","label","accept","files","contextType","InstanceEditContext","InstanceSettings","editInstance","bind","InstanceClient","reloadInstance","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","FieldType","InstanceManagerRights","path","chatBotLimit","min","autoUpdateInterval","configurationType","enum","ConfigurationType","onSave","withRouter","Deployment","instanceEditContext","useContext","errorState","useState","isLoading","setIsLoading","deployInfo","setDeployInfo","compileJobs","setCompileJobs","compileJobsPage","setCompileJobsPage","compileJobsTotalPages","setCompileJobsTotalPages","compileJobsPageSize","setCompileJobsPageSize","canRead","hasDreamMakerRight","DreamMakerRights","canCompile","canReadDeployments","loadDeployInfo","DreamMakerClient","loadCompileJobs","pageSize","timeout","useEffect","parsedTimeMatch","exec","parsedTime","groups","parseInt","days","hours","minutes","seconds","projectName","apiValidationPort","max","apiValidationSecurityLevel","DreamDaemonSecurity","requireDMApiValidation","deploymentViewData","paging","loadPage","viewDataType","ViewDataType","displayErrors","viewData","hideDisabled","newTimeout","_result","Math","floor","result","tooltipid","JobsController","JobHistory","jobs","setJobs","setErrors","setLoading","setPage","setMaxPage","onCancel","job","status","JobsClient","instanceid","loadJobs","sort","a","b","filter","stoppedAt","GracefulAction","Server","watchdogSettings","setWatchdogSettings","loadWatchdogSettings","hasDreamDaemonRight","DreamDaemonRights","DreamDaemonClient","saveWatchdogSettings","newSettings","autoStart","startProfiler","port","visibility","DreamDaemonVisibility","securityLevel","startupTimeout","topicRequestTimeout","heartbeatSeconds","dumpOnHeartbeatFail","dumpOnHeartbeatRestart","allowWebClient","additionalParameters","anyEditableField","Object","some","field","no_perm_tooltip","canStart","canStop","canRestart","canDump","canMetadata","canGracefulAny","canActionAny","canViewDeployment","activeCompileJob","stagedCompileJob","pill","WatchdogStatus","softRestart","Restart","softShutdown","Stop","None","minimumByondPerms","minimumServerPerms","minimumRepoPerms","RepositoryRights","minimumDeployPerms","minimumChatPerms","ChatBotRights","minimumFilePerms","ConfigurationRights","InstanceEdit","deleteContextError","match","params","tab","tabs","Set","deleteError","newSet","delete","componentDidUpdate","InstancePermissionSetClient","add","assign","serverInfo","instancename","mountOnEnter","unmountOnExit","activeKey","defaultActiveKey","onSelect","eventKey","history","AppRoutes","fill","configOptions","InstanceEditSidebar","style","top","tabKey","accessCb","component","wip","accessDenied","bsPrefix","nav","Comp","Config","repositoryRights","Repository","dreamMakerRights","dreamDaemonRights","byondRights","chatBotRights","ChatBots","configurationRights","Files","InstancePermissions","GeneralContext"],"sourceRoot":""}