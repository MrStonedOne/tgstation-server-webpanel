{"version":3,"file":"480.c61fdbeb33641d57e048.bundle.js","mappings":"oNAoCA,QAAoB,cAA0BA,EAAAA,EAE/BC,sBACP,OAAOC,KAAKC,iBAITC,cACHC,QADiB,KANbF,sBAMa,OAFbG,kBAAmB,EAIvBC,EAAAA,EAAAA,GAAgB,cAAc,KAC1BL,KAAKC,sBAAmBK,KAIP,qBAErB,SADMD,EAAAA,EAAAA,YACFL,KAAKC,iBACL,OAAOD,KAAKC,iBAGhB,GAAID,KAAKI,iBACL,aAAa,IAAIG,SAAQC,IACrB,MAAMC,EACFC,IAEAF,EAAQE,GACRV,KAAKW,eAAe,gBAAiBF,IAEzCT,KAAKY,GAAG,gBAAiBH,MAMjC,IAAII,EAFJb,KAAKI,kBAAmB,EAGxB,IACIS,QAAiBR,EAAAA,EAAAA,UAAAA,eAAAA,+BACnB,MAAOS,GACL,MAAMC,EAAM,IAAIC,EAAAA,EAAwD,CACpEC,KAAMC,EAAAA,EAAAA,MACNC,MAAOL,IAIX,OAFAd,KAAKoB,KAAK,gBAAiBL,GAC3Bf,KAAKI,kBAAmB,EACjBW,EAGX,OAAQF,EAASQ,QACb,KAAK,IAAK,CACN,MAAMC,EAAQ,IAAIN,EAAAA,EAAqD,CACnEC,KAAMC,EAAAA,EAAAA,GACNK,QAASV,EAASW,OAMtB,OAHAxB,KAAKC,iBAAmBqB,EACxBtB,KAAKoB,KAAK,gBAAiBE,GAC3BtB,KAAKI,kBAAmB,EACjBkB,EAEX,KAAK,IAAK,CACN,MAAMG,EAAeZ,EAASW,KACxBF,EAAQ,IAAIN,EAAAA,EAGhB,CACEC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,kBACA,CAAEF,aAAAA,GACFZ,KAKR,OAFAb,KAAKoB,KAAK,gBAAiBE,GAC3BtB,KAAKI,kBAAmB,EACjBkB,EAEX,KAAK,IAAK,CACN,MAAMG,EAAeZ,EAASW,KACxBF,EAAQ,IAAIN,EAAAA,EAGhB,CACEC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEF,aAAAA,GACFZ,KAKR,OAFAb,KAAKoB,KAAK,gBAAiBE,GAC3BtB,KAAKI,kBAAmB,EACjBkB,EAEX,QAAS,CACL,MAAMP,EAAM,IAAIC,EAAAA,EAGd,CACEC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,KAKR,OAFAb,KAAKoB,KAAK,gBAAiBL,GAC3Bf,KAAKI,kBAAmB,EACjBW,IAKO,sBAGtB,IAAIF,QAFER,EAAAA,EAAAA,YAGN,IACIQ,QAAiBR,EAAAA,EAAAA,UAAAA,eAAAA,iCACnB,MAAOS,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOL,IAIf,OAAQD,EAASQ,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNK,QAAS,OAGjB,KAAK,IAAK,CACN,MAAME,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,uBACA,CAAEF,aAAAA,GACFZ,KAIZ,QACI,OAAO,IAAIG,EAAAA,EAAmD,CAC1DC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,MAOK,mBAACgB,GAGtB,IAAIhB,QAFER,EAAAA,EAAAA,YAGN,IACIQ,QAAiBR,EAAAA,EAAAA,UAAAA,eAAAA,+BAAsE,CACnFwB,WAAAA,IAEN,MAAOf,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOL,IAIf,OAAQD,EAASQ,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNK,QAAS,OAGjB,KAAK,IAAK,CACN,MAAME,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,wBACA,CAAEF,aAAAA,GACFZ,KAIZ,KAAK,IAAK,CACN,MAAMY,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,uBACA,CAAEF,aAAAA,GACFZ,KAIZ,KAAK,IAAK,CACN,MAAMY,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAkD,CACzDC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,kBACA,CAAEF,aAAAA,GACFZ,KAIZ,KAAK,IAAK,CACN,MAAMY,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAmD,CAC1DC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEF,aAAAA,GACFZ,KAIZ,QACI,OAAO,IAAIG,EAAAA,EAAmD,CAC1DC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,MAOA,eAAC,KACjBiB,EAAO,EADU,SAEjBC,EAAWC,EAAAA,GAAAA,aAAAA,QAIX,IAAInB,QAFER,EAAAA,EAAAA,YAGN,IACIQ,QAAiBR,EAAAA,EAAAA,UAAAA,eAAAA,iCACb,CACI0B,SAAUA,EACVD,KAAMA,IAGhB,MAAOhB,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOL,IAIf,OAAQD,EAASQ,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNK,QAASV,EAASW,OAG1B,KAAK,IAAK,CACN,MAAMC,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,oBACA,CAAEF,aAAAA,GACFZ,KAIZ,QACI,OAAO,IAAIG,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,MAOD,aACfoB,GAIA,IAAIpB,QAFER,EAAAA,EAAAA,YAGN,IACIQ,QAAiBR,EAAAA,EAAAA,UAAAA,eAAAA,+BACb4B,GAEN,MAAOnB,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOL,IAGf,OAAQD,EAASQ,QACb,KAAK,IAAK,CACN,MAAMa,EAAkBrB,EAASW,KAC3BW,QAAiBC,EAAAA,EAAAA,SAAwBF,EAAgBG,YAC/D,GAAIF,EAASlB,OAASC,EAAAA,EAAAA,GAAe,CAEjC,MAAMoB,EAAsBC,OAAOC,OAC/B,CACIC,cAAeN,EAASZ,QAAQmB,QAEpCR,GAEJ,OAAO,IAAIlB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNK,QAASe,IAGb,OAAO,IAAItB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOgB,EAAShB,QAI5B,KAAK,IAAK,CACN,MAAMM,EAAeZ,EAASW,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,oBACA,CAAEF,aAAAA,GACFZ,KAIZ,QACI,OAAO,IAAIG,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAIO,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/AdminClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    AdministrationResponse,\n    ErrorMessageResponse,\n    LogFileResponse,\n    PaginatedLogFileResponse\n} from \"./generatedcode/generated\";\nimport { DownloadedLog } from \"./models/DownloadedLog\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { DownloadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\ninterface IEvents {\n    loadAdminInfo: (user: InternalStatus<AdministrationResponse, AdminInfoErrors>) => void;\n}\n\nexport type AdminInfoErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type RestartErrors = GenericErrors | ErrorCode.ADMIN_WATCHDOG_UNAVAIL;\n\nexport type UpdateErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_WATCHDOG_UNAVAIL\n    | ErrorCode.ADMIN_VERSION_NOT_FOUND\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type LogsErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport type LogErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport default new (class AdminClient extends ApiClient<IEvents> {\n    private _cachedAdminInfo?: InternalStatus<AdministrationResponse, ErrorCode.OK>;\n    public get cachedAdminInfo() {\n        return this._cachedAdminInfo;\n    }\n    private loadingAdminInfo = false;\n\n    public constructor() {\n        super();\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedAdminInfo = undefined;\n        });\n    }\n\n    public async getAdminInfo(): Promise<InternalStatus<AdministrationResponse, AdminInfoErrors>> {\n        await ServerClient.wait4Init();\n        if (this._cachedAdminInfo) {\n            return this._cachedAdminInfo;\n        }\n\n        if (this.loadingAdminInfo) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<AdministrationResponse, AdminInfoErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadAdminInfo\", resolver);\n                };\n                this.on(\"loadAdminInfo\", resolver);\n            });\n        }\n\n        this.loadingAdminInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerRead();\n        } catch (stat) {\n            const res = new InternalStatus<AdministrationResponse, AdminInfoErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<AdminInfoErrors>\n            });\n            this.emit(\"loadAdminInfo\", res);\n            this.loadingAdminInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<AdministrationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as AdministrationResponse\n                });\n\n                this._cachedAdminInfo = thing;\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_RATE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_ERROR\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", res);\n                this.loadingAdminInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async restartServer(): Promise<InternalStatus<null, RestartErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerDelete();\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<RestartErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateServer(newVersion: string): Promise<InternalStatus<null, UpdateErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerUpdate({\n                newVersion\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<UpdateErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_VERSION_NOT_FOUND,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_RATE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<null, ErrorCode.ADMIN_GITHUB_ERROR>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLogs({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedLogFileResponse, LogsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerListLogs(\n                {\n                    pageSize: pageSize,\n                    page: page\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<LogsErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedLogFileResponse\n                });\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLog(\n        logName: string\n    ): Promise<InternalStatus<DownloadedLog, LogErrors | DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.administration.administrationControllerGetLog(\n                logName\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                const logFileResponse = response.data as LogFileResponse;\n                const contents = await TransferClient.Download(logFileResponse.fileTicket);\n                if (contents.code === StatusCode.OK) {\n                    //Object.assign() is a funky function but all it does is copy everything from the second object to the first object\n                    const temp: DownloadedLog = Object.assign(\n                        {\n                            content: await contents.payload.text()\n                        },\n                        logFileResponse\n                    );\n                    return new InternalStatus({\n                        code: StatusCode.OK,\n                        payload: temp\n                    });\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: contents.error\n                    });\n                }\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","cachedAdminInfo","this","_cachedAdminInfo","constructor","super","loadingAdminInfo","ServerClient","undefined","Promise","resolve","resolver","user","removeListener","on","response","stat","res","InternalStatus","code","StatusCode","error","emit","status","thing","payload","data","errorMessage","InternalError","ErrorCode","axiosResponse","newVersion","page","pageSize","configOptions","logName","logFileResponse","contents","TransferClient","fileTicket","temp","Object","assign","content","text"],"sourceRoot":""}