{"version":3,"file":"222.95027b4bd2075f097c6e.bundle.js","mappings":"oNAYA,QAAoB,cAA0BA,EAAAA,EACb,uBACzBC,GAIA,IAAIC,QAFEC,EAAAA,EAAAA,YAGN,IACID,QAAiBC,EAAAA,EAAAA,UAAAA,MAAAA,oBAAkD,CAC/DC,QAAS,CACLC,SAAUJ,EAASK,cAG7B,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOJ,IAIf,OACS,MADDL,EAASU,OAEF,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASX,EAASY,OAIf,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,KAOQ,sBACxBD,GACA,KAAEiB,EAAO,EAAT,SAAYC,EAAWC,EAAAA,GAAAA,aAAAA,QAIvB,IAAIlB,QAFEC,EAAAA,EAAAA,YAGN,IACID,QAAiBC,EAAAA,EAAAA,UAAAA,MAAAA,oBACb,CACIe,KAAMA,EACNC,SAAUA,GAEd,CACIf,QAAS,CACLC,SAAUJ,EAASK,cAIjC,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOJ,IAIf,OACS,MADDL,EAASU,OAEF,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASX,EAASY,OAIf,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA,KAOK,mBACrBD,EACAoB,EACAC,GAIA,IAAIpB,QAFEC,EAAAA,EAAAA,YAGN,IACID,QAAiBC,EAAAA,EAAAA,UAAAA,MAAAA,sBACb,CACIkB,QAASA,EACTE,kBAAmBD,GAEvB,CACIlB,QAAS,CACLC,SAAUJ,EAASK,cAIjC,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOJ,IAIf,OAAQL,EAASU,QACb,KAAK,IACL,KAAK,IAAK,CACN,MAAMY,EAAetB,EAASY,KAC9B,GAAIU,EAAaC,WAAY,CACzB,GAAIH,EAAM,CACN,MAAMI,QAAkBC,EAAAA,EAAAA,OACpBH,EAAaC,WACbH,GAEJ,OAAII,EAAUjB,OAASC,EAAAA,EAAAA,GACZ,IAAIF,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASW,IAGN,IAAIhB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAOe,EAAUf,QAIzB,OAAO,IAAIH,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GAAcC,EAAAA,GAAAA,SAAoB,CACzCY,QAASC,MACL,2FAOpB,OAAO,IAAIrB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,GACNG,QAASW,IAGjB,QACI,OAAO,IAAIhB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAAA,MACNC,MAAO,IAAII,EAAAA,GACPC,EAAAA,GAAAA,mBACA,CAAEC,cAAef,GACjBA","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ByondClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ByondInstallResponse,\n    ByondResponse,\n    PaginatedByondResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { UploadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\nexport default new (class ByondClient extends ApiClient {\n    public async getActiveVersion(\n        instance: number\n    ): Promise<InternalStatus<ByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listAllVersions(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerList(\n                {\n                    page: page,\n                    pageSize: pageSize\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async switchActive(\n        instance: number,\n        version: string,\n        file?: ArrayBuffer\n    ): Promise<InternalStatus<ByondInstallResponse, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.byond.byondControllerUpdate(\n                {\n                    version: version,\n                    uploadCustomZip: !!file\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const responseData = response.data as ByondInstallResponse;\n                if (responseData.fileTicket) {\n                    if (file) {\n                        const response2 = await TransferClient.Upload(\n                            responseData.fileTicket,\n                            file\n                        );\n                        if (response2.code === StatusCode.OK) {\n                            return new InternalStatus({\n                                code: StatusCode.OK,\n                                payload: responseData\n                            });\n                        } else {\n                            return new InternalStatus({\n                                code: StatusCode.ERROR,\n                                error: response2.error\n                            });\n                        }\n                    } else {\n                        return new InternalStatus({\n                            code: StatusCode.ERROR,\n                            error: new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\n                                    \"switchActive is uploading a custom zip without actually having a zip file to upload\"\n                                )\n                            })\n                        });\n                    }\n                }\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: responseData\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","instance","response","ServerClient","headers","Instance","toString","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","axiosResponse","page","pageSize","configOptions","version","file","uploadCustomZip","responseData","fileTicket","response2","TransferClient","jsError","Error"],"sourceRoot":""}