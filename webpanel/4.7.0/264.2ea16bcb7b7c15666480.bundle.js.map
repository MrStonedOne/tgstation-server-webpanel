{"version":3,"file":"264.2ea16bcb7b7c15666480.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Repository.tsx","webpack://tgstation-server-control-panel/./src/components/utils/TestMergeRow.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import React from \"react\";\nimport { Button, ButtonGroup, Card, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    JobResponse,\n    RemoteGitProvider,\n    RepositoryCreateRequest,\n    RepositoryResponse,\n    RepositoryRights,\n    RepositoryUpdateRequest,\n    TestMerge,\n    TestMergeParameters\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport JobsClient from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport RepositoryClient from \"../../../../ApiClient/RepositoryClient\";\nimport configOptions from \"../../../../ApiClient/util/config\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient, { PullRequest } from \"../../../../utils/GithubClient\";\nimport { hasDreamMakerRight, hasRepoRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\nimport TestMergeRow from \"../../../utils/TestMergeRow\";\n\nenum PRState {\n    reapply = \"reapply\",\n    added = \"added\",\n    removed = \"removed\",\n    updated = \"updated\",\n    rename = \"renamed\"\n}\n\nenum ResetType {\n    None,\n    Local,\n    Remote\n}\n\ninterface IProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    repositoryInfo: RepositoryResponse | null;\n    loading: boolean;\n    cloning: boolean;\n    repoBusy: boolean;\n    unableToHookClone: boolean;\n    loadingPRs: boolean;\n    gitHubPRs: PullRequest[] | null;\n    manualPRs: Set<number>;\n    resetType: ResetType;\n    desiredState: Map<number, [current: boolean, sha: string, comment: string | null] | null>;\n    showDeleteModal: boolean;\n    manualPR: number;\n    lastManualPR: number;\n    deployAfter: boolean;\n}\n\nclass Repository extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            repositoryInfo: null,\n            loading: true,\n            cloning: false,\n            unableToHookClone: false,\n            gitHubPRs: null,\n            manualPRs: new Set<number>(),\n            resetType: ResetType.Remote,\n            desiredState: new Map<\n                number,\n                [current: boolean, sha: string, comment: string | null] | null\n            >(),\n            showDeleteModal: false,\n            manualPR: 0,\n            lastManualPR: 0,\n            deployAfter: false,\n            repoBusy: false,\n            loadingPRs: false\n        };\n\n        this.fetchRepositoryInfo = this.fetchRepositoryInfo.bind(this);\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.setState({\n            deployAfter: hasDreamMakerRight(\n                this.context.instancePermissionSet,\n                DreamMakerRights.Compile\n            )\n        });\n        await this.fetchRepositoryInfo(undefined, true);\n    }\n\n    private async fetchRepositoryInfo(\n        cloneJob?: JobResponse,\n        resetDesiredState?: boolean\n    ): Promise<void> {\n        if (!hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)) {\n            this.setState({\n                loading: false,\n                cloning: false\n            });\n            this.reloadDesiredState(null, resetDesiredState ?? false, false);\n            this.setState({\n                repositoryInfo: null\n            });\n        }\n\n        const response = await RepositoryClient.getRepository(this.context.instance.id);\n\n        this.setState({\n            cloning: false,\n            repoBusy: false\n        });\n        if (response.code === StatusCode.ERROR) {\n            if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoCloning\n            ) {\n                this.setState({\n                    cloning: true,\n                    unableToHookClone: false\n                });\n                if (cloneJob) {\n                    JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                } else {\n                    const response2 = await JobsClient.listActiveJobs(this.context.instance.id, {\n                        page: 1,\n                        pageSize: 100\n                    });\n                    if (response2.code === StatusCode.OK) {\n                        const cloneJob = response2.payload.content\n                            .sort((a, b) => b.id - a.id)\n                            .find(\n                                job =>\n                                    job.description.includes(\"Clone\") &&\n                                    job.description.includes(\"repository\")\n                            );\n                        if (cloneJob) {\n                            JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                        } else {\n                            this.setState({\n                                unableToHookClone: true\n                            });\n                        }\n                    } else {\n                        this.addError(response2.error);\n                        this.setState({\n                            unableToHookClone: true\n                        });\n                    }\n                }\n            } else if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoBusy\n            ) {\n                this.setState({\n                    repoBusy: true\n                });\n            } else {\n                this.addError(response.error);\n            }\n        } else {\n            this.reloadPRs(response.payload, resetDesiredState);\n            //response.payload.remoteGitProvider = RemoteGitProvider.GitLab;\n            this.setState({ repositoryInfo: response.payload });\n        }\n        this.setState({ loading: false });\n    }\n\n    private reloadPRs(repositoryInfo: RepositoryResponse, resetDesiredState?: boolean) {\n        if (\n            repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub &&\n            repositoryInfo.remoteRepositoryName &&\n            repositoryInfo.remoteRepositoryOwner\n        ) {\n            this.setState({\n                loadingPRs: true\n            });\n            GithubClient.getPRs({\n                repo: repositoryInfo.remoteRepositoryName,\n                owner: repositoryInfo.remoteRepositoryOwner,\n                wantedPRs: repositoryInfo.revisionInformation?.activeTestMerges.map(tm => tm.number)\n            })\n                .then(prs => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    if (prs.code === StatusCode.ERROR) {\n                        this.addError(prs.error);\n                    } else {\n                        this.setState({\n                            gitHubPRs: prs.payload\n                        });\n                        if (resetDesiredState)\n                            this.reloadDesiredState(repositoryInfo, true, false, prs.payload);\n                    }\n                })\n                .catch(e => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: e as Error }));\n                });\n        }\n    }\n\n    private async applyTestmerges(noBranch: boolean): Promise<void> {\n        const editOptions: RepositoryUpdateRequest = {};\n        const repositoryInfo = this.state.repositoryInfo;\n        const willReset = this.state.resetType !== ResetType.None;\n\n        if (this.state.resetType === ResetType.Local) {\n            editOptions.checkoutSha = repositoryInfo?.revisionInformation?.originCommitSha;\n        } else if (this.state.resetType === ResetType.Remote) {\n            editOptions.updateFromOrigin = true;\n            editOptions.reference = repositoryInfo?.reference;\n        }\n\n        if (repositoryInfo && repositoryInfo?.remoteGitProvider === RemoteGitProvider.GitHub) {\n            const testMergeArray: TestMergeParameters[] = [];\n            [...this.state.desiredState.entries()].forEach(([number, prDesiredState]) => {\n                if (!prDesiredState) return;\n                const [current, commit, comment] = prDesiredState;\n                //If we aren't resetting, ignore PRs we didn't touch\n                if (current && !(willReset || noBranch)) return;\n\n                testMergeArray.push({\n                    number: number,\n                    targetCommitSha: commit,\n                    comment\n                });\n            });\n            if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n        }\n        const testMergeArray = editOptions.newTestMerges ?? [];\n        this.state.manualPRs.forEach(pr =>\n            testMergeArray.push({\n                number: pr\n            })\n        );\n        if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n\n        this.setState({\n            loading: true\n        });\n        const response = await RepositoryClient.editRepository(\n            this.context.instance.id,\n            editOptions\n        );\n        this.setState({\n            loading: false\n        });\n        if (response.code === StatusCode.OK) {\n            if (response.payload.activeJob) {\n                this.setState({\n                    loading: true\n                });\n                JobsController.fastmode = 5;\n                JobsController.registerCallback(response.payload.activeJob.id, job => {\n                    return this.fetchRepositoryInfo(\n                        job,\n                        job.errorCode === undefined && job.exceptionDetails === undefined\n                    );\n                });\n                JobsController.registerJob(response.payload.activeJob, this.context.instance.id);\n                JobsController.restartLoop();\n                if (this.state.deployAfter) {\n                    const jobId = response.payload.activeJob.id;\n                    const deployinterval = setInterval(() => {\n                        const targetJob = JobsController.jobs.get(jobId);\n                        if (typeof targetJob?.progress === \"number\" || targetJob?.stoppedAt) {\n                            void DreamMakerClient.startCompile(this.context.instance.id).then(\n                                response => {\n                                    if (response.code === StatusCode.ERROR) {\n                                        this.addError(response.error);\n                                    }\n                                }\n                            );\n                            clearInterval(deployinterval);\n                        }\n                    }, 5000);\n                }\n            } else {\n                await this.fetchRepositoryInfo();\n            }\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    private reloadDesiredState(\n        repoinfo: RepositoryResponse | null,\n        reset: boolean,\n        harderReset: boolean,\n        gitHubPRs?: PullRequest[] | null\n    ) {\n        gitHubPRs = gitHubPRs ?? this.state.gitHubPRs;\n        if (reset) {\n            this.setState({\n                resetType: ResetType.None,\n                manualPRs: new Set<number>()\n            });\n        }\n\n        if (!repoinfo) return;\n\n        this.setState(prevState => {\n            const desiredState = prevState.desiredState;\n            const newDesiredState = new Map(!reset ? desiredState : []);\n            let updatingTMs = false;\n            const regularReset = reset && !harderReset;\n            repoinfo.revisionInformation?.activeTestMerges.forEach(pr => {\n                const currentDesiredState = newDesiredState.get(pr.number);\n                if (!reset) {\n                    //We want the PR gone, don't retestmerge it\n                    if (!currentDesiredState) return;\n                    //We want the PR updated to a specific commit, don't mess with it\n                    if (currentDesiredState && !currentDesiredState[0]) return;\n                }\n\n                const gitHubPR = gitHubPRs?.find(\n                    potentialGitHubPR => pr.number === potentialGitHubPR.number\n                );\n\n                const defaultDesiredState = gitHubPR?.state === \"merged\" ? false : true;\n                if (regularReset && !defaultDesiredState) {\n                    newDesiredState.set(pr.number, null);\n                    updatingTMs = true;\n                } else {\n                    const newHead = (regularReset ? gitHubPR?.head : null) ?? pr.targetCommitSha;\n                    if (regularReset && newHead !== pr.targetCommitSha) {\n                        updatingTMs = true;\n                    }\n                    newDesiredState.set(pr.number, [true, newHead, pr.comment ?? \"\"]);\n                }\n            });\n\n            const resetType = updatingTMs\n                ? repoinfo.reference === \"(no branch)\"\n                    ? ResetType.Local\n                    : ResetType.Remote\n                : prevState.resetType;\n            return {\n                resetType,\n                desiredState: newDesiredState\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                {this.renderErrors()}\n                {/*Just like... hope its cloned if you don't have read access*/}\n                {this.state.repositoryInfo && !this.state.repositoryInfo.origin ? (\n                    this.renderPreClone()\n                ) : (\n                    <React.Fragment>\n                        <h3>\n                            <FormattedMessage id=\"view.instance.repo.repoinfo\" />\n                        </h3>\n                        {this.state.repoBusy ? (\n                            <Loading text=\"loading.repo.busy\" />\n                        ) : (\n                            <React.Fragment>\n                                {this.renderRepoInformation()}\n                                <hr />\n                                {this.renderSettings()}\n                                <hr />\n                                <h3>\n                                    <FormattedMessage id=\"view.instance.repo.testmerges\" />\n                                </h3>\n                                {this.renderTestMerges()}\n                                <hr />\n                                {this.renderDelete()}\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n\n    private renderErrors(): React.ReactNode {\n        return (\n            <React.Fragment>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n            </React.Fragment>\n        );\n    }\n\n    private renderRepoInformation(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        if (!repositoryInfo) return <GenericAlert title=\"view.instance.repo.norepoinfo\" />;\n\n        return (\n            <table className=\"mx-auto text-left\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.origin\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.origin}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.owner\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryOwner}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.name\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryName}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n    private renderPreClone(): React.ReactNode {\n        const cloneFields = {\n            origin: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.url\"\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.ref\",\n                defaultValue: \"\"\n            },\n            accessUser: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.gituser\",\n                defaultValue: \"\"\n            },\n            accessToken: {\n                type: FieldType.String as FieldType.Password,\n                name: \"fields.instance.repository.gitpassword\",\n                defaultValue: \"\"\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.enablesubmodules\",\n                defaultValue: true\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.clone\" />\n                </h3>\n                <InputForm\n                    fields={cloneFields}\n                    hideDisabled={\n                        !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)\n                    }\n                    onSave={async result => {\n                        const repoCloneRequest: RepositoryCreateRequest = {\n                            ...result\n                        };\n\n                        if (result.reference == \"\") repoCloneRequest.reference = null;\n                        if (result.accessUser == \"\") repoCloneRequest.accessUser = null;\n                        if (result.accessToken == \"\") repoCloneRequest.accessToken = null;\n\n                        const response = await RepositoryClient.cloneRepository(\n                            this.context.instance.id,\n                            repoCloneRequest\n                        );\n                        if (response.code === StatusCode.OK) {\n                            await this.fetchRepositoryInfo(response.payload.activeJob ?? undefined);\n                            JobsController.restartLoop();\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                    includeAll\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderSettings(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        const editFields = {\n            originCheckoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.origincheckoutsha\",\n                disabled: true,\n                defaultValue: repositoryInfo\n                    ? repositoryInfo.revisionInformation?.originCommitSha\n                    : \"\",\n                tooltip: \"fields.instance.repository.origincheckoutsha.desc\"\n            },\n            checkoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.checkoutsha\",\n                defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.commitSha : \"\",\n                tooltip: \"fields.instance.repository.checkoutsha.desc\",\n                disabled: !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.SetSha)\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.reference\",\n                defaultValue: repositoryInfo ? repositoryInfo.reference : \"\",\n                tooltip: \"fields.instance.repository.reference.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.SetReference\n                )\n            },\n            committerName: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerName\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerName : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            committerEmail: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerEmail\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerEmail : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            accessUser: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.accessUser\",\n                defaultValue: repositoryInfo ? repositoryInfo.accessUser : \"\",\n                tooltip: \"fields.instance.repository.accessUser.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            accessToken: {\n                type: FieldType.Password as FieldType.Password,\n                name: \"fields.instance.repository.accessToken\",\n                tooltip: \"fields.instance.repository.accessToken.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            clearAccessToken: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.clearAccessToken\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            pushTestMergeCommits: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.pushTestMergeCommits\",\n                defaultValue: repositoryInfo ? repositoryInfo.pushTestMergeCommits : false,\n                tooltip: \"fields.instance.repository.pushTestMergeCommits.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            createGitHubDeployments: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.createGitHubDeployments\",\n                defaultValue: repositoryInfo ? repositoryInfo.createGitHubDeployments : false,\n                tooltip: \"fields.instance.repository.createGitHubDeployments.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            showTestMergeCommitters: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.showTestMergeCommitters\",\n                defaultValue: repositoryInfo ? repositoryInfo.showTestMergeCommitters : false,\n                tooltip: \"fields.instance.repository.showTestMergeCommitters.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            autoUpdatesKeepTestMerges: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesKeepTestMerges\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesKeepTestMerges : false,\n                tooltip: \"fields.instance.repository.autoUpdatesKeepTestMerges.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            autoUpdatesSynchronize: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesSynchronize\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesSynchronize : false,\n                tooltip: \"fields.instance.repository.autoUpdatesSynchronize.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            postTestMergeComment: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.postTestMergeComment\",\n                defaultValue: repositoryInfo ? repositoryInfo.postTestMergeComment : false,\n                tooltip: \"fields.instance.repository.postTestMergeComment.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.updateSubmodules\",\n                defaultValue: repositoryInfo ? repositoryInfo.updateSubmodules : false,\n                tooltip: \"fields.instance.repository.updateSubmodules.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeSubmoduleUpdate\n                )\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.reposettings\" />\n                </h3>\n                <InputForm\n                    fields={editFields}\n                    onSave={async _result => {\n                        const { clearAccessToken, ...result } = _result;\n                        if (clearAccessToken) {\n                            result.accessUser = \"\";\n                            result.accessToken = \"\";\n                        }\n\n                        this.setState({ loading: true });\n                        const response = await RepositoryClient.editRepository(\n                            this.context.instance.id,\n                            result\n                        );\n                        this.setState({ loading: false });\n                        if (response.code === StatusCode.OK) {\n                            if (response.payload.activeJob) {\n                                this.setState({ loading: true });\n                                JobsController.fastmode = 5;\n                                JobsController.registerCallback(response.payload.activeJob.id, () =>\n                                    this.fetchRepositoryInfo(undefined, true)\n                                );\n                                JobsController.registerJob(\n                                    response.payload.activeJob,\n                                    this.context.instance.id\n                                );\n                                JobsController.restartLoop();\n                            } else {\n                                await this.fetchRepositoryInfo();\n                            }\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderTestMerges(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n\n        const canDeploy = hasDreamMakerRight(\n            this.context.instancePermissionSet,\n            DreamMakerRights.Compile\n        );\n        const canAdd = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.MergePullRequest\n        );\n        const canUpdate =\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.UpdateBranch);\n\n        const testmergedPRs = new Map<number, TestMerge>();\n        if (repositoryInfo) {\n            repositoryInfo.revisionInformation?.activeTestMerges.forEach(pr =>\n                testmergedPRs.set(pr.number, pr)\n            );\n        }\n        const sortedPRs =\n            this.state.gitHubPRs?.sort((a, b) => {\n                if (testmergedPRs.has(a.number) !== testmergedPRs.has(b.number)) {\n                    return testmergedPRs.has(a.number) ? -1 : 1;\n                }\n                if (a.testmergelabel !== b.testmergelabel) {\n                    return a.testmergelabel ? -1 : 1;\n                }\n                return a.number - b.number;\n            }) ?? [];\n        const filteredPendingActions = sortedPRs\n            .map(pr => {\n                const desiredPRState = this.state.desiredState.get(pr.number);\n                const tmInfo = !repositoryInfo\n                    ? undefined\n                    : repositoryInfo?.revisionInformation?.activeTestMerges.find(\n                          activePR => activePR.number === pr.number\n                      );\n\n                if (desiredPRState) {\n                    if (!tmInfo) {\n                        return [PRState.added, pr];\n                    } else if (tmInfo.targetCommitSha !== desiredPRState[1]) {\n                        return [PRState.updated, pr];\n                    } else if ((tmInfo.comment ?? \"\") !== desiredPRState[2]) {\n                        return [PRState.rename, pr];\n                    } else {\n                        return [PRState.reapply, pr];\n                    }\n                }\n                if (!this.state.desiredState.get(pr.number)) {\n                    if (!tmInfo) return null;\n\n                    return [PRState.removed, pr];\n                }\n                return null;\n            })\n            .filter(value => value !== null) as [PRState, PullRequest][];\n        const sortedPendingActions = filteredPendingActions.sort((a, b) => {\n            const order = [PRState.removed, PRState.reapply, PRState.added, PRState.updated];\n            for (const state of order) {\n                if (\n                    // @ts-expect-error again, ts doesn't want people to use xor on booleans, and I disagree\n                    (a[0] === state) ^\n                    (b[0] === state)\n                ) {\n                    return a[0] === state ? -1 : 1;\n                }\n            }\n            return 0;\n        });\n        const noBranch = !repositoryInfo ? false : repositoryInfo.reference === \"(no branch)\";\n        const forceReset = filteredPendingActions.some(\n            action => action[0] != PRState.added && action[0] != PRState.reapply\n        );\n\n        //PRs we haven't touched, only used to display prs to reapply after reset\n        const noPendingChanges =\n            filteredPendingActions.filter(([state]) => state !== PRState.reapply).length === 0 &&\n            this.state.resetType === ResetType.None &&\n            !this.state.manualPRs.size;\n\n        if (repositoryInfo && repositoryInfo.remoteGitProvider == RemoteGitProvider.Unknown)\n            return <GenericAlert title=\"view.instance.repo.testmerges.badprovider\" />;\n\n        if (this.state.loadingPRs) return <Loading text=\"loading.repo.prs\" />;\n\n        return (\n            <div className=\"mx-5\">\n                <Card className=\"mb-5\">\n                    <Card.Header>\n                        <FormattedMessage id=\"view.instance.repo.pending.title\" />\n                    </Card.Header>\n                    <Card.Body className=\"text-left\">\n                        <ul>\n                            {noPendingChanges ? (\n                                <li className=\"font-weight-lighter font-italic\">\n                                    <FormattedMessage id=\"view.instance.repo.pending.none\" />\n                                </li>\n                            ) : (\n                                <React.Fragment>\n                                    {repositoryInfo && noBranch ? (\n                                        <li>\n                                            <FormattedMessage\n                                                id=\"view.instance.repo.pending.reset.nobranch\"\n                                                values={{\n                                                    commit: repositoryInfo.revisionInformation?.originCommitSha.substring(\n                                                        0,\n                                                        7\n                                                    )\n                                                }}\n                                            />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Remote ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.update\" />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Local ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.reset\" />\n                                        </li>\n                                    ) : null}\n                                    {repositoryInfo &&\n                                    repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub\n                                        ? sortedPendingActions.map(([state, pr]) => {\n                                              const prDesiredState = this.state.desiredState.get(\n                                                  pr.number\n                                              );\n\n                                              if (\n                                                  state === PRState.reapply &&\n                                                  !(\n                                                      this.state.resetType !== ResetType.None ||\n                                                      noBranch\n                                                  )\n                                              )\n                                                  return null;\n\n                                              let targetCommit = prDesiredState\n                                                  ? prDesiredState[1].substring(0, 7)\n                                                  : null;\n\n                                              const gitHubPR = this.state.gitHubPRs?.find(\n                                                  gitHubPR => pr.number === gitHubPR.number\n                                              );\n\n                                              if (\n                                                  !targetCommit ||\n                                                  gitHubPR?.head.startsWith(targetCommit)\n                                              )\n                                                  targetCommit = `HEAD (${(\n                                                      targetCommit ?? gitHubPR!.head\n                                                  ).substring(0, 7)})`;\n\n                                              return (\n                                                  <li key={pr.number}>\n                                                      <FormattedMessage\n                                                          id={`view.instance.repo.pending.${state}`}\n                                                          values={{\n                                                              number: pr.number,\n                                                              commit: targetCommit,\n                                                              title: pr.title\n                                                          }}\n                                                      />\n                                                  </li>\n                                              );\n                                          })\n                                        : null}\n                                    {[...this.state.manualPRs.values()].map(pr => (\n                                        <li key={pr}>\n                                            <FormattedMessage\n                                                id={`view.instance.repo.pending.added.manual`}\n                                                values={{\n                                                    number: pr\n                                                }}\n                                            />\n                                        </li>\n                                    ))}\n                                </React.Fragment>\n                            )}\n                        </ul>\n                        <ButtonGroup size=\"lg\" className=\"mb-2 text-center\">\n                            <Button\n                                disabled={noBranch || !canUpdate}\n                                onClick={() => this.setState({ resetType: ResetType.Remote })}\n                                variant={\n                                    this.state.resetType === ResetType.Remote\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.remote\" />\n                            </Button>\n                            <OverlayTrigger\n                                placement=\"top\"\n                                overlay={props => (\n                                    <Tooltip id=\"repo-local-reset-tip\" {...props}>\n                                        <FormattedMessage id=\"view.instance.repo.update.local.tip\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    onClick={() => this.setState({ resetType: ResetType.Local })}\n                                    variant={\n                                        this.state.resetType === ResetType.Local\n                                            ? \"secondary\"\n                                            : \"primary\"\n                                    }>\n                                    <FormattedMessage id=\"view.instance.repo.update.local\" />\n                                </Button>\n                            </OverlayTrigger>\n                            <Button\n                                disabled={forceReset}\n                                onClick={() => this.setState({ resetType: ResetType.None })}\n                                variant={\n                                    this.state.resetType === ResetType.None\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.none\" />\n                            </Button>\n                        </ButtonGroup>\n                        {(configOptions.manualpr.value as boolean) ||\n                        !repositoryInfo ||\n                        !this.state.gitHubPRs ||\n                        repositoryInfo.remoteGitProvider === RemoteGitProvider.GitLab ? (\n                            <div className=\"d-flex mt-5\">\n                                <InputField\n                                    name=\"view.instance.repo.manual\"\n                                    tooltip=\"view.instance.repo.manual.desc\"\n                                    type={FieldType.Number}\n                                    min={0}\n                                    defaultValue={this.state.lastManualPR}\n                                    onChange={newPR => this.setState({ manualPR: newPR })}\n                                    disabled={!canAdd}\n                                />\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        className=\"nowrap ml-3\"\n                                        disabled={\n                                            this.state.manualPR === this.state.lastManualPR ||\n                                            !canAdd\n                                        }\n                                        onClick={() => {\n                                            this.setState(prevState => {\n                                                return {\n                                                    manualPRs: new Set<number>([\n                                                        ...prevState.manualPRs.values(),\n                                                        this.state.manualPR\n                                                    ]),\n                                                    lastManualPR: this.state.manualPR\n                                                };\n                                            });\n                                        }}>\n                                        <FormattedMessage id=\"view.instance.repo.addmanual\" />\n                                    </Button>\n                                </SimpleToolTip>\n                            </div>\n                        ) : null}\n                        <InputField\n                            name=\"view.instance.repo.deployAfter\"\n                            tooltip=\"view.instance.repo.deployAfter.desc\"\n                            type={FieldType.Boolean}\n                            defaultValue={!canDeploy ? false : this.state.deployAfter}\n                            disabled={!canDeploy}\n                            onChange={newVal => this.setState({ deployAfter: newVal })}\n                        />\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button\n                            variant=\"danger\"\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => this.reloadDesiredState(repositoryInfo, true, true)}>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => void this.applyTestmerges(noBranch)}>\n                            <FormattedMessage id=\"generic.commit\" />\n                        </Button>\n                    </Card.Footer>\n                </Card>\n                {!repositoryInfo ? (\n                    <GenericAlert title=\"view.instance.repo.noautomerge\" />\n                ) : repositoryInfo &&\n                  repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub ? (\n                    <Table variant=\"dark\" striped hover className=\"text-left\">\n                        <tbody>\n                            {sortedPRs.map(pr => (\n                                <TestMergeRow\n                                    key={pr.number}\n                                    testmergeinfo={testmergedPRs.get(pr.number)}\n                                    pr={pr}\n                                    repoInfo={repositoryInfo}\n                                    finalState={\n                                        this.state.desiredState.get(pr.number)\n                                            ? ((this.state.desiredState.get(pr.number) as [\n                                                  boolean,\n                                                  string,\n                                                  string\n                                              ]).slice(1) as [string, string])\n                                            : false\n                                    }\n                                    onRemove={() =>\n                                        this.setState(prevState => {\n                                            return {\n                                                resetType:\n                                                    prevState.resetType === ResetType.None\n                                                        ? ResetType.Remote\n                                                        : prevState.resetType,\n                                                desiredState: new Map(prevState.desiredState).set(\n                                                    pr.number,\n                                                    null\n                                                )\n                                            };\n                                        })\n                                    }\n                                    onSelectCommit={(commit, comment) =>\n                                        this.setState(prevState => {\n                                            return {\n                                                desiredState: new Map(\n                                                    prevState.desiredState\n                                                ).set(pr.number, [false, commit, comment])\n                                            };\n                                        })\n                                    }\n                                    onError={error => this.addError(error)}\n                                />\n                            ))}\n                        </tbody>\n                    </Table>\n                ) : null}\n            </div>\n        );\n    }\n\n    private renderDelete(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                </h4>\n                <span>\n                    <FormattedMessage id=\"view.instance.repo.delete.desc\" />\n                </span>\n                <br />\n                <Button\n                    variant=\"danger\"\n                    className=\"mt-2\"\n                    onClick={() =>\n                        this.setState({\n                            showDeleteModal: true\n                        })\n                    }>\n                    <FormattedMessage id=\"view.instance.repo.delete\" />\n                </Button>\n                <Modal\n                    show={this.state.showDeleteModal}\n                    onHide={() =>\n                        this.setState({\n                            showDeleteModal: false\n                        })\n                    }\n                    centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>\n                            <FormattedMessage id=\"generic.areyousure\" />\n                        </span>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() =>\n                                this.setState({\n                                    showDeleteModal: false\n                                })\n                            }>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={async () => {\n                                this.setState({\n                                    showDeleteModal: false,\n                                    loading: true\n                                });\n                                const response = await RepositoryClient.deleteRepository(\n                                    this.context.instance.id\n                                );\n                                this.setState({\n                                    loading: false\n                                });\n                                if (response.code === StatusCode.OK) {\n                                    if (response.payload.activeJob) {\n                                        this.setState({\n                                            loading: true\n                                        });\n                                        JobsController.fastmode = 5;\n                                        JobsController.registerCallback(\n                                            response.payload.activeJob.id,\n                                            job => {\n                                                return this.fetchRepositoryInfo(\n                                                    job,\n                                                    job.errorCode === undefined &&\n                                                        job.exceptionDetails === undefined\n                                                );\n                                            }\n                                        );\n                                        JobsController.registerJob(\n                                            response.payload.activeJob,\n                                            this.context.instance.id\n                                        );\n                                        JobsController.restartLoop();\n                                    } else {\n                                        await this.fetchRepositoryInfo();\n                                    }\n                                } else {\n                                    this.addError(response.error);\n                                }\n                            }}>\n                            <FormattedMessage id=\"view.instance.repo.delete\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nRepository.contextType = InstanceEditContext;\nexport default Repository;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport SelectSearch, { fuzzySearch, SelectedOptionValue } from \"react-select-search\";\n\nimport {\n    RepositoryResponse,\n    RepositoryRights,\n    TestMerge\n} from \"../../ApiClient/generatedcode/generated\";\nimport InternalError from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport GithubClient, { Commit, PullRequest } from \"../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../utils/misc\";\nimport InputField, { FieldType } from \"./InputField\";\nimport Loading from \"./Loading\";\nimport SimpleToolTip from \"./SimpleTooltip\";\n\ninterface IProps {\n    pr: PullRequest;\n    testmergeinfo?: TestMerge;\n    repoInfo: RepositoryResponse;\n    finalState: [commit: string, comment: string] | false;\n    onRemove: () => unknown;\n    onSelectCommit: (commit: string, comment: string | null) => unknown;\n    onError: (error: InternalError) => unknown;\n}\n\nexport default function TestMergeRow({\n    pr,\n    testmergeinfo,\n    repoInfo,\n    finalState,\n    onRemove,\n    onSelectCommit,\n    onError\n}: IProps): JSX.Element {\n    const [showDetails, _setShowDetails] = useState(false);\n    const setShowDetails = (_newVal: ((prevState: boolean) => boolean) | boolean) => {\n        _setShowDetails(prevState => {\n            let newVal;\n            if (typeof _newVal === \"boolean\") {\n                newVal = _newVal;\n            } else {\n                newVal = _newVal(prevState);\n            }\n            if (newVal) void loadCommits();\n            return newVal;\n        });\n    };\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCommit, setSelectedCommit] = useState<string>(pr.head);\n    const [comment, setComment] = useState(finalState ? finalState[1] : \"\");\n    const [commits, setCommits] = useState<Map<string, Commit> | null>(null);\n    const [extraCommit, setExtraCommit] = useState<Commit | null>(null);\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const loadCommits = useCallback(\n        async (force?: boolean) => {\n            if (commits && !force) return;\n\n            const response = await GithubClient.getPRCommits({\n                //Repo info should be set if we are here\n                owner: repoInfo.remoteRepositoryOwner!,\n                repo: repoInfo.remoteRepositoryName!,\n                pr: pr,\n                wantedCommit: testmergeinfo?.targetCommitSha\n            });\n            if (response.code === StatusCode.ERROR) {\n                onError(response.error);\n            } else {\n                const commitMap = new Map();\n                response.payload[0].forEach(commit => commitMap.set(commit.sha, commit));\n                setCommits(commitMap);\n                setExtraCommit(response.payload[1] ?? null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            repoInfo.remoteRepositoryOwner,\n            repoInfo.remoteRepositoryName,\n            pr.head,\n            testmergeinfo?.targetCommitSha\n        ]\n    );\n    useEffect(() => (showDetails ? void loadCommits() : void 0), [showDetails, loadCommits]);\n    useEffect(() => (showModal ? void loadCommits() : void 0), [showModal, loadCommits]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setShowDetails(false), [finalState]);\n    useEffect(() => setComment(finalState ? finalState[1] : \"\"), [finalState]);\n\n    const colorMap: Record<typeof pr.state, string> = {\n        closed: \"#c93c37\",\n        merged: \"#8256d0\",\n        open: \"#347d39\"\n    };\n    let activeCommit: Commit | undefined = undefined;\n    if (testmergeinfo) {\n        if (commits?.has(testmergeinfo.targetCommitSha)) {\n            activeCommit = commits?.get(testmergeinfo.targetCommitSha);\n        } else if (extraCommit?.sha === testmergeinfo.targetCommitSha) {\n            activeCommit = extraCommit;\n        }\n    }\n    const commitOptions = [...(commits ?? []).values()].map(commit => ({\n        name: commit.name,\n        value: commit.sha,\n        current: commit.sha === testmergeinfo?.targetCommitSha,\n        latest: commit.sha === pr.head,\n        disabled: false\n    }));\n    if (extraCommit) {\n        commitOptions.push({\n            name: \"...\",\n            value: \"\",\n            current: false,\n            latest: false,\n            disabled: true\n        });\n        commitOptions.push({\n            name: extraCommit.name,\n            value: extraCommit.sha,\n            current: extraCommit.sha === testmergeinfo?.targetCommitSha,\n            latest: extraCommit.sha === pr.head,\n            disabled: false\n        });\n    }\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canReset =\n        (hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.UpdateBranch\n            )) ||\n        //Allow updating and removing pending PRs\n        !testmergeinfo;\n\n    return (\n        <>\n            <tr>\n                <td className={\"text-right\" + (finalState ? \" font-weight-bold\" : \"\")}>\n                    #{pr.number}\n                </td>\n                <td>\n                    <Badge\n                        pill\n                        className=\"text-white text-capitalize mr-2\"\n                        style={{ backgroundColor: colorMap[pr.state] }}>\n                        {pr.state}\n                    </Badge>\n                    {pr.testmergelabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"primary\">\n                            <FormattedMessage id=\"view.instance.repo.testmergelabel\" />\n                        </Badge>\n                    ) : null}\n                </td>\n                <td>\n                    <a href={pr.link} target=\"_blank\" rel=\"noreferrer\">\n                        {pr.title}\n                    </a>\n                </td>\n                <td className=\"font-italic\">{pr.author}</td>\n\n                <td>\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-inline-block text-nowrap\">\n                            {finalState ? (\n                                <>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canReset ? false : undefined}>\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"mx-1\"\n                                            onClick={onRemove}\n                                            disabled={!canReset}>\n                                            <FontAwesomeIcon icon=\"minus\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canAdd && canReset ? false : undefined}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={e =>\n                                                e.shiftKey\n                                                    ? onSelectCommit(\n                                                          pr.head,\n                                                          testmergeinfo?.comment ?? null\n                                                      )\n                                                    : setShowModal(true)\n                                            }\n                                            variant={finalState[0] === pr.head ? \"primary\" : \"info\"}\n                                            //To update, you have to reset and reapply the TM so you need both\n                                            disabled={!canAdd || !canReset}>\n                                            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    {testmergeinfo ? (\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => setShowDetails(val => !val)}\n                                            active={showDetails}>\n                                            <FontAwesomeIcon icon=\"info\" fixedWidth />\n                                        </Button>\n                                    ) : null}\n                                </>\n                            ) : (\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        variant=\"success\"\n                                        className=\"mx-1\"\n                                        disabled={!canAdd}\n                                        onClick={e =>\n                                            e.shiftKey\n                                                ? onSelectCommit(pr.head, null)\n                                                : setShowModal(true)\n                                        }>\n                                        <FontAwesomeIcon icon=\"plus\" fixedWidth />\n                                    </Button>\n                                </SimpleToolTip>\n                            )}\n                        </div>\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td className=\"py-0 border-top-0\" />\n                <td colSpan={4} className=\"py-0 border-top-0\">\n                    {testmergeinfo ? (\n                        <Collapse in={showDetails}>\n                            <div>\n                                <div className=\"py-3\">\n                                    <table className=\"reset-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.by\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.mergedBy.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.comment\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.comment}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.commit\" />\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    {activeCommit ? (\n                                                        <>\n                                                            {activeCommit.name}\n                                                            <a\n                                                                className=\"ml-1\"\n                                                                href={activeCommit.url}\n                                                                target=\"_blank\"\n                                                                rel=\"noreferrer\">\n                                                                (\n                                                                {testmergeinfo.targetCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )}\n                                                                )\n                                                            </a>\n                                                        </>\n                                                    ) : (\n                                                        testmergeinfo.targetCommitSha.substring(\n                                                            0,\n                                                            7\n                                                        )\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </Collapse>\n                    ) : null}\n                </td>\n            </tr>\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.title\" />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>\n                        <a\n                            href={pr.link}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            className=\"text-decoration-none\">\n                            {pr.title}\n                        </a>\n                    </h5>\n                    <FormattedMessage id=\"view.instance.repo.tm.modal.label\" />\n                    {commits ? (\n                        <SelectSearch\n                            filterOptions={fuzzySearch}\n                            search\n                            options={commitOptions}\n                            value={selectedCommit ?? activeCommit?.sha}\n                            autoComplete=\"on\"\n                            //@ts-expect-error error in the library, it's the wrong type\n                            renderOption={(\n                                props,\n                                option: SelectedOptionValue & { current: boolean; latest: boolean },\n                                snapshot,\n                                className\n                            ) => (\n                                //@ts-expect-error error in the library, it's the wrong type\n                                <button\n                                    type=\"button\"\n                                    className={\n                                        className + (option.disabled ? \" font-weight-bold\" : \"\")\n                                    }\n                                    {...props}>\n                                    <Badge>{(option.value as string).substring(0, 7)}</Badge>\n                                    {option.current ? (\n                                        <Badge variant=\"primary\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.testmerged\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.latest ? (\n                                        <Badge variant=\"success\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.latest\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.name}\n                                </button>\n                            )}\n                            onChange={value => setSelectedCommit((value as unknown) as string)}\n                        />\n                    ) : (\n                        <Loading text=\"loading.repo.commits\" width={5} widthUnit=\"rem\" />\n                    )}\n                    <InputField\n                        name=\"view.instance.repo.tm.modal.comment\"\n                        type={FieldType.String}\n                        onChange={newComment => setComment(newComment)}\n                        defaultValue={testmergeinfo?.comment ?? \"\"}\n                    />\n                    <span className=\"text-muted font-italic mt-4 d-inline-block\">\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.tip\" />\n                    </span>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={() => setShowModal(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            if (selectedCommit) onSelectCommit(selectedCommit, comment);\n                            setShowModal(false);\n                        }}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\" && match[1][0] !== \"5\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n})();\nexport default e;\n"],"names":["SimpleToolTip","props","show","overlay","id","tooltipid","children","PRState","ResetType","TestMergeRow","pr","testmergeinfo","repoInfo","finalState","onRemove","onSelectCommit","onError","showDetails","_setShowDetails","useState","setShowDetails","_newVal","prevState","newVal","loadCommits","showModal","setShowModal","selectedCommit","setSelectedCommit","head","comment","setComment","commits","setCommits","extraCommit","setExtraCommit","instanceEditContext","useContext","InstanceEditContext","useCallback","async","force","response","GithubClient","owner","remoteRepositoryOwner","repo","remoteRepositoryName","wantedCommit","targetCommitSha","code","StatusCode","error","commitMap","Map","payload","forEach","commit","set","sha","useEffect","activeCommit","has","get","commitOptions","values","map","name","value","current","latest","disabled","push","canAdd","hasRepoRight","instancePermissionSet","RepositoryRights","canReset","className","number","Badge","pill","style","backgroundColor","closed","merged","open","state","testmergelabel","variant","href","link","target","rel","title","author","undefined","Button","onClick","icon","fixedWidth","e","shiftKey","val","active","colSpan","Collapse","in","mergedBy","url","substring","Modal","onHide","centered","size","closeButton","SelectSearch","filterOptions","fuzzySearch","search","options","autoComplete","renderOption","option","snapshot","type","onChange","Loading","text","width","widthUnit","InputField","FieldType","newComment","defaultValue","Repository","React","constructor","super","this","errors","repositoryInfo","loading","cloning","unableToHookClone","gitHubPRs","manualPRs","Set","resetType","Remote","desiredState","showDeleteModal","manualPR","lastManualPR","deployAfter","repoBusy","loadingPRs","fetchRepositoryInfo","bind","addError","setState","Array","from","hasDreamMakerRight","context","DreamMakerRights","cloneJob","resetDesiredState","reloadDesiredState","RepositoryClient","instance","ErrorCode","originalErrorMessage","errorCode","TGSErrorCode","JobsController","response2","JobsClient","page","pageSize","content","sort","a","b","find","job","description","includes","reloadPRs","remoteGitProvider","RemoteGitProvider","wantedPRs","revisionInformation","activeTestMerges","tm","then","prs","catch","InternalError","jsError","noBranch","editOptions","willReset","None","Local","checkoutSha","originCommitSha","updateFromOrigin","reference","testMergeArray","entries","prDesiredState","length","newTestMerges","activeJob","exceptionDetails","jobId","deployinterval","setInterval","targetJob","progress","stoppedAt","DreamMakerClient","clearInterval","repoinfo","reset","harderReset","newDesiredState","updatingTMs","regularReset","currentDesiredState","gitHubPR","potentialGitHubPR","newHead","render","obj","renderErrors","origin","renderPreClone","renderRepoInformation","renderSettings","renderTestMerges","renderDelete","err","index","ErrorAlert","key","onClose","prev","newarr","GenericAlert","cloneFields","accessUser","accessToken","updateSubmodules","InputForm","fields","hideDisabled","onSave","repoCloneRequest","result","includeAll","editFields","originCheckoutSha","tooltip","commitSha","committerName","committerEmail","clearAccessToken","pushTestMergeCommits","createGitHubDeployments","showTestMergeCommitters","autoUpdatesKeepTestMerges","autoUpdatesSynchronize","postTestMergeComment","_result","canDeploy","canUpdate","testmergedPRs","sortedPRs","filteredPendingActions","desiredPRState","tmInfo","activePR","updated","rename","reapply","added","removed","filter","sortedPendingActions","order","forceReset","some","action","noPendingChanges","Card","targetCommit","startsWith","ButtonGroup","OverlayTrigger","placement","Tooltip","configOptions","min","newPR","applyTestmerges","Table","striped","hover","slice","contextType","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","Object","assign","TypedEmitter","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","console","warn","method","retryCount","log","onAbuseLimit","all","oldversions","paginate","repos","listReleases","done","data","reduce","release","match","exec","version","old","body","InternalStatus","transformPR","user","login","merged_at","html_url","tail","base","labels","label","toLowerCase","pulls","list","wantedPR","pull_number","listCommits","per_page","message","split","reverse","_extraCommit","getCommit","ref"],"sourceRoot":""}