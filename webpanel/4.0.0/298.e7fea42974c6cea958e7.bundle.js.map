{"version":3,"file":"298.e7fea42974c6cea958e7.bundle.js","mappings":"8gBAcO,IAAKA,G,SAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,SAAAA,EAAAA,OAAAA,SAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA,KAqDZ,MAAMC,EAAgBC,EAAAA,YAAiD,SACnEC,EACAC,GAEA,OACI,gBAAC,YAAD,CACIC,MAAOF,EAAME,MACbC,SAAUC,GAAKJ,EAAMG,SAASC,EAAEC,OAAOH,OACvCI,SAAUN,EAAMM,SAChBL,IAAKA,OAKXM,EAAkBR,EAAAA,YAAiD,SACrEC,EACAC,GAEA,OACI,gBAAC,YAAD,CACIC,MAAOF,EAAME,MACbC,SAAUC,GAAKJ,EAAMG,SAASC,EAAEC,OAAOH,OACvCI,SAAUN,EAAMM,SAChBE,KAAK,WACLP,IAAKA,OAKXQ,EAAiBV,EAAAA,YAAiD,SACpEC,EACAC,GAEA,MAAMS,EAAQC,KAAKC,SAASC,WAC5B,OACI,yBACIC,QAASJ,EACTK,UAAU,sEACV,gBAAC,UAAD,CACIC,GAAIN,EACJO,QAASjB,EAAME,MACfC,SAAUC,GAAKJ,EAAMG,SAASC,EAAEC,OAAOY,SACvCT,KAAK,SACLO,UAAU,SACVT,SAAUN,EAAMM,SAChBL,IAAKA,QAUfiB,EAAgBnB,EAAAA,YAAuD,SACzEC,EACAC,GAEA,OACI,gBAAC,YAAD,CACIC,MAAOF,EAAME,MACbC,SAAWC,GACPJ,EAAMG,SACFgB,MAAMf,EAAEC,OAAOe,eAAiBhB,EAAEC,OAAOH,MAAQE,EAAEC,OAAOe,eAGlEd,SAAUN,EAAMM,SAChBe,IAAKrB,EAAMqB,IACXC,IAAKtB,EAAMsB,IACXd,KAAK,SACLP,IAAKA,OAQXsB,EAAcxB,EAAAA,YAAsD,SACtEC,EACAC,GAEA,OACI,gBAAC,YAAD,CACIC,MAAOF,EAAME,MACbC,SAAUC,GAAKJ,EAAMG,SAASqB,SAASpB,EAAEC,OAAOH,QAChDI,SAAUN,EAAMM,SAChBmB,GAAG,SACHC,QAAM,EACNzB,IAAKA,GACJ0B,OAAOC,QAAQ5B,EAAM6B,MAEjBC,QAAO,EAAEC,KAASZ,MAAMK,SAASO,MACjCC,KAAI,EAAED,EAAK7B,KAEJ,gBAAC,IAAD,CAAkBc,GAAK,GAAEhB,EAAMiC,QAAQF,IAAOA,IAAKA,IAC9CG,GACG,0BAAQH,IAAK7B,EAAOA,MAAOA,GACtBgC,WAUxBC,EAAoD,CAC7D,CAACtC,EAAUuC,MAAO,EAClB,CAACvC,EAAUwC,QAAS,EACpB,CAACxC,EAAUyC,UAAU,EACrB,CAACzC,EAAU0C,QAAS,GACpB,CAAC1C,EAAU2C,UAAW,IAGX,SAASC,EAAWzC,GAC/B,MAAO0C,EAAcC,IAAmBC,EAAAA,EAAAA,UACpC5C,EAAM6C,cAAgBV,EAAcnC,EAAMQ,OAExCsC,GAAaC,EAAAA,EAAAA,QAAyB,OAC5CC,EAAAA,EAAAA,YAAU,KACNL,EAAgB3C,EAAM6C,cAAgBV,EAAcnC,EAAMQ,SAE3D,CAACR,EAAM6C,gBAEVG,EAAAA,EAAAA,YAAU,KASN,OARIF,EAAWG,UACPH,EAAWG,QAAQC,gBACnBJ,EAAWG,QAAQE,UAAUC,OAAO,cAEpCN,EAAWG,QAAQE,UAAUE,IAAI,eAIjCrD,EAAMQ,MACV,KAAKX,EAAUyC,QAMf,KAAKzC,EAAUuC,KACf,KAAKvC,EAAUwC,OAGf,KAAKxC,EAAU0C,OACf,KAAK1C,EAAU2C,SAEX,YADAxC,EAAMG,SAASuC,EAAwBI,EAAWG,SAASC,kBAAmB,MAIvF,CAACR,IAEJ,MAUMY,EAIF,CACAC,OAAQzD,EACR0D,SAAUjD,EACVkD,QAAShD,EACT,CAACZ,EAAUwC,aAASqB,EACpB,CAAC7D,EAAUuC,WAAOsB,GAGhBC,EAAUjB,IAAiB1C,EAAM6C,cAAgBV,EAAcnC,EAAMQ,OAE3E,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACIoD,SA3BKC,EA2BY7D,EAAM8D,QA1B1BD,EAGD,gBAAC,IAAD,CAAS7C,GAAI6C,GACT,gBAAC,IAAD,CAAkB7C,GAAI6C,KAJT,gBAAC,WAAD,OA2BbE,OAAM/D,EAAM8D,cAAUJ,IACrB,EAAGzD,IAAAA,KAAQ+D,KACR,gBAAC,YAAD,CAAoBjD,UAAU,gBAC1B,gBAAC,SAAD,GAAiBA,UAAU,eAAkBiD,GACzC,wBAAMjD,UAAW4C,EAAU,mBAAqB,IAC5C,gBAAC,IAAD,CAAkB3C,GAAIhB,EAAMiC,QAEhC,uBAAKlB,UAAU,WACVf,EAAMM,SAAW,gBAAC,IAAD,CAAkBU,GAAG,qBAAwB,KAC/D,uBACIf,IAAKA,EACLc,UAAU,sBACVkD,MAAO,CAAEC,WAAYlE,EAAM8D,QAAU,QAAU,WAC/C,gBAAC,IAAD,CAAiBK,KAAK,eAO7CnE,EAAMQ,OAASX,EAAUwC,OACtB,gBAACnB,EAAD,CACIhB,MAAOwC,EACPvC,SAAUiE,GAAYzB,EAAgByB,GACtCnC,KAAMjC,EAAMiC,KACZ3B,SAAUN,EAAMM,SAChBgB,IAAKtB,EAAMsB,IACXD,IAAKrB,EAAMqB,IACXpB,IAAK6C,IAET9C,EAAMQ,OAASX,EAAUuC,KACzB,gBAACb,EAAD,CACIrB,MAAOwC,EACPvC,SAAUiE,GAAYzB,EAAgByB,GACtCnC,KAAMjC,EAAMiC,KACZJ,KAAM7B,EAAM6B,KACZvB,SAAUN,EAAMM,WAGpBP,EAAAA,cACIuD,EAActD,EAAMQ,MACpB,CACIN,MAAOwC,EACPvC,SAAUiE,GAAYzB,EAAgByB,GACtC9D,SAAUN,EAAMM,SAChB2B,KAAMjC,EAAMQ,KACZP,IAAK6C,IAKjB,gBAAC,WAAD,KACI,gBAAC,IAAD,CACImB,MAAO,CAAEC,YAAaP,GAAW3D,EAAMM,SAAW,cAAWoD,GAC7DW,QAAQ,SACRC,QAAS,IACL3B,EAAgB3C,EAAM6C,cAAgBV,EAAcnC,EAAMQ,QAE9D,gBAAC,IAAD,CAAiB2D,KAAK,YAtFrBN,IAAAA,I,qUChLN,SAASU,EACpBvE,GAEA,MAAMwE,EAAmB,IAAIC,IAIvBC,EAAgB,IAAID,KACnBE,EAAaC,IAAkBhC,EAAAA,EAAAA,UAAiD,KAEvFI,EAAAA,EAAAA,YAAU,KACNrB,OAAOkD,KAAK7E,EAAM8E,QAAQC,SAAQ/D,IAC9B4D,GAAeI,IAAa,IACrBA,EACH,CAAChE,GAAK,YAKf,IAEH,IAAK,MAAOA,EAAIiE,KAAUtD,OAAOC,QAAQ5B,EAAM8E,QAC3CJ,EAAcQ,IAAIlE,EAAIiE,GACtBT,EAAiBU,IACbD,GAGArC,EAAAA,EAAAA,UAA0BqC,EAAMpC,cAAgBV,EAAAA,GAAc8C,EAAMzE,QAI5E,IAAI2E,GAAU,EACVC,GAAa,EACjB,IAAK,MAAOpE,EAAIqE,KAAoBX,EAAe,CAC/C,MAAOY,GAAcd,EAAiBe,IAAIF,GACpCG,EAAab,EAAY3D,GAK/B,IAJKqE,EAAgBxC,cAAgBV,EAAAA,GAAckD,EAAgB7E,QAAU8E,IACzEH,GAAU,GACVK,GAAYC,UAASL,GAAa,GAElCD,GAAWC,EAAY,MAwB/B,OAAIpF,EAAM0F,eACD/D,OAAOgE,OAAO3F,EAAM8E,QAAQc,MAAKX,IAAUA,EAAM3E,WAC3C,iCAKX,2BACKqB,OAAOC,QAAQ5B,EAAM8E,QAAQ9C,KAAI,EAAEhB,EAAIiE,MACpC,MAAM,SAAE3E,KAAauF,GAAeZ,EACpC,OAAIjF,EAAM0F,cAAgBpF,EAAiB,KAGvC,gBAAC,KAAD,GACIyB,IAAKf,GACD6E,EAFR,CAGIvF,SAAUN,EAAM8F,UAAYxF,EAC5BH,SAAU,CAAC4F,EAAyBC,KAChCxB,EAAiBe,IAAIN,GAAQ,GAAGc,GAChCnB,GAAeI,IAAa,IACrBA,EACH,CAAChE,GAAK,IACCgE,EAAUhE,GACbyE,SAAUO,cAOlC,uBAAKjF,UAAU,oBACX,gBAAC,IAAD,CACI6C,QACI,gBAAC,IAAD,CAAS5C,GAAK,gBACV,gBAAC,IAAD,CAAkBA,GAAG,0BAG7B+C,OAAMqB,QAAa1B,GACnB,gBAAC,IAAD,CACIW,QAASrE,EAAM8F,UAAYV,EAAa,SAAW,UACnD9E,SAAUN,EAAM8F,WAAaX,GAAWC,EACxCd,QA9DP,KACT,MAAM2B,EAAgD,GAEtD,IAAK,MAAOjF,EAAIqE,KAAoBX,EAAe,CAC/C,MAAOY,GAAcd,EAAiBe,IAAIF,IAGrCA,EAAgBa,eACjBZ,IACKD,EAAgBxC,cAAgBV,EAAAA,GAAckD,EAAgB7E,QAClER,EAAMmG,cAIXF,EAAajF,GAAMsE,GAGvBtF,EAAMoG,OAAOH,KA8CG,gBAAC,IAAD,CAAkBjF,GAAG,uB,gGCnJ9B,SAASqF,EAAWrG,GAC/B,OACI,gBAAC,IAAD,CACIsG,IAAKtG,EAAMuG,IACXtE,KAAM,OACNuE,MAAM,OACNC,UAAU,WACVC,WAAS,EACTC,kBAAkB,IAKvB,SAASC,EAAgB5G,GAC5B,OAAK6G,EAAAA,GAAAA,SAAAA,MAID,uBAAK9F,UAAU,aACX,gBAACsF,EAAD,CAAYE,IAAKvG,EAAMuG,OAJpB,mC,iGCTA,SAASO,EAAc9G,GAClC,OACI,gBAAC,IAAD,CACI+D,KAAM/D,EAAM+D,KACZH,QACI,gBAAC,IAAD,CAAS5C,GAAIhB,EAAM+G,WACf,gBAAC,IAAD,CAAkB/F,GAAIhB,EAAM+G,cAGnC/G,EAAMgH,Y,wOCIZ,SAASC,IACZ,MAAMC,GAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,GACjCC,GAAazE,EAAAA,EAAAA,UAAsD,KAClE0E,EAAWC,IAAgB3E,EAAAA,EAAAA,WAAS,IACpC4E,EAAYC,IAAiB7E,EAAAA,EAAAA,UAAoC,MAElE8E,GAAUC,EAAAA,EAAAA,IACZT,EAAoBU,sBACpBC,EAAAA,GAAAA,MAEEC,GAAaH,EAAAA,EAAAA,IACfT,EAAoBU,sBACpBC,EAAAA,GAAAA,SAGJE,eAAeC,IACX,IAAKN,EAAS,OAAOH,GAAa,GAElCA,GAAa,GACb,MAAMU,QAAiBC,EAAAA,EAAAA,cAA+BhB,EAAoBiB,SAASnH,IACnFuG,GAAa,GAETU,EAASG,OAASC,EAAAA,EAAAA,GAClBZ,EAAcQ,EAASK,UAEvBC,EAAAA,EAAAA,IAASlB,EAAYY,EAASO,OAStC,IAAIC,GALJzF,EAAAA,EAAAA,YAAU,KACDgF,MAEN,CAACd,EAAoBiB,SAASnH,KAGjC,MAAM0H,EAAkB,mEAAmEC,KACvFnB,GAAYiB,SAAW,IAE3B,GAAIC,EAAiB,CACjB,MAAME,EAAaF,EAAgBG,OACnCJ,EACyE,IAAnC,GAAjCjH,SAASoH,EAAWE,MAAQ,GAAUtH,SAASoH,EAAWG,QAC3DvH,SAASoH,EAAWI,SACpBxH,SAASoH,EAAWK,SAAW,GAGvC,MAAMnE,EAAS,CACXoE,YAAa,CACT1I,KAAMX,EAAAA,GAAAA,OACNoC,KAAM,qCACN6B,QAAS,0CACTjB,aAAc2E,GAAY0B,YAC1B5I,WAAWqH,EAAAA,EAAAA,IACPT,EAAoBU,sBACpBC,EAAAA,GAAAA,SAGRY,QAAS,CACLjI,KAAMX,EAAAA,GAAAA,OACNoC,KAAM,iCACN6B,QAAS,sCACTjB,aAAc4F,EACdnI,WAAWqH,EAAAA,EAAAA,IACPT,EAAoBU,sBACpBC,EAAAA,GAAAA,aAGRsB,kBAAmB,CACf3I,KAAMX,EAAAA,GAAAA,OACNwB,IAAK,EACLC,IAAK,MACLW,KAAM,iCACN6B,QAAS,sCACTjB,aAAc2E,GAAY2B,kBAC1B7I,WAAWqH,EAAAA,EAAAA,IACPT,EAAoBU,sBACpBC,EAAAA,GAAAA,uBAGRuB,2BAA4B,CACxB5I,KAAMX,EAAAA,GAAAA,KACNgC,KAAMwH,EAAAA,GACNpH,KAAM,kCACN6B,QAAS,uCACTjB,aAAc2E,GAAY4B,2BAC1B9I,WAAWqH,EAAAA,EAAAA,IACPT,EAAoBU,sBACpBC,EAAAA,GAAAA,mBAGRyB,uBAAwB,CACpB9I,KAAMX,EAAAA,GAAAA,QACNoC,KAAM,qCACN6B,QAAS,0CACTjB,aAAc2E,GAAY8B,uBAC1BhJ,WAAWqH,EAAAA,EAAAA,IACPT,EAAoBU,sBACpBC,EAAAA,GAAAA,+BAKZ,OACI,uBAAK9G,UAAU,eACX,gBAAC,IAAD,CAAiBwF,IAAK,CAAEiB,WAAAA,KACxB,0BACI,gBAAC,IAAD,CAAkBxG,GAAG,gCAEvB0G,EAA+D,KAArD,gBAAC,IAAD,CAAc6B,MAAM,+BAC/BC,EAAAA,EAAAA,IAAcnC,GACdC,EACG,gBAAC,IAAD,MAEA,gCACI,gBAAC,IAAD,CACI5B,cAAegC,EACf5C,OAAQA,EACRsB,OAAQ2B,MAAAA,IACJ,IAAI0B,EACJ,GAAIC,EAAQjB,QAAS,CACjB,MAAMK,EAAOnI,KAAKgJ,MAAMD,EAAQjB,QAAR,MACxBiB,EAAQjB,SAAkB,KAAPK,EACnB,MAAMC,EAAQpI,KAAKgJ,MAAMD,EAAQjB,QAAU,IAC3CiB,EAAQjB,SAAmB,GAARM,EACnB,MAAMC,EAAUrI,KAAKgJ,MAAMD,EAAQjB,SACnCiB,EAAQjB,SAAWO,EACnB,MAAMC,EAAUtI,KAAKgJ,MAAwB,GAAlBD,EAAQjB,SAE/BgB,EADAX,EACc,GAAEA,KAAQC,KAASC,KAAWC,IAE9B,GAAEF,KAASC,KAAWC,IAI5C,MAAMW,EAAS,IACRF,EACHjB,QAASgB,GAGblC,GAAa,GACb,MAAMU,QAAiBC,EAAAA,EAAAA,iBACnBhB,EAAoBiB,SAASnH,GAC7B4I,GAEA3B,EAASG,OAASC,EAAAA,EAAAA,OAClBE,EAAAA,EAAAA,IAASlB,EAAYY,EAASO,aAExBR,IAEVT,GAAa,MAGrB,2BACA,gBAAC,IAAD,CACIR,UAAU,kBACVhD,MAAM+D,QAAqBpE,GAC3B,gBAAC,IAAD,CACIpD,UAAWwH,EACXxD,QAASyD,UACL,MAAME,QAAiBC,EAAAA,EAAAA,aACnBhB,EAAoBiB,SAASnH,IAE7BiH,EAASG,OAASC,EAAAA,EAAAA,OAClBE,EAAAA,EAAAA,IAASlB,EAAYY,EAASO,QAE9BqB,EAAAA,EAAAA,YACI5B,EAASK,QACTpB,EAAoBiB,SAASnH,IAEjC6I,EAAAA,EAAAA,SAA0B,KAGlC,gBAAC,IAAD,CAAkB7I,GAAG,sC,qDCrK1C,MAAMoG,E,QAAsBrH,mBAC9B2D,I,8FC9BDoG,EAAY,CAAC,WAAY,OAAQ,gBAAiB,YAAa,MAK/DC,GAAmB,OAAmB,sBACtCC,GAAoB,OAAmB,uBACvCC,GAAiB,OAAmB,mBAAoB,CAC1DC,UAAW,SAuBTC,EAA0B,cAAiB,SAAUC,EAAMnK,GAC7D,IAAIoK,EAAWD,EAAKC,SAChBC,EAAOF,EAAKE,KACZC,EAAgBH,EAAKG,cACrBxJ,EAAYqJ,EAAKrJ,UACjByJ,EAAUJ,EAAK3I,GACfyI,OAAwB,IAAZM,EAAqB,MAAQA,EACzCxK,GAAQ,OAA8BoK,EAAMN,GAGhD,OADAO,GAAW,QAAmBA,EAAU,eACpB,gBAAoBH,GAAW,OAAS,CAC1DjK,IAAKA,GACJD,EAAO,CACRe,UAAW,IAAWA,EAAWsJ,EAAUC,GAAQD,EAAW,IAAMC,EAAMC,GAAiB,wBAG/FJ,EAAWM,YAAc,aACzBN,EAAWO,KAAOT,EAClBE,EAAWQ,MAhCW,SAAyB3K,GAC7C,OAAoB,gBAAoBiK,EAAgB,KAAmB,gBAAoB,SAAS,OAAS,CAC/GzJ,KAAM,SACLR,MA8BLmK,EAAWS,SAvCc,SAA4B5K,GACnD,OAAoB,gBAAoBiK,EAAgB,KAAmB,gBAAoB,SAAS,OAAS,CAC/GzJ,KAAM,YACLR,MAqCLmK,EAAWU,OAASd,EACpBI,EAAWW,QAAUd,EACrB","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon=\"info\" />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 1,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        requireDMApiValidation: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.requireDMApiValidation,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {displayErrors(errorState)}\n            {isLoading ? (\n                <Loading />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={async () => {\n                                const response = await DreamMakerClient.startCompile(\n                                    instanceEditContext.instance.id\n                                );\n                                if (response.code === StatusCode.ERROR) {\n                                    addError(errorState, response.error);\n                                } else {\n                                    JobsController.registerJob(\n                                        response.payload,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.fastmode = 5;\n                                }\n                            }}>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => void;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["FieldType","StringControl","React","props","ref","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","overlay","innerid","tooltip","show","triggerHandler","style","visibility","icon","newValue","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","includeAll","onSave","JsonViewer","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","SimpleToolTip","tooltipid","children","Deployment","instanceEditContext","useContext","InstanceEditContext","errorState","isLoading","setIsLoading","deployInfo","setDeployInfo","canRead","hasDreamMakerRight","instancePermissionSet","DreamMakerRights","canCompile","async","loadDeployInfo","response","DreamMakerClient","instance","code","StatusCode","payload","addError","error","timeout","parsedTimeMatch","exec","parsedTime","groups","days","hours","minutes","seconds","projectName","apiValidationPort","apiValidationSecurityLevel","DreamDaemonSecurity","requireDMApiValidation","title","displayErrors","newTimeout","_result","floor","result","JobsController","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","bsPrefix","size","hasValidation","_ref$as","displayName","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}