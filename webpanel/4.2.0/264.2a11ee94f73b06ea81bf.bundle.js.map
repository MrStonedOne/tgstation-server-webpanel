{"version":3,"file":"264.2a11ee94f73b06ea81bf.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Repository.tsx","webpack://tgstation-server-control-panel/./src/components/utils/TestMergeRow.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    JobResponse,\n    RemoteGitProvider,\n    RepositoryResponse,\n    RepositoryRights,\n    RepositoryUpdateRequest,\n    TestMerge,\n    TestMergeParameters\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport JobsClient from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport RepositoryClient from \"../../../../ApiClient/RepositoryClient\";\nimport configOptions from \"../../../../ApiClient/util/config\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient, { PullRequest } from \"../../../../utils/GithubClient\";\nimport { hasDreamMakerRight, hasRepoRight } from \"../../../../utils/misc\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\nimport TestMergeRow from \"../../../utils/TestMergeRow\";\n\nfunction displayRepoInformation(repositoryInfo: RepositoryResponse | false | null) {\n    if (!repositoryInfo) return <GenericAlert title=\"view.instance.repo.norepoinfo\" />;\n\n    return (\n        <table className=\"mx-auto text-left\">\n            <tbody>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.origin\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.origin}</td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.owner\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.remoteRepositoryOwner}</td>\n                </tr>\n                <tr>\n                    <td>\n                        <span className=\"mr-3\">\n                            <FormattedMessage id=\"view.instance.repo.info.name\" />\n                        </span>\n                    </td>\n                    <td>{repositoryInfo.remoteRepositoryName}</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n\nconst enum PRState {\n    reapply = \"reapply\",\n    added = \"added\",\n    removed = \"removed\",\n    updated = \"updated\",\n    rename = \"renamed\"\n}\n\nexport default function Repository(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [repositoryInfo, setRepositoryInfo] = useState<RepositoryResponse | null | false>(null);\n    const [isCloning, setIsCloning] = useState(false);\n    const [isUnableHookClone, setIsUnableHookClone] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [PRs, setPRs] = useState<PullRequest[] | null>(null);\n    const [desiredState, setDesiredState] = useState(\n        new Map<number, [current: boolean, sha: string, comment: string | null] | false>()\n    );\n    const [updateRepo, setUpdateRepo] = useState(false);\n    const [manualPRs, setManualPRs] = useState<Set<number>>(new Set());\n    const [manualPR, setManualPR] = useState(0);\n    const [lastManualPR, setLastManualPR] = useState(0);\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n    const [deployAfterTM, setDeployAfterTM] = useState(\n        hasDreamMakerRight(instanceEditContext.instancePermissionSet, DreamMakerRights.Compile)\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void fetchRepositoryInfo(undefined, true), [instanceEditContext.instance.id]);\n    useEffect(() => {}, [repositoryInfo]);\n\n    function reloadPRs(repositoryInfo: RepositoryResponse, resetDesiredState?: boolean) {\n        if (\n            repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub &&\n            repositoryInfo.remoteRepositoryName &&\n            repositoryInfo.remoteRepositoryOwner\n        ) {\n            GithubClient.getPRs({\n                repo: repositoryInfo.remoteRepositoryName,\n                owner: repositoryInfo.remoteRepositoryOwner,\n                wantedPRs: repositoryInfo.revisionInformation?.activeTestMerges.map(tm => tm.number)\n            })\n                .then(prs => {\n                    if (prs.code === StatusCode.ERROR) {\n                        addError(errorState, prs.error);\n                    } else {\n                        setPRs(prs.payload);\n                        if (resetDesiredState)\n                            reloadDesiredState(repositoryInfo, true, false, prs.payload);\n                    }\n                })\n                .catch(e => {\n                    addError(\n                        errorState,\n                        new InternalError(ErrorCode.APP_FAIL, { jsError: e as Error })\n                    );\n                });\n        }\n    }\n\n    function reloadDesiredState(\n        repoinfo: RepositoryResponse | false | null,\n        reset: boolean,\n        harderReset: boolean,\n        gitHubPRs?: PullRequest[] | null\n    ) {\n        gitHubPRs = gitHubPRs ?? PRs;\n        if (reset) {\n            setUpdateRepo(false);\n            setManualPRs(new Set());\n        }\n\n        if (!repoinfo) return;\n\n        setDesiredState(desiredState => {\n            const newDesiredState = new Map(!reset ? desiredState : []);\n            repoinfo.revisionInformation?.activeTestMerges.forEach(pr => {\n                const currentDesiredState = newDesiredState.get(pr.number);\n                if (!reset) {\n                    //We want the PR gone, don't retestmerge it\n                    if (currentDesiredState === false) return;\n                    //We want the PR updated to a specific commit, don't mess with it\n                    if (currentDesiredState && !currentDesiredState[0]) return;\n                }\n\n                const gitHubPR = gitHubPRs?.find(\n                    potentialGitHubPR => pr.number === potentialGitHubPR.number\n                );\n\n                const defaultDesiredState = gitHubPR?.state === \"merged\" ? false : true;\n                if (reset && !harderReset && !defaultDesiredState) {\n                    newDesiredState.set(pr.number, false);\n                } else {\n                    newDesiredState.set(pr.number, [true, pr.targetCommitSha, pr.comment ?? \"\"]);\n                }\n            });\n            return newDesiredState;\n        });\n    }\n\n    async function fetchRepositoryInfo(cloneJob?: JobResponse, resetDesiredState?: boolean) {\n        if (!hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read)) {\n            setIsLoading(false);\n            setIsCloning(false);\n            reloadDesiredState(false, resetDesiredState ?? false, false);\n            return setRepositoryInfo(false);\n        }\n\n        const response = await RepositoryClient.getRepository(instanceEditContext.instance.id);\n\n        setIsCloning(false);\n        if (response.code === StatusCode.ERROR) {\n            if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoCloning\n            ) {\n                setIsUnableHookClone(false);\n                setIsCloning(true);\n                if (cloneJob) {\n                    JobsController.registerCallback(cloneJob.id, fetchRepositoryInfo);\n                } else {\n                    const response2 = await JobsClient.listActiveJobs(\n                        instanceEditContext.instance.id,\n                        {\n                            page: 1,\n                            pageSize: 100\n                        }\n                    );\n                    if (response2.code === StatusCode.OK) {\n                        const cloneJob = response2.payload.content\n                            .sort((a, b) => b.id - a.id)\n                            .find(\n                                job =>\n                                    job.description.includes(\"Clone\") &&\n                                    job.description.includes(\"repository\")\n                            );\n                        if (cloneJob) {\n                            JobsController.registerCallback(cloneJob.id, fetchRepositoryInfo);\n                        } else {\n                            setIsUnableHookClone(true);\n                        }\n                    } else {\n                        setIsUnableHookClone(true);\n                    }\n                }\n            } else {\n                addError(errorState, response.error);\n            }\n        } else {\n            reloadPRs(response.payload, resetDesiredState);\n            //response.payload.remoteGitProvider = RemoteGitProvider.GitLab;\n            setRepositoryInfo(response.payload);\n        }\n        setIsLoading(false);\n    }\n\n    if (isCloning) {\n        return (\n            <>\n                {isUnableHookClone ? (\n                    <GenericAlert title=\"view.instance.repo.canthookclone\" />\n                ) : null}\n                <Loading text=\"loading.repo.cloning\" />\n            </>\n        );\n    }\n\n    if (isLoading) {\n        return <Loading />;\n    }\n\n    const cloneFields = {\n        origin: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.url\"\n        },\n        reference: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.ref\",\n            defaultValue: \"main\"\n        },\n        accessUser: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.gituser\",\n            defaultValue: \"\"\n        },\n        accessToken: {\n            type: FieldType.String as FieldType.Password,\n            name: \"fields.instance.repository.gitpassword\",\n            defaultValue: \"\"\n        },\n        updateSubmodules: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.enablesubmodules\",\n            defaultValue: true\n        }\n    };\n\n    const canDeploy = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n\n    const editFields = {\n        originCheckoutSha: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.origincheckoutsha\",\n            disabled: true,\n            defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.originCommitSha : \"\",\n            tooltip: \"fields.instance.repository.origincheckoutsha.desc\"\n        },\n        checkoutSha: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.checkoutsha\",\n            defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.commitSha : \"\",\n            tooltip: \"fields.instance.repository.checkoutsha.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.SetSha\n            )\n        },\n        reference: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.reference\",\n            defaultValue: repositoryInfo ? repositoryInfo.reference : \"\",\n            tooltip: \"fields.instance.repository.reference.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.SetReference\n            )\n        },\n        committerName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.committerName\",\n            defaultValue: repositoryInfo ? repositoryInfo.committerName : \"\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCommitter\n            )\n        },\n        committerEmail: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.committerEmail\",\n            defaultValue: repositoryInfo ? repositoryInfo.committerEmail : \"\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCommitter\n            )\n        },\n        accessUser: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.repository.accessUser\",\n            defaultValue: repositoryInfo ? repositoryInfo.accessUser : \"\",\n            tooltip: \"fields.instance.repository.accessUser.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        accessToken: {\n            type: FieldType.Password as FieldType.Password,\n            name: \"fields.instance.repository.accessToken\",\n            tooltip: \"fields.instance.repository.accessToken.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        clearAccessToken: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.clearAccessToken\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeCredentials\n            )\n        },\n        pushTestMergeCommits: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.pushTestMergeCommits\",\n            defaultValue: repositoryInfo ? repositoryInfo.pushTestMergeCommits : false,\n            tooltip: \"fields.instance.repository.pushTestMergeCommits.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        createGitHubDeployments: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.createGitHubDeployments\",\n            defaultValue: repositoryInfo ? repositoryInfo.createGitHubDeployments : false,\n            tooltip: \"fields.instance.repository.createGitHubDeployments.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        showTestMergeCommitters: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.showTestMergeCommitters\",\n            defaultValue: repositoryInfo ? repositoryInfo.showTestMergeCommitters : false,\n            tooltip: \"fields.instance.repository.showTestMergeCommitters.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        autoUpdatesKeepTestMerges: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.autoUpdatesKeepTestMerges\",\n            defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesKeepTestMerges : false,\n            tooltip: \"fields.instance.repository.autoUpdatesKeepTestMerges.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeAutoUpdateSettings\n            )\n        },\n        autoUpdatesSynchronize: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.autoUpdatesSynchronize\",\n            defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesSynchronize : false,\n            tooltip: \"fields.instance.repository.autoUpdatesSynchronize.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeAutoUpdateSettings\n            )\n        },\n        postTestMergeComment: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.postTestMergeComment\",\n            defaultValue: repositoryInfo ? repositoryInfo.postTestMergeComment : false,\n            tooltip: \"fields.instance.repository.postTestMergeComment.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeTestMergeCommits\n            )\n        },\n        updateSubmodules: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.repository.updateSubmodules\",\n            defaultValue: repositoryInfo ? repositoryInfo.updateSubmodules : false,\n            tooltip: \"fields.instance.repository.updateSubmodules.desc\",\n            disabled: !hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.ChangeSubmoduleUpdate\n            )\n        }\n    };\n\n    // https://github.com/yogstation13/yogstation.git\n    // https://github.com/alexkar598/dmapitest.git\n\n    //positive if a > b\n\n    const testmergedPRs = new Map<number, TestMerge>();\n    if (repositoryInfo) {\n        repositoryInfo.revisionInformation?.activeTestMerges.forEach(pr =>\n            testmergedPRs.set(pr.number, pr)\n        );\n    }\n    const sortedPRs =\n        PRs?.sort((a, b) => {\n            // @ts-expect-error suck my dick ts, xoring booleans is completly valid\n            if (testmergedPRs.has(a.number) ^ testmergedPRs.has(b.number)) {\n                return testmergedPRs.has(a.number) ? -1 : 1;\n            }\n            // @ts-expect-error suck my dick ts, xoring booleans is completly valid\n            if (a.testmergelabel ^ b.testmergelabel) {\n                return a.testmergelabel ? -1 : 1;\n            }\n            return a.number - b.number;\n        }) ?? [];\n    const filteredPendingActions = sortedPRs\n        .map(pr => {\n            const desiredPRState = desiredState.get(pr.number);\n            const tmInfo = !repositoryInfo\n                ? undefined\n                : repositoryInfo?.revisionInformation?.activeTestMerges.find(\n                      activePR => activePR.number === pr.number\n                  );\n\n            if (desiredPRState) {\n                if (!tmInfo) {\n                    return [PRState.added, pr];\n                } else if (tmInfo.targetCommitSha !== desiredPRState[1]) {\n                    return [PRState.updated, pr];\n                } else if ((tmInfo.comment ?? \"\") !== desiredPRState[2]) {\n                    return [PRState.rename, pr];\n                } else {\n                    return [PRState.reapply, pr];\n                }\n            }\n            if (desiredState.get(pr.number) === false) {\n                if (!tmInfo) return null;\n\n                return [PRState.removed, pr];\n            }\n            return null;\n        })\n        .filter(value => value !== null) as [PRState, PullRequest][];\n    const sortedPendingActions = filteredPendingActions.sort((a, b) => {\n        const order = [PRState.reapply, PRState.removed, PRState.added, PRState.updated];\n        for (const state of order) {\n            if (\n                // @ts-expect-error again, ts doesn't want people to use xor on booleans, and I disagree\n                (a[0] === state) ^\n                (b[0] === state)\n            ) {\n                return a[0] === state ? -1 : 1;\n            }\n        }\n        return 0;\n    });\n    const noBranch = !repositoryInfo ? false : repositoryInfo.reference === \"(no branch)\";\n    const forceReset = filteredPendingActions.some(\n        action => action[0] != PRState.added && action[0] != PRState.reapply\n    );\n    const willReset = updateRepo || forceReset;\n\n    //PRs we haven't touched, only used to display prs to reapply after reset\n    const noPendingChanges =\n        filteredPendingActions.filter(([state]) => state !== PRState.reapply).length === 0 &&\n        !updateRepo &&\n        !manualPRs.size;\n\n    async function applyTestmerges() {\n        const editOptions: RepositoryUpdateRequest = {};\n        if (repositoryInfo && noBranch) {\n            editOptions.checkoutSha = repositoryInfo.revisionInformation?.originCommitSha;\n        } else if (willReset) {\n            editOptions.updateFromOrigin = true;\n            if (repositoryInfo) editOptions.reference = repositoryInfo?.reference;\n        }\n\n        if (repositoryInfo && repositoryInfo?.remoteGitProvider === RemoteGitProvider.GitHub) {\n            const testMergeArray: TestMergeParameters[] = [];\n            [...desiredState.entries()].forEach(([number, prDesiredState]) => {\n                if (!prDesiredState) return;\n                const [current, commit, comment] = prDesiredState;\n                //If we aren't resetting, ignore PRs we didn't touch\n                if (current && !(willReset || noBranch)) return;\n\n                testMergeArray.push({\n                    number: number,\n                    targetCommitSha: commit,\n                    comment\n                });\n            });\n            if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n        }\n        const testMergeArray = editOptions.newTestMerges ?? [];\n        manualPRs.forEach(pr =>\n            testMergeArray.push({\n                number: pr\n            })\n        );\n        if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n\n        setIsLoading(true);\n        const response = await RepositoryClient.editRepository(\n            instanceEditContext.instance.id,\n            editOptions\n        );\n        setIsLoading(false);\n        if (response.code === StatusCode.OK) {\n            if (response.payload.activeJob) {\n                setIsLoading(true);\n                JobsController.fastmode = 5;\n                JobsController.registerCallback(response.payload.activeJob.id, job => {\n                    return fetchRepositoryInfo(\n                        job,\n                        job.errorCode === undefined && job.exceptionDetails === undefined\n                    );\n                });\n                JobsController.registerJob(\n                    response.payload.activeJob,\n                    instanceEditContext.instance.id\n                );\n                JobsController.restartLoop();\n                if (deployAfterTM) {\n                    const jobId = response.payload.activeJob.id;\n                    const deployinterval = setInterval(() => {\n                        const targetJob = JobsController.jobs.get(jobId);\n                        if (typeof targetJob?.progress === \"number\") {\n                            void DreamMakerClient.startCompile(\n                                instanceEditContext.instance.id\n                            ).then(response => {\n                                if (response.code === StatusCode.ERROR) {\n                                    addError(errorState, response.error);\n                                }\n                            });\n                            clearInterval(deployinterval);\n                        }\n                    }, 5000);\n                }\n            } else {\n                await fetchRepositoryInfo();\n            }\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canUpdate =\n        hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n        hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.UpdateBranch);\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ repositoryInfo, PRs }} />\n            {displayErrors(errorState)}\n            {/*Just like... hope its cloned if you don't have read access*/}\n            {repositoryInfo && !repositoryInfo.origin ? (\n                <>\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.clone\" />\n                    </h3>\n                    <InputForm\n                        fields={cloneFields}\n                        hideDisabled={\n                            !hasRepoRight(\n                                instanceEditContext.instancePermissionSet,\n                                RepositoryRights.Read\n                            )\n                        }\n                        onSave={async result => {\n                            const response = await RepositoryClient.cloneRepository(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.OK) {\n                                await fetchRepositoryInfo(response.payload.activeJob ?? undefined);\n                                JobsController.restartLoop();\n                            } else {\n                                addError(errorState, response.error);\n                            }\n                        }}\n                        includeAll\n                    />\n                </>\n            ) : (\n                <>\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.repoinfo\" />\n                    </h3>\n                    {displayRepoInformation(repositoryInfo)}\n                    <hr />\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.reposettings\" />\n                    </h3>\n                    <InputForm\n                        fields={editFields}\n                        onSave={async _result => {\n                            const { clearAccessToken, ...result } = _result;\n                            if (clearAccessToken) {\n                                result.accessUser = \"\";\n                                result.accessToken = \"\";\n                            }\n\n                            setIsLoading(true);\n                            const response = await RepositoryClient.editRepository(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            setIsLoading(false);\n                            if (response.code === StatusCode.OK) {\n                                if (response.payload.activeJob) {\n                                    setIsLoading(true);\n                                    JobsController.fastmode = 5;\n                                    JobsController.registerCallback(\n                                        response.payload.activeJob.id,\n                                        fetchRepositoryInfo\n                                    );\n                                    JobsController.registerJob(\n                                        response.payload.activeJob,\n                                        instanceEditContext.instance.id\n                                    );\n                                    JobsController.restartLoop();\n                                } else {\n                                    await fetchRepositoryInfo();\n                                }\n                            } else {\n                                addError(errorState, response.error);\n                            }\n                        }}\n                    />\n                    <hr />\n                    <h3>\n                        <FormattedMessage id=\"view.instance.repo.testmerges\" />\n                    </h3>\n                    {repositoryInfo &&\n                    repositoryInfo.remoteGitProvider == RemoteGitProvider.Unknown ? (\n                        <GenericAlert title=\"view.instance.repo.testmerges.badprovider\" />\n                    ) : repositoryInfo &&\n                      repositoryInfo.remoteGitProvider == RemoteGitProvider.GitHub &&\n                      !PRs ? (\n                        <Loading text=\"loading.repo.prs\" />\n                    ) : (\n                        <div className=\"mx-5\">\n                            <Card className=\"mb-5\">\n                                <Card.Header>\n                                    <FormattedMessage id=\"view.instance.repo.pending.title\" />\n                                </Card.Header>\n                                <Card.Body className=\"text-left\">\n                                    <ul>\n                                        {noPendingChanges ? (\n                                            <li className=\"font-weight-lighter font-italic\">\n                                                <FormattedMessage id=\"view.instance.repo.pending.none\" />\n                                            </li>\n                                        ) : (\n                                            <>\n                                                {repositoryInfo && noBranch ? (\n                                                    <li>\n                                                        <FormattedMessage\n                                                            id=\"view.instance.repo.pending.reset.nobranch\"\n                                                            values={{\n                                                                commit: repositoryInfo.revisionInformation?.originCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )\n                                                            }}\n                                                        />\n                                                    </li>\n                                                ) : willReset && repositoryInfo ? (\n                                                    <li>\n                                                        <FormattedMessage id=\"view.instance.repo.pending.reset\" />\n                                                    </li>\n                                                ) : willReset ? (\n                                                    <li>\n                                                        <FormattedMessage id=\"view.instance.repo.pending.update\" />\n                                                    </li>\n                                                ) : null}\n                                                {repositoryInfo &&\n                                                repositoryInfo.remoteGitProvider ===\n                                                    RemoteGitProvider.GitHub\n                                                    ? sortedPendingActions.map(([state, pr]) => {\n                                                          const prDesiredState = desiredState.get(\n                                                              pr.number\n                                                          );\n\n                                                          if (\n                                                              state === PRState.reapply &&\n                                                              !(willReset || noBranch)\n                                                          )\n                                                              return null;\n\n                                                          const targetCommit = prDesiredState\n                                                              ? prDesiredState[1]\n                                                              : null;\n\n                                                          return (\n                                                              <li key={pr.number}>\n                                                                  <FormattedMessage\n                                                                      id={`view.instance.repo.pending.${state}`}\n                                                                      values={{\n                                                                          number: pr.number,\n                                                                          commit: targetCommit?.substring(\n                                                                              0,\n                                                                              7\n                                                                          ),\n                                                                          title: pr.title\n                                                                      }}\n                                                                  />\n                                                              </li>\n                                                          );\n                                                      })\n                                                    : null}\n                                                {[...manualPRs.values()].map(pr => (\n                                                    <li key={pr}>\n                                                        <FormattedMessage\n                                                            id={`view.instance.repo.pending.added.manual`}\n                                                            values={{\n                                                                number: pr\n                                                            }}\n                                                        />\n                                                    </li>\n                                                ))}\n                                            </>\n                                        )}\n                                    </ul>\n                                    <InputField\n                                        name=\"view.instance.repo.update\"\n                                        tooltip=\"view.instance.repo.update.desc\"\n                                        type={FieldType.Boolean}\n                                        defaultValue={\n                                            noBranch ? false : forceReset ? true : updateRepo\n                                        }\n                                        disabled={forceReset || noBranch || !canUpdate}\n                                        onChange={newVal => setUpdateRepo(newVal)}\n                                    />\n                                    {(configOptions.manualpr.value as boolean) ||\n                                    !repositoryInfo ||\n                                    repositoryInfo.remoteGitProvider ===\n                                        RemoteGitProvider.GitLab ? (\n                                        <div className=\"d-flex mt-5\">\n                                            <InputField\n                                                name=\"view.instance.repo.manual\"\n                                                tooltip=\"view.instance.repo.manual.desc\"\n                                                type={FieldType.Number}\n                                                min={0}\n                                                defaultValue={lastManualPR}\n                                                onChange={newPR => setManualPR(newPR)}\n                                                disabled={!canAdd}\n                                            />\n                                            <SimpleToolTip\n                                                tooltipid=\"generic.no_perm\"\n                                                show={canAdd ? false : undefined}>\n                                                <Button\n                                                    className=\"nowrap ml-3\"\n                                                    disabled={manualPR === lastManualPR || !canAdd}\n                                                    onClick={() => {\n                                                        setManualPRs(\n                                                            prevState =>\n                                                                new Set([\n                                                                    ...prevState.values(),\n                                                                    manualPR\n                                                                ])\n                                                        );\n                                                        setLastManualPR(manualPR);\n                                                    }}>\n                                                    <FormattedMessage id=\"view.instance.repo.addmanual\" />\n                                                </Button>\n                                            </SimpleToolTip>\n                                        </div>\n                                    ) : null}\n                                    <InputField\n                                        name=\"view.instance.repo.deployAfter\"\n                                        tooltip=\"view.instance.repo.deployAfter.desc\"\n                                        type={FieldType.Boolean}\n                                        defaultValue={!canDeploy ? false : deployAfterTM}\n                                        disabled={!canDeploy}\n                                        onChange={newVal => setDeployAfterTM(newVal)}\n                                    />\n                                </Card.Body>\n                                <Card.Footer>\n                                    <Button\n                                        variant=\"danger\"\n                                        className=\"mx-2\"\n                                        disabled={noPendingChanges}\n                                        onClick={() =>\n                                            reloadDesiredState(repositoryInfo, true, true)\n                                        }>\n                                        <FormattedMessage id=\"generic.cancel\" />\n                                    </Button>\n                                    <Button\n                                        className=\"mx-2\"\n                                        disabled={noPendingChanges}\n                                        onClick={applyTestmerges}>\n                                        <FormattedMessage id=\"generic.commit\" />\n                                    </Button>\n                                </Card.Footer>\n                            </Card>\n                            {repositoryInfo === false ? (\n                                <GenericAlert title=\"view.instance.repo.noautomerge\" />\n                            ) : repositoryInfo &&\n                              repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub ? (\n                                <Table variant=\"dark\" striped hover className=\"text-left\">\n                                    <tbody>\n                                        {sortedPRs.map(pr => (\n                                            <TestMergeRow\n                                                key={pr.number}\n                                                testmergeinfo={testmergedPRs.get(pr.number)}\n                                                pr={pr}\n                                                repoInfo={repositoryInfo}\n                                                finalState={\n                                                    desiredState.get(pr.number)\n                                                        ? ((desiredState.get(pr.number) as [\n                                                              boolean,\n                                                              string,\n                                                              string\n                                                          ]).slice(1) as [string, string])\n                                                        : false\n                                                }\n                                                onRemove={() =>\n                                                    setDesiredState(desiredState =>\n                                                        new Map(desiredState).set(pr.number, false)\n                                                    )\n                                                }\n                                                onSelectCommit={(commit, comment) =>\n                                                    setDesiredState(desiredState =>\n                                                        new Map(desiredState).set(pr.number, [\n                                                            false,\n                                                            commit,\n                                                            comment\n                                                        ])\n                                                    )\n                                                }\n                                                onError={error => addError(errorState, error)}\n                                            />\n                                        ))}\n                                    </tbody>\n                                </Table>\n                            ) : null}\n                        </div>\n                    )}\n                    <hr />\n                    <h4>\n                        <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                    </h4>\n                    <span>\n                        <FormattedMessage id=\"view.instance.repo.delete.desc\" />\n                    </span>\n                    <br />\n                    <Button\n                        variant=\"danger\"\n                        className=\"mt-2\"\n                        onClick={() => setShowDeleteModal(true)}>\n                        <FormattedMessage id=\"view.instance.repo.delete\" />\n                    </Button>\n                    <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)} centered>\n                        <Modal.Header closeButton>\n                            <Modal.Title>\n                                <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <span>\n                                <FormattedMessage id=\"generic.areyousure\" />\n                            </span>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <Button onClick={() => setShowDeleteModal(false)}>\n                                <FormattedMessage id=\"generic.cancel\" />\n                            </Button>\n                            <Button\n                                variant=\"danger\"\n                                onClick={async () => {\n                                    setShowDeleteModal(false);\n                                    setIsLoading(true);\n                                    const response = await RepositoryClient.deleteRepository(\n                                        instanceEditContext.instance.id\n                                    );\n                                    setIsLoading(false);\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            setIsLoading(true);\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                instanceEditContext.instance.id\n                                            );\n                                            JobsController.restartLoop();\n                                        } else {\n                                            await fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        addError(errorState, response.error);\n                                    }\n                                }}>\n                                <FormattedMessage id=\"view.instance.repo.delete\" />\n                            </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </>\n            )}\n        </div>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport SelectSearch, { fuzzySearch, SelectedOptionValue } from \"react-select-search\";\n\nimport {\n    RepositoryResponse,\n    RepositoryRights,\n    TestMerge\n} from \"../../ApiClient/generatedcode/generated\";\nimport InternalError from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport GithubClient, { Commit, PullRequest } from \"../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../utils/misc\";\nimport InputField, { FieldType } from \"./InputField\";\nimport Loading from \"./Loading\";\nimport SimpleToolTip from \"./SimpleTooltip\";\n\ninterface IProps {\n    pr: PullRequest;\n    testmergeinfo?: TestMerge;\n    repoInfo: RepositoryResponse;\n    finalState: [commit: string, comment: string] | false;\n    onRemove: () => unknown;\n    onSelectCommit: (commit: string, comment: string | null) => unknown;\n    onError: (error: InternalError) => unknown;\n}\n\nexport default function TestMergeRow({\n    pr,\n    testmergeinfo,\n    repoInfo,\n    finalState,\n    onRemove,\n    onSelectCommit,\n    onError\n}: IProps): JSX.Element {\n    const [showDetails, _setShowDetails] = useState(false);\n    const setShowDetails = (_newVal: ((prevState: boolean) => boolean) | boolean) => {\n        _setShowDetails(prevState => {\n            let newVal;\n            if (typeof _newVal === \"boolean\") {\n                newVal = _newVal;\n            } else {\n                newVal = _newVal(prevState);\n            }\n            if (newVal) void loadCommits();\n            return newVal;\n        });\n    };\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCommit, setSelectedCommit] = useState<string>(pr.head);\n    const [comment, setComment] = useState(finalState ? finalState[1] : \"\");\n    const [commits, setCommits] = useState<Map<string, Commit> | null>(null);\n    const [extraCommit, setExtraCommit] = useState<Commit | null>(null);\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const loadCommits = useCallback(\n        async (force?: boolean) => {\n            if (commits && !force) return;\n\n            const response = await GithubClient.getPRCommits({\n                //Repo info should be set if we are here\n                owner: repoInfo.remoteRepositoryOwner!,\n                repo: repoInfo.remoteRepositoryName!,\n                pr: pr,\n                wantedCommit: testmergeinfo?.targetCommitSha\n            });\n            if (response.code === StatusCode.ERROR) {\n                onError(response.error);\n            } else {\n                const commitMap = new Map();\n                response.payload[0].forEach(commit => commitMap.set(commit.sha, commit));\n                setCommits(commitMap);\n                setExtraCommit(response.payload[1] ?? null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            repoInfo.remoteRepositoryOwner,\n            repoInfo.remoteRepositoryName,\n            pr.head,\n            testmergeinfo?.targetCommitSha\n        ]\n    );\n    useEffect(() => (showDetails ? void loadCommits() : void 0), [showDetails, loadCommits]);\n    useEffect(() => (showModal ? void loadCommits() : void 0), [showModal, loadCommits]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setShowDetails(false), [finalState]);\n    useEffect(() => setComment(finalState ? finalState[1] : \"\"), [finalState]);\n\n    const colorMap: Record<typeof pr.state, string> = {\n        closed: \"#c93c37\",\n        merged: \"#8256d0\",\n        open: \"#347d39\"\n    };\n    let activeCommit: Commit | undefined = undefined;\n    if (testmergeinfo) {\n        if (commits?.has(testmergeinfo.targetCommitSha)) {\n            activeCommit = commits?.get(testmergeinfo.targetCommitSha);\n        } else if (extraCommit?.sha === testmergeinfo.targetCommitSha) {\n            activeCommit = extraCommit;\n        }\n    }\n    const commitOptions = [...(commits ?? []).values()].map(commit => ({\n        name: commit.name,\n        value: commit.sha,\n        current: commit.sha === testmergeinfo?.targetCommitSha,\n        latest: commit.sha === pr.head,\n        disabled: false\n    }));\n    if (extraCommit) {\n        commitOptions.push({\n            name: \"...\",\n            value: \"\",\n            current: false,\n            latest: false,\n            disabled: true\n        });\n        commitOptions.push({\n            name: extraCommit.name,\n            value: extraCommit.sha,\n            current: extraCommit.sha === testmergeinfo?.targetCommitSha,\n            latest: extraCommit.sha === pr.head,\n            disabled: false\n        });\n    }\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canReset =\n        (hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.UpdateBranch\n            )) ||\n        //Allow updating and removing pending PRs\n        !testmergeinfo;\n\n    return (\n        <>\n            <tr>\n                <td className={\"text-right\" + (finalState ? \" font-weight-bold\" : \"\")}>\n                    #{pr.number}\n                </td>\n                <td>\n                    <Badge\n                        pill\n                        className=\"text-white text-capitalize mr-2\"\n                        style={{ backgroundColor: colorMap[pr.state] }}>\n                        {pr.state}\n                    </Badge>\n                    {pr.testmergelabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"primary\">\n                            <FormattedMessage id=\"view.instance.repo.testmergelabel\" />\n                        </Badge>\n                    ) : null}\n                </td>\n                <td>\n                    <a href={pr.link} target=\"_blank\" rel=\"noreferrer\">\n                        {pr.title}\n                    </a>\n                </td>\n                <td className=\"font-italic\">{pr.author}</td>\n\n                <td>\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-inline-block text-nowrap\">\n                            {finalState ? (\n                                <>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canReset ? false : undefined}>\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"mx-1\"\n                                            onClick={onRemove}\n                                            disabled={!canReset}>\n                                            <FontAwesomeIcon icon=\"minus\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canAdd && canReset ? false : undefined}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={e =>\n                                                e.shiftKey\n                                                    ? onSelectCommit(\n                                                          pr.head,\n                                                          testmergeinfo?.comment ?? null\n                                                      )\n                                                    : setShowModal(true)\n                                            }\n                                            variant={finalState[0] === pr.head ? \"primary\" : \"info\"}\n                                            //To update, you have to reset and reapply the TM so you need both\n                                            disabled={!canAdd || !canReset}>\n                                            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    {testmergeinfo ? (\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => setShowDetails(val => !val)}\n                                            active={showDetails}>\n                                            <FontAwesomeIcon icon=\"info\" fixedWidth />\n                                        </Button>\n                                    ) : null}\n                                </>\n                            ) : (\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        variant=\"success\"\n                                        className=\"mx-1\"\n                                        disabled={!canAdd}\n                                        onClick={e =>\n                                            e.shiftKey\n                                                ? onSelectCommit(pr.head, null)\n                                                : setShowModal(true)\n                                        }>\n                                        <FontAwesomeIcon icon=\"plus\" fixedWidth />\n                                    </Button>\n                                </SimpleToolTip>\n                            )}\n                        </div>\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td className=\"py-0 border-top-0\" />\n                <td colSpan={4} className=\"py-0 border-top-0\">\n                    {testmergeinfo ? (\n                        <Collapse in={showDetails}>\n                            <div>\n                                <div className=\"py-3\">\n                                    <table className=\"reset-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.by\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.mergedBy.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.comment\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.comment}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.commit\" />\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    {activeCommit ? (\n                                                        <>\n                                                            {activeCommit.name}\n                                                            <a\n                                                                className=\"ml-1\"\n                                                                href={activeCommit.url}\n                                                                target=\"_blank\"\n                                                                rel=\"noreferrer\">\n                                                                (\n                                                                {testmergeinfo.targetCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )}\n                                                                )\n                                                            </a>\n                                                        </>\n                                                    ) : (\n                                                        testmergeinfo.targetCommitSha.substring(\n                                                            0,\n                                                            7\n                                                        )\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </Collapse>\n                    ) : null}\n                </td>\n            </tr>\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.title\" />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>\n                        <a\n                            href={pr.link}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            className=\"text-decoration-none\">\n                            {pr.title}\n                        </a>\n                    </h5>\n                    <FormattedMessage id=\"view.instance.repo.tm.modal.label\" />\n                    {commits ? (\n                        <SelectSearch\n                            filterOptions={fuzzySearch}\n                            search\n                            options={commitOptions}\n                            value={selectedCommit ?? activeCommit?.sha}\n                            autoComplete=\"on\"\n                            //@ts-expect-error error in the library, it's the wrong type\n                            renderOption={(\n                                props,\n                                option: SelectedOptionValue & { current: boolean; latest: boolean },\n                                snapshot,\n                                className\n                            ) => (\n                                //@ts-expect-error error in the library, it's the wrong type\n                                <button\n                                    type=\"button\"\n                                    className={\n                                        className + (option.disabled ? \" font-weight-bold\" : \"\")\n                                    }\n                                    {...props}>\n                                    <Badge>{(option.value as string).substring(0, 7)}</Badge>\n                                    {option.current ? (\n                                        <Badge variant=\"primary\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.testmerged\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.latest ? (\n                                        <Badge variant=\"success\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.latest\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.name}\n                                </button>\n                            )}\n                            onChange={value => setSelectedCommit((value as unknown) as string)}\n                        />\n                    ) : (\n                        <Loading text=\"loading.repo.commits\" width={5} widthUnit=\"rem\" />\n                    )}\n                    <InputField\n                        name=\"view.instance.repo.tm.modal.comment\"\n                        type={FieldType.String}\n                        onChange={newComment => setComment(newComment)}\n                        defaultValue={testmergeinfo?.comment ?? \"\"}\n                    />\n                    <span className=\"text-muted font-italic mt-4 d-inline-block\">\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.tip\" />\n                    </span>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={() => setShowModal(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            if (selectedCommit) onSelectCommit(selectedCommit, comment);\n                            setShowModal(false);\n                        }}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\" && match[1][0] !== \"5\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n})();\nexport default e;\n"],"names":["SimpleToolTip","props","show","overlay","id","tooltipid","children","PRState","TestMergeRow","pr","testmergeinfo","repoInfo","finalState","onRemove","onSelectCommit","onError","showDetails","_setShowDetails","useState","setShowDetails","_newVal","prevState","newVal","loadCommits","showModal","setShowModal","selectedCommit","setSelectedCommit","head","comment","setComment","commits","setCommits","extraCommit","setExtraCommit","instanceEditContext","useContext","InstanceEditContext","useCallback","async","force","response","GithubClient","owner","remoteRepositoryOwner","repo","remoteRepositoryName","wantedCommit","targetCommitSha","code","StatusCode","error","commitMap","Map","payload","forEach","commit","set","sha","useEffect","activeCommit","has","get","commitOptions","values","map","name","value","current","latest","disabled","push","canAdd","hasRepoRight","instancePermissionSet","RepositoryRights","canReset","className","number","Badge","pill","style","backgroundColor","closed","merged","open","state","testmergelabel","variant","href","link","target","rel","title","author","undefined","Button","onClick","icon","fixedWidth","e","shiftKey","val","active","colSpan","Collapse","in","mergedBy","url","substring","Modal","onHide","centered","size","closeButton","SelectSearch","filterOptions","fuzzySearch","search","options","autoComplete","renderOption","option","snapshot","type","onChange","Loading","text","width","widthUnit","InputField","FieldType","newComment","defaultValue","Repository","errorState","repositoryInfo","setRepositoryInfo","isCloning","setIsCloning","isUnableHookClone","setIsUnableHookClone","isLoading","setIsLoading","PRs","setPRs","desiredState","setDesiredState","updateRepo","setUpdateRepo","manualPRs","setManualPRs","Set","manualPR","setManualPR","lastManualPR","setLastManualPR","showDeleteModal","setShowDeleteModal","deployAfterTM","setDeployAfterTM","hasDreamMakerRight","DreamMakerRights","reloadDesiredState","repoinfo","reset","harderReset","gitHubPRs","newDesiredState","revisionInformation","activeTestMerges","currentDesiredState","gitHubPR","find","potentialGitHubPR","fetchRepositoryInfo","cloneJob","resetDesiredState","RepositoryClient","instance","ErrorCode","originalErrorMessage","errorCode","TGSErrorCode","JobsController","response2","JobsClient","page","pageSize","content","sort","a","b","job","description","includes","addError","remoteGitProvider","RemoteGitProvider","wantedPRs","tm","then","prs","catch","InternalError","jsError","reloadPRs","GenericAlert","cloneFields","origin","reference","accessUser","accessToken","updateSubmodules","canDeploy","editFields","originCheckoutSha","originCommitSha","tooltip","checkoutSha","commitSha","committerName","committerEmail","clearAccessToken","pushTestMergeCommits","createGitHubDeployments","showTestMergeCommitters","autoUpdatesKeepTestMerges","autoUpdatesSynchronize","postTestMergeComment","testmergedPRs","sortedPRs","filteredPendingActions","desiredPRState","tmInfo","activePR","updated","rename","reapply","added","removed","filter","sortedPendingActions","order","noBranch","forceReset","some","action","willReset","noPendingChanges","length","canUpdate","obj","displayErrors","InputForm","fields","hideDisabled","onSave","result","activeJob","includeAll","displayRepoInformation","_result","Card","prDesiredState","targetCommit","key","configOptions","min","newPR","editOptions","updateFromOrigin","testMergeArray","entries","newTestMerges","exceptionDetails","jobId","deployinterval","setInterval","progress","DreamMakerClient","clearInterval","Table","striped","hover","slice","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","Object","assign","bind","TypedEmitter","constructor","super","apiClient","octo","Octokit","retry","throttling","this","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","console","warn","method","retryCount","log","onAbuseLimit","all","oldversions","paginate","repos","listReleases","done","data","reduce","release","match","exec","version","old","body","InternalStatus","transformPR","user","login","merged_at","html_url","tail","base","labels","label","toLowerCase","pulls","list","wantedPR","pull_number","listCommits","per_page","message","split","reverse","_extraCommit","getCommit","ref"],"sourceRoot":""}