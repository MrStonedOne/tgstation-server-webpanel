{"version":3,"file":"67.82a04ddb6d9cdbb56747.bundle.js","mappings":"whBAiBO,IAAKA,G,SAAAA,GAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,IAAAA,EAAAA,KAkCZ,MAAMC,UAAyBC,EAAAA,UAEpBC,YAAYC,GACfC,MAAMD,GAENE,KAAKC,MAAQ,CACTC,iBAAkB,MAInBC,SACH,OACI,2BACI,gBAAC,IAAD,CAAiBC,IAAKJ,KAAKF,MAAMO,WACjC,sBAAIC,UAAU,eACV,gBAAC,IAAD,CAAkBC,GAAG,0CAEvBP,KAAKF,MAAMO,SAGTL,KAAKQ,eAAeR,KAAKF,MAAMO,UAF/B,gBAAC,IAAD,CAASI,KAAK,0BAsBtBD,eAAeH,GACnB,IACIK,EADAC,GAAS,EAEb,MAAMC,EAAmBP,EACnBQ,EAAsBR,EAC5B,OAAQA,EAASS,cACb,KAAKpB,EAAaqB,SACdJ,GAAUC,EAAiBI,iBAC3BN,EAAa,IAAMV,KAAKiB,eAAeL,GACvC,MACJ,KAAKlB,EAAawB,YACdP,IACME,EAAoBM,aACqB,IAA3CN,EAAoBM,YAAYC,OACpCV,EAAa,IAAMV,KAAKqB,kBAAkBR,GAC1C,MACJ,QACI,MAAM,IAAIS,MAAM,wCAGxB,OAAIX,EAEI,0BACI,gBAAC,IAAD,CAAOY,QAAQ,WACX,gBAAC,IAAD,CAAkBhB,GAAG,2CAK9BG,IAGHc,YAAYC,GAChB,OACI,gBAAC,IAAD,CAAOnB,UAAU,qBACb,6BACI,2BACA,2BACA,0BACI,gBAAC,IAAD,CAAkBC,GAAG,2CAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,8CAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,mDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,qDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,mDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,gDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,iDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,+CAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,iDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,+CAG7B,6BAAQkB,IAKZR,eAAeZ,GACnB,OAAOL,KAAKwB,YACR,gBAAC,WAAD,KACI,0BACI,sBAAIE,QAAS,IACT,0BACI,gBAAC,IAAD,CAAOC,MAAI,EAACJ,QAAQ,WAChB,gBAAC,IAAD,CAAkBhB,GAAG,oDAKpCP,KAAK4B,iBAAiBvB,EAASW,kBAC/BX,EAASwB,iBACN,gBAAC,WAAD,KACI,0BACI,sBAAIH,QAAS,IACT,0BACI,gBAAC,IAAD,CAAOC,MAAI,EAACJ,QAAQ,WAChB,gBAAC,IAAD,CAAkBhB,GAAG,oDAKpCP,KAAK4B,iBAAiBvB,EAASwB,mBAGpC,gBAAC,WAAD,QAKRR,kBAAkBhB,GACtB,OACI,gBAAC,WAAD,KACKL,KAAKwB,YACF,gBAAC,WAAD,KACKnB,EAASc,YAAaW,KAAIC,GAAc/B,KAAK4B,iBAAiBG,OAGvE,gBAAC,IAAD,CACIzB,UAAU,OACV0B,WAAYC,IAAgB5B,EAAS6B,OAAOC,SAASF,IACrDG,WAAY/B,EAAS6B,OAAOE,WAC5BC,YAAahC,EAAS6B,OAAOG,eAMrCT,iBAAiBG,GACrB,IAAIO,EAAwBP,EAAWQ,aACnCD,EAAsBE,SAAS,QAC/BF,EAAwBA,EAAsBG,UAC1C,EACAH,EAAsBlB,OAAS,IAIvC,MAAMsB,EAA4C,CAC9CC,IAAK,UACLC,KAAM,UACNC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,QAAQ,EACRC,aAAc,SAGZC,EACFnB,EAAWoB,oBAAoBC,kBAC/BrB,EAAWoB,oBAAoBC,iBAAiBhC,OAAS,EACvDiC,EAAiBrD,KAAKC,MAAMC,mBAAqB6B,EAAWxB,GAE5D+C,GACDvB,EAAWwB,eACZC,EAAAA,EAAAA,IAAezB,EAAWwB,aAAcvD,KAAKyD,SAASC,YAAYH,cAEtE,OACI,gBAAC,WAAD,KACI,sBACIjD,UAAU,SACVqD,QAAS,KACDN,EACArD,KAAK4D,SAAS,CACV1D,iBAAkB,OAEfgD,GACPlD,KAAK4D,SAAS,CACV1D,iBAAkB6B,EAAWxB,OAIzC,0BACK2C,EACG,sBACIW,MAAO,CACHC,WAAY,WAEhB,gBAAC,IAAD,CACIC,QACI,gBAAC,IAAD,CAASxD,GAAK,GAAEwB,EAAWxB,0BACvB,gBAAC,IAAD,CACIA,GAAK,kDACD8C,EAAiB,OAAS,aAKzC,EAAGW,IAAAA,KAAQC,KACR,0BACID,IAAKA,GACDC,GACJ,gBAAC,IAAD,CACIC,KAAMb,EAAiBc,EAAAA,IAAcC,EAAAA,UAMzD,MAER,0BACKd,EACG,gBAAC,IAAD,CACIS,QACI,gBAAC,IAAD,CAASxD,GAAK,GAAEwB,EAAWxB,oBACvB,gBAAC,IAAD,CACIA,GAAG,8CACH8D,OAAQ,CACJC,SAAUvC,EAAWwB,cAAgB,MACrCgB,IAAKvE,KAAKyD,QAAQC,WAAWH,mBAK5C,EAAGS,IAAAA,KAAQC,KACR,gBAAC,IAAD,GACItC,MAAI,EACJJ,QAAQ,SACRsC,MAAO,CACHW,OAAQ,WAEZR,IAAKA,GACDC,EAPR,CAQIN,QAAUc,IACNC,OACKC,KACG,8FACA,WAEFC,QACNH,EAAEI,qBAEN,gBAAC,IAAD,CAAiBX,KAAMY,EAAAA,SAInC,MAER,0BAAK/C,EAAWxB,IAChB,0BAAK+B,GACL,0BACK,IAAIyC,KAAKhD,EAAWiD,IAAIC,WAAWC,eAAe,QAASxC,IAEhE,0BACK,IAAIqC,KAAKhD,EAAWiD,IAAIG,WAAYD,eAAe,QAASxC,IAEjE,0BAAKX,EAAWiD,IAAII,UAAUC,MAC9B,0BAAKtD,EAAWuD,SAChB,0BAAKvD,EAAWoB,oBAAoBoC,UAAU9C,UAAU,EAAG,IAC3D,0BAAKV,EAAWoB,oBAAoBqC,gBAAgB/C,UAAU,EAAG,IACjE,0BACwC,MAAnCV,EAAW0D,qBACRC,OAAOC,KAAKC,EAAAA,IAAqBC,QAAOC,GAAKC,MAAMC,OAAOF,MACtD/D,EAAW0D,sBAGf,yBACI,gBAAC,IAAD,CAAkBlF,GAAG,6BAIjC,0BAAKwB,EAAWwB,eAEnBF,EACG,0BACI,sBAAI3B,QAAS,IACT,gBAAC,IAAD,KACI,6BACI,0BACI,gBAAC,IAAD,CAAkBnB,GAAG,kDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,iDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,iDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,qDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,qDAEzB,0BACI,gBAAC,IAAD,CAAkBA,GAAG,oDAG7B,6BACKwB,EAAWoB,oBAAoBC,iBAAiBtB,KAC7CmE,GACI,sBACIC,IAAM,eAAcD,EAAUE,aAAapE,EAAWxB,MACtD,0BACI,qBAAG6F,KAAMH,EAAUI,KAAnB,IAA0BJ,EAAUE,SAExC,0BACI,qBAAGC,KAAMH,EAAUI,KACdJ,EAAUK,eAGnB,0BAAKL,EAAUM,gBAAgB9D,UAAU,EAAG,IAC5C,0BAAKwD,EAAUO,SAASnB,MACxB,0BACK,IAAIN,KAAKkB,EAAUQ,UAAUvB,eAC1B,QACAxC,IAGR,0BACKuD,EAAUS,QACPT,EAAUS,QAEV,yBACI,gBAAC,IAAD,CAAkBnG,GAAG,oCAY7D,gBAAC,WAAD,QAOpBZ,EAAiBgH,YAAcC,EAAAA,EAC/B,O,oZCrZO,IAAKC,G,SAAAA,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,SAAAA,EAAAA,OAAAA,SAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA,KAsDZ,MAAMC,EAAgBlH,EAAAA,YAAiD,SACnEE,EACAkE,GAEA,OACI,gBAAC,YAAD,CACI+C,MAAOjH,EAAMiH,MACbC,SAAUvC,GAAK3E,EAAMkH,SAASvC,EAAEwC,OAAOF,OACvCG,SAAUpH,EAAMoH,SAChBlD,IAAKA,OAKXmD,EAAkBvH,EAAAA,YAAiD,SACrEE,EACAkE,GAEA,OACI,gBAAC,YAAD,CACI+C,MAAOjH,EAAMiH,MACbC,SAAUvC,GAAK3E,EAAMkH,SAASvC,EAAEwC,OAAOF,OACvCG,SAAUpH,EAAMoH,SAChBE,KAAK,WACLpD,IAAKA,OAKXqD,EAAiBzH,EAAAA,YAAiD,SACpEE,EACAkE,GAEA,MAAMsD,EAAQC,KAAKC,SAASC,WAC5B,OACI,yBACIC,QAASJ,EACThH,UAAU,sEACV,gBAAC,UAAD,CACIC,GAAI+G,EACJK,QAAS7H,EAAMiH,MACfC,SAAUvC,GAAK3E,EAAMkH,SAASvC,EAAEwC,OAAOU,SACvCP,KAAK,SACL9G,UAAU,SACV4G,SAAUpH,EAAMoH,SAChBlD,IAAKA,QAUf4D,EAAgBhI,EAAAA,YAAuD,SACzEE,EACAkE,GAEA,OACI,gBAAC,YAAD,CACI+C,MAAOjH,EAAMiH,MACbC,SAAWvC,GACP3E,EAAMkH,SACFjB,MAAMtB,EAAEwC,OAAOY,eAAiBpD,EAAEwC,OAAOF,MAAQtC,EAAEwC,OAAOY,eAGlEX,SAAUpH,EAAMoH,SAChBY,IAAKhI,EAAMgI,IACXC,IAAKjI,EAAMiI,IACXX,KAAK,SACLpD,IAAKA,OASXgE,EAAcpI,EAAAA,YAAsD,SACtEE,EACAkE,GAEA,OACI,gBAAC,YAAD,CACI+C,MAAOjH,EAAMiH,MACbC,SAAUvC,GAAK3E,EAAMkH,SAASiB,SAASxD,EAAEwC,OAAOF,QAChDG,SAAUpH,EAAMoH,SAChBgB,GAAG,SACHC,QAAM,EACNnE,IAAKA,GACJ0B,OAAO0C,QAAQtI,EAAMuI,MAEjBxC,QAAO,EAAEK,KAASH,MAAMkC,SAAS/B,MACjCpE,KAAI,EAAEoE,EAAKa,KACDjH,EAAMwI,WACT,0BAAQpC,IAAKa,EAAOA,MAAOA,GACtBb,GAGL,gBAAC,IAAD,CAAkB3F,GAAK,GAAET,EAAMuF,QAAQa,IAAOA,IAAKA,IAC9CqC,GACG,0BAAQrC,IAAKa,EAAOA,MAAOA,GACtBwB,WAUxBC,EAAoD,CAC7D,CAAC3B,EAAU4B,MAAO,EAClB,CAAC5B,EAAUb,QAAS,EACpB,CAACa,EAAU6B,UAAU,EACrB,CAAC7B,EAAU8B,QAAS,GACpB,CAAC9B,EAAU+B,UAAW,IAGX,SAASC,EAAW/I,GAC/B,MAAOgJ,EAAcC,IAAmBC,EAAAA,EAAAA,UACpClJ,EAAMmJ,cAAgBT,EAAc1I,EAAMsH,OAExC8B,GAAaC,EAAAA,EAAAA,QAAyB,OAC5CC,EAAAA,EAAAA,YAAU,KACNL,EAAgBjJ,EAAMmJ,cAAgBT,EAAc1I,EAAMsH,SAE3D,CAACtH,EAAMmJ,gBAEVG,EAAAA,EAAAA,YAAU,KASN,OARIF,EAAWG,UACPH,EAAWG,QAAQC,gBACnBJ,EAAWG,QAAQE,UAAUC,OAAO,cAEpCN,EAAWG,QAAQE,UAAUE,IAAI,eAIjC3J,EAAMsH,MACV,KAAKP,EAAU6B,QAMf,KAAK7B,EAAU4B,KACf,KAAK5B,EAAUb,OAGf,KAAKa,EAAU8B,OACf,KAAK9B,EAAU+B,SAEX,YADA9I,EAAMkH,SAAS8B,EAAwBI,EAAWG,SAASC,kBAAmB,MAIvF,CAACR,IAEJ,MAUMY,EAIF,CACAC,OAAQ7C,EACR8C,SAAUzC,EACV0C,QAASxC,EACT,CAACR,EAAUb,aAAS8D,EACpB,CAACjD,EAAU4B,WAAOqB,GAGhBC,EAAUjB,IAAiBhJ,EAAMmJ,cAAgBT,EAAc1I,EAAMsH,OAE3E,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACIrD,SA3BKiG,EA2BYlK,EAAMmK,QA1B1BD,EAGD,gBAAC,IAAD,CAASzJ,GAAIyJ,GACT,gBAAC,IAAD,CAAkBzJ,GAAIyJ,KAJT,gBAAC,WAAD,OA2BbE,OAAMpK,EAAMmK,cAAUH,IACrB,EAAG9F,IAAAA,KAAQC,KACR,gBAAC,YAAD,CAAoB3D,UAAU,gBAC1B,gBAAC,SAAD,GAAiBA,UAAU,eAAkB2D,GACzC,wBAAM3D,UAAWyJ,EAAU,mBAAqB,IAC5C,gBAAC,IAAD,CAAkBxJ,GAAIT,EAAMuF,QAEhC,uBAAK/E,UAAU,WACVR,EAAMoH,SAAW,gBAAC,IAAD,CAAkB3G,GAAG,qBAAwB,KAC/D,uBACIyD,IAAKA,EACL1D,UAAU,sBACVuD,MAAO,CAAEsG,WAAYrK,EAAMmK,QAAU,QAAU,WAC/C,gBAAC,IAAD,CAAiB/F,KAAMkG,EAAAA,YAO9CtK,EAAMsH,OAASP,EAAUb,OACtB,gBAAC4B,EAAD,CACIb,MAAO+B,EACP9B,SAAUqD,GAAYtB,EAAgBsB,GACtChF,KAAMvF,EAAMuF,KACZ6B,SAAUpH,EAAMoH,SAChBa,IAAKjI,EAAMiI,IACXD,IAAKhI,EAAMgI,IACX9D,IAAKkF,IAETpJ,EAAMsH,OAASP,EAAU4B,KACzB,gBAACT,EAAD,CACIjB,MAAO+B,EACP9B,SAAUqD,GAAYtB,EAAgBsB,GACtChF,KAAMvF,EAAMuF,KACZgD,KAAMvI,EAAMuI,KACZC,WAAYxI,EAAMwI,WAClBpB,SAAUpH,EAAMoH,WAGpBtH,EAAAA,cACI8J,EAAc5J,EAAMsH,MACpB,CACIL,MAAO+B,EACP9B,SAAUqD,GAAYtB,EAAgBsB,GACtCnD,SAAUpH,EAAMoH,SAChB7B,KAAMvF,EAAMsH,KACZpD,IAAKkF,IAKjB,gBAAC,WAAD,KACI,gBAAC,IAAD,CACIrF,MAAO,CAAEsG,YAAaJ,GAAWjK,EAAMoH,SAAW,cAAW4C,GAC7DvI,QAAQ,SACRoC,QAAS,IACLoF,EAAgBjJ,EAAMmJ,cAAgBT,EAAc1I,EAAMsH,QAE9D,gBAAC,IAAD,CAAiBlD,KAAK,YAvFrB8F,IAAAA,I,qUCtLN,SAASM,EACpBxK,GAEA,MAAMyK,EAAmB,IAAIC,IAIvBC,EAAgB,IAAID,KACnBE,EAAaC,IAAkB3B,EAAAA,EAAAA,UAAiD,KAEvFI,EAAAA,EAAAA,YAAU,KACN1D,OAAOC,KAAK7F,EAAM8K,QAAQC,SAAQtK,IAC9BoK,GAAeG,IAAa,IACrBA,EACH,CAACvK,GAAK,YAKf,IAEH,IAAK,MAAOA,EAAIwK,KAAUrF,OAAO0C,QAAQtI,EAAM8K,QAC3CH,EAAcO,IAAIzK,EAAIwK,GACtBR,EAAiBS,IACbD,GAGA/B,EAAAA,EAAAA,UAA0B+B,EAAM9B,cAAgBT,EAAAA,GAAcuC,EAAM3D,QAI5E,IAAI6D,GAAU,EACVC,GAAa,EACjB,IAAK,MAAO3K,EAAI4K,KAAoBV,EAAe,CAC/C,MAAOW,GAAcb,EAAiBc,IAAIF,GACpCG,EAAaZ,EAAYnK,GAK/B,IAJK4K,EAAgBlC,cAAgBT,EAAAA,GAAc2C,EAAgB/D,QAAUgE,IACzEH,GAAU,GACVK,GAAYC,UAASL,GAAa,GAElCD,GAAWC,EAAY,MAwB/B,OAAIpL,EAAM0L,eACD9F,OAAOrB,OAAOvE,EAAM8K,QAAQa,MAAKV,IAAUA,EAAM7D,WAC3C,iCAKX,2BACKxB,OAAO0C,QAAQtI,EAAM8K,QAAQ9I,KAAI,EAAEvB,EAAIwK,MACpC,MAAM,SAAE7D,KAAawE,GAAeX,EACpC,OAAIjL,EAAM0L,cAAgBtE,EAAiB,KAGvC,gBAAC,KAAD,GACIhB,IAAK3F,GACDmL,EAFR,CAGIxE,SAAUpH,EAAM6L,UAAYzE,EAC5BF,SAAU,CAAC4E,EAAyBC,KAChCtB,EAAiBc,IAAIN,GAAQ,GAAGa,GAChCjB,GAAeG,IAAa,IACrBA,EACH,CAACvK,GAAK,IACCuK,EAAUvK,GACbgL,SAAUM,cAOlC,uBAAKvL,UAAU,oBACX,gBAAC,IAAD,CACIyD,QACI,gBAAC,IAAD,CAASxD,GAAK,gBACV,gBAAC,IAAD,CAAkBA,GAAG,0BAG7B2J,OAAMgB,QAAapB,GACnB,gBAAC,IAAD,CACIvI,QAASzB,EAAM6L,UAAYT,EAAa,SAAW,UACnDhE,SAAUpH,EAAM6L,WAAaV,GAAWC,EACxCvH,QA9DP,KACT,MAAMmI,EAAgD,GAEtD,IAAK,MAAOvL,EAAI4K,KAAoBV,EAAe,CAC/C,MAAOW,GAAcb,EAAiBc,IAAIF,IAGrCA,EAAgBY,eACjBX,IACKD,EAAgBlC,cAAgBT,EAAAA,GAAc2C,EAAgB/D,QAClEtH,EAAMkM,cAIXF,EAAavL,GAAM6K,GAGvBtL,EAAMmM,OAAOH,KA8CG,gBAAC,IAAD,CAAkBvL,GAAIT,EAAMoM,eAAiB,uB,gGCpJtD,SAASC,EAAWrM,GAC/B,OACI,gBAAC,IAAD,CACIsM,IAAKtM,EAAMM,IACXiF,KAAM,OACNgH,MAAM,OACNC,UAAU,WACVC,WAAS,EACTC,kBAAkB,IAKvB,SAASC,EAAgB3M,GAC5B,OAAK4M,EAAAA,GAAAA,SAAAA,MAID,uBAAKpM,UAAU,aACX,gBAAC6L,EAAD,CAAY/L,IAAKN,EAAMM,OAJpB,mC,yVCAA,MAAMuM,UAAmB/M,EAAAA,cAC7BC,YAAYC,GACfC,MAAMD,GAENE,KAAKC,MAAQ,CACT2M,UAAU,EACVC,UAAW/M,EAAMuC,aAIlBlC,SACH,MAAM2M,EAA2B,GAE3BC,EAAWxF,KAAKQ,IAAI/H,KAAKF,MAAMsC,WAAapC,KAAKF,MAAMuC,YAAc,EAAG,GACxE2K,EAAUzF,KAAKQ,IAAI/H,KAAKF,MAAMuC,YAAc,EAAG,GAE/CyF,EAAMP,KAAKQ,IACb/H,KAAKF,MAAMuC,YACPkF,KAAKQ,IACD,EAAI/B,OAAOhG,KAAKF,MAAMuC,cAAgBrC,KAAKF,MAAMsC,YAAc2K,EAC/D,GAER,GAEEhF,EAAMR,KAAKO,IACb9H,KAAKF,MAAMuC,YACPkF,KAAKQ,IAAI,EAAI/B,OAAkC,IAA3BhG,KAAKF,MAAMuC,aAAqB2K,EAAS,GACjEhN,KAAKF,MAAMsC,WAAa,GAI5B,IAAK,IAAI6K,EAAInF,EAAKmF,GAAKlF,EAAKkF,IACxBH,EAAMI,KACF,gBAAC,SAAD,CACIhH,IAAK+G,EACLE,OAAQF,IAAMjN,KAAKF,MAAMuC,YACzBsB,QAAS,IAAM3D,KAAKF,MAAMkC,WAAWiL,IACpCA,IAKb,MAAMG,EAAWpN,KAAKF,MAAMsC,WAAa,EAAI,gBAAC,aAAD,CAAqB8E,UAAQ,IAAM,KAE1EmG,EACF,gBAAC,IAAD,CAAS9M,GAAG,oBACR,gBAAC,UAAD,KACI,gBAAC,IAAD,CAAkBA,GAAG,wBAEzB,gBAAC,YAAD,KACI,wBACID,UAAU,SACVgN,SAAU7I,IACNA,EAAE8I,iBACFvN,KAAKF,MAAMkC,WAAWhC,KAAKC,MAAM4M,WACjC7M,KAAK4D,SAAS,CACVgJ,UAAU,MAGlB,gBAAC,YAAD,CACItM,UAAU,OACV8G,KAAK,SACLU,IAAK,EACLC,IAAK/H,KAAKF,MAAMsC,WAChB2E,MAAO/G,KAAKC,MAAM4M,UAClB7F,SAAUvC,GAAKzE,KAAK4D,SAAS,CAAEiJ,UAAW5E,SAASxD,EAAEwC,OAAOF,SAC5DoB,QAAM,IAEV,gBAAC,IAAD,CAAQf,KAAK,UACT,gBAAC,IAAD,CAAkB7G,GAAG,sBAQjCyB,WAAYwL,EAAIpL,WAAYqL,EAAIpL,YAAaqL,KAAO5N,GAAUE,KAAKF,MAE3E,OACI,yBAAKQ,UAAU,cAAcuD,MAAO,CAAE8J,SAAU,SAAUC,OAAQ,UAAe9N,GAC7E,gBAAC,IAAD,CAAYQ,UAAU,0BAClB,gBAAC,SAAD,CACI4G,SAAUlH,KAAKF,MAAMuC,aAAe,EACpCsB,QAAS,IACL3D,KAAKF,MAAMkC,WAAWuF,KAAKQ,IAAI/H,KAAKF,MAAMuC,YAAc,EAAG,MAGnE,gBAAC,SAAD,CACI8K,OAAQnN,KAAKF,MAAMuC,aAAe,EAClCsB,QAAS,IAAM3D,KAAKF,MAAMkC,WAAW,IAFzC,KAKCoL,EACAN,EACAM,EACApN,KAAKF,MAAMsC,YAAc,EACtB,gBAAC,SAAD,CACI+K,OAAQnN,KAAKF,MAAMuC,aAAerC,KAAKF,MAAMsC,WAC7CuB,QAAS,IAAM3D,KAAKF,MAAMkC,WAAWhC,KAAKF,MAAMsC,aAC/CpC,KAAKF,MAAMsC,YAEhB,KACHpC,KAAKF,MAAMsC,WAAa,EACrB,gBAAC,IAAD,CACI8H,KAAMlK,KAAKC,MAAM2M,SACjBiB,UAAU,MACV9J,QAASsJ,GACT,gBAAC,SAAD,CACI1J,QAAS,IACL3D,KAAK4D,UAASkK,IACH,CACHlB,UAAWkB,EAAKlB,cAI5B,gBAAC,IAAD,CAAiB1I,KAAK,aAG9B,KACJ,gBAAC,SAAD,CACIgD,SAAUlH,KAAKF,MAAMuC,aAAerC,KAAKF,MAAMsC,WAC/CuB,QAAS,IACL3D,KAAKF,MAAMkC,WACPuF,KAAKO,IAAI9H,KAAKF,MAAMuC,YAAc,EAAGrC,KAAKF,MAAMsC,oB,qDCjHzE,MAAMwE,E,QAAsBhH,mBAC9BkK","sources":["webpack://tgstation-server-control-panel/./src/components/utils/DeploymentViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/PageHelper.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts"],"sourcesContent":["import {\n    faCaretDown,\n    faCaretRight,\n    faExclamationTriangle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\nimport { lt as SemverLessThan } from \"semver\";\n\nimport { CompileJobResponse, DreamDaemonSecurity } from \"../../ApiClient/generatedcode/generated\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport { DebugJsonViewer } from \"./JsonViewer\";\nimport Loading from \"./Loading\";\nimport PageHelper from \"./PageHelper\";\n\nexport enum ViewDataType {\n    CompileJobs,\n    Watchdog\n}\n\nexport interface CompileJobsPaging {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n    loadPage: (page: number) => Promise<void>;\n}\n\nexport interface DeploymentsData {\n    viewDataType: ViewDataType;\n    compileJobs?: CompileJobResponse[];\n    paging: CompileJobsPaging;\n}\n\nexport interface WatchdogData {\n    viewDataType: ViewDataType;\n    activeCompileJob?: CompileJobResponse | null;\n    stagedCompileJob?: CompileJobResponse | null;\n}\n\ntype CompileJobViewerData = WatchdogData | DeploymentsData;\n\ninterface IProps {\n    viewData: CompileJobViewerData | null; // null means loading\n}\n\ninterface IState {\n    openTestMergesId: number | null;\n}\n\nclass DeploymentViewer extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            openTestMergesId: null\n        };\n    }\n\n    public render(): ReactNode {\n        return (\n            <div>\n                <DebugJsonViewer obj={this.props.viewData} />\n                <h3 className=\"text-center\">\n                    <FormattedMessage id=\"view.instance.server.deployment_info\" />\n                </h3>\n                {!this.props.viewData ? (\n                    <Loading text=\"loading.compile_jobs\" />\n                ) : (\n                    this.renderViewData(this.props.viewData)\n                )}\n            </div>\n        );\n    }\n    /*\n    <React.Fragment>\n                        {this.props.viewData.viewDataType === ViewDataType.CompileJobs ? (\n                            <PageHelper\n                                className=\"mt-4\"\n                                selectPage={newPage => void this.props.paging.loadPage(newPage)}\n                                totalPages={this.state.maxPage ?? 1}\n                                currentPage={this.state.page}\n                            />\n                        ) : (\n                            <React.Fragment />\n                        )}\n                    </React.Fragment>\n    */\n\n    private renderViewData(viewData: CompileJobViewerData): React.ReactNode {\n        let noJobs = false;\n        let renderFunc: () => React.ReactNode;\n        const watchdogViewData = viewData as WatchdogData;\n        const deploymentsViewData = viewData as DeploymentsData;\n        switch (viewData.viewDataType) {\n            case ViewDataType.Watchdog:\n                noJobs = !watchdogViewData.activeCompileJob;\n                renderFunc = () => this.renderWatchdog(watchdogViewData);\n                break;\n            case ViewDataType.CompileJobs:\n                noJobs =\n                    !!deploymentsViewData.compileJobs &&\n                    deploymentsViewData.compileJobs.length === 0;\n                renderFunc = () => this.renderDeployments(deploymentsViewData);\n                break;\n            default:\n                throw new Error(\"Invalid enum value for ViewDataType!\");\n        }\n\n        if (noJobs)\n            return (\n                <h1>\n                    <Badge variant=\"warning\">\n                        <FormattedMessage id=\"view.utils.deployment_viewer.no_jobs\" />\n                    </Badge>\n                </h1>\n            );\n\n        return renderFunc();\n    }\n\n    private renderTable(tableContents: React.ReactNode): React.ReactNode {\n        return (\n            <Table className=\"table table-hover\">\n                <thead>\n                    <th></th>\n                    <th></th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.id\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.byond\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.started_at\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.completed_at\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.started_by\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.project\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.revision\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.origin\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.security\" />\n                    </th>\n                    <th>\n                        <FormattedMessage id=\"view.utils.deployment_viewer.table.dmapi\" />\n                    </th>\n                </thead>\n                <tbody>{tableContents}</tbody>\n            </Table>\n        );\n    }\n\n    private renderWatchdog(viewData: WatchdogData): React.ReactNode {\n        return this.renderTable(\n            <React.Fragment>\n                <tr>\n                    <td colSpan={11}>\n                        <h3>\n                            <Badge pill variant=\"success\">\n                                <FormattedMessage id=\"view.instance.server.deployment_info.active\" />\n                            </Badge>\n                        </h3>\n                    </td>\n                </tr>\n                {this.renderCompileJob(viewData.activeCompileJob!)}\n                {viewData.stagedCompileJob ? (\n                    <React.Fragment>\n                        <tr>\n                            <td colSpan={11}>\n                                <h3>\n                                    <Badge pill variant=\"warning\">\n                                        <FormattedMessage id=\"view.instance.server.deployment_info.staged\" />\n                                    </Badge>\n                                </h3>\n                            </td>\n                        </tr>\n                        {this.renderCompileJob(viewData.stagedCompileJob)}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n    private renderDeployments(viewData: DeploymentsData): React.ReactNode {\n        return (\n            <React.Fragment>\n                {this.renderTable(\n                    <React.Fragment>\n                        {viewData.compileJobs!.map(compileJob => this.renderCompileJob(compileJob))}\n                    </React.Fragment>\n                )}\n                <PageHelper\n                    className=\"mt-4\"\n                    selectPage={newPage => void viewData.paging.loadPage(newPage)}\n                    totalPages={viewData.paging.totalPages}\n                    currentPage={viewData.paging.currentPage}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderCompileJob(compileJob: CompileJobResponse) {\n        let correctedByondVersion = compileJob.byondVersion;\n        if (correctedByondVersion.endsWith(\".0\"))\n            correctedByondVersion = correctedByondVersion.substring(\n                0,\n                correctedByondVersion.length - 2\n            );\n\n        // we use en-GB so we get the fucking SANE DD/MM/YYYY\n        const dateFormatter: Intl.DateTimeFormatOptions = {\n            day: \"2-digit\",\n            year: \"numeric\",\n            month: \"2-digit\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            hour12: false,\n            timeZoneName: \"short\"\n        };\n\n        const hasTestMerges =\n            compileJob.revisionInformation.activeTestMerges &&\n            compileJob.revisionInformation.activeTestMerges.length > 0;\n        const testMergesOpen = this.state.openTestMergesId === compileJob.id;\n\n        const outOfDateDMApi =\n            !compileJob.dmApiVersion ||\n            SemverLessThan(compileJob.dmApiVersion, this.context?.serverInfo?.dmApiVersion);\n\n        return (\n            <React.Fragment>\n                <tr\n                    className=\"nowrap\"\n                    onClick={() => {\n                        if (testMergesOpen) {\n                            this.setState({\n                                openTestMergesId: null\n                            });\n                        } else if (hasTestMerges) {\n                            this.setState({\n                                openTestMergesId: compileJob.id\n                            });\n                        }\n                    }}>\n                    <td>\n                        {hasTestMerges ? (\n                            <h5\n                                style={{\n                                    whiteSpace: \"nowrap\"\n                                }}>\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id={`${compileJob.id}-tooltip-test-merges`}>\n                                            <FormattedMessage\n                                                id={`view.utils.deployment_viewer.test_merges_hint.${\n                                                    testMergesOpen ? \"hide\" : \"show\"\n                                                }`}\n                                            />\n                                        </Tooltip>\n                                    }>\n                                    {({ ref, ...triggerHandler }) => (\n                                        <span\n                                            ref={ref as React.Ref<HTMLSpanElement>}\n                                            {...triggerHandler}>\n                                            <FontAwesomeIcon\n                                                icon={testMergesOpen ? faCaretDown : faCaretRight}\n                                            />\n                                        </span>\n                                    )}\n                                </OverlayTrigger>\n                            </h5>\n                        ) : null}\n                    </td>\n                    <td>\n                        {outOfDateDMApi ? (\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${compileJob.id}-tooltip-dmapi`}>\n                                        <FormattedMessage\n                                            id=\"view.utils.deployment_viewer.dmapi_outdated\"\n                                            values={{\n                                                codebase: compileJob.dmApiVersion ?? \"N/A\",\n                                                tgs: this.context.serverInfo.dmApiVersion\n                                            }}\n                                        />\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <Badge\n                                        pill\n                                        variant=\"danger\"\n                                        style={{\n                                            cursor: \"pointer\"\n                                        }}\n                                        ref={ref as React.Ref<HTMLSpanElement>}\n                                        {...triggerHandler}\n                                        onClick={(e: React.MouseEvent<HTMLSpanElement>) => {\n                                            window\n                                                .open(\n                                                    \"https://github.com/tgstation/tgstation-server/releases?q=%23tgs-dmapi-release&expanded=true\",\n                                                    \"_blank\"\n                                                )\n                                                ?.focus();\n                                            e.stopPropagation();\n                                        }}>\n                                        <FontAwesomeIcon icon={faExclamationTriangle} />\n                                    </Badge>\n                                )}\n                            </OverlayTrigger>\n                        ) : null}\n                    </td>\n                    <td>{compileJob.id}</td>\n                    <td>{correctedByondVersion}</td>\n                    <td>\n                        {new Date(compileJob.job.startedAt).toLocaleString(\"en-CA\", dateFormatter)}\n                    </td>\n                    <td>\n                        {new Date(compileJob.job.stoppedAt!).toLocaleString(\"en-CA\", dateFormatter)}\n                    </td>\n                    <td>{compileJob.job.startedBy.name}</td>\n                    <td>{compileJob.dmeName}</td>\n                    <td>{compileJob.revisionInformation.commitSha.substring(0, 7)}</td>\n                    <td>{compileJob.revisionInformation.originCommitSha.substring(0, 7)}</td>\n                    <td>\n                        {compileJob.minimumSecurityLevel != null ? (\n                            Object.keys(DreamDaemonSecurity).filter(v => isNaN(Number(v)))[\n                                compileJob.minimumSecurityLevel\n                            ]\n                        ) : (\n                            <i>\n                                <FormattedMessage id=\"generic.not_applicable\" />\n                            </i>\n                        )}\n                    </td>\n                    <td>{compileJob.dmApiVersion}</td>\n                </tr>\n                {testMergesOpen ? (\n                    <tr>\n                        <td colSpan={10}>\n                            <Table>\n                                <thead>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.number\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.title\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.revision\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.merged_by\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.merged_at\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.comment\" />\n                                    </th>\n                                </thead>\n                                <tbody>\n                                    {compileJob.revisionInformation.activeTestMerges.map(\n                                        testMerge => (\n                                            <tr\n                                                key={`test-merge-#${testMerge.number}-cj-${compileJob.id}`}>\n                                                <td>\n                                                    <a href={testMerge.url}>#{testMerge.number}</a>\n                                                </td>\n                                                <td>\n                                                    <a href={testMerge.url}>\n                                                        {testMerge.titleAtMerge}\n                                                    </a>\n                                                </td>\n                                                <td>{testMerge.targetCommitSha.substring(0, 7)}</td>\n                                                <td>{testMerge.mergedBy.name}</td>\n                                                <td>\n                                                    {new Date(testMerge.mergedAt).toLocaleString(\n                                                        \"en-CA\",\n                                                        dateFormatter\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {testMerge.comment ? (\n                                                        testMerge.comment\n                                                    ) : (\n                                                        <i>\n                                                            <FormattedMessage id=\"generic.not_applicable\" />\n                                                        </i>\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        )\n                                    )}\n                                </tbody>\n                            </Table>\n                        </td>\n                    </tr>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nDeploymentViewer.contextType = InstanceEditContext;\nexport default DeploymentViewer;\n","import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          noLocalize?: boolean;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n    noLocalize?: boolean;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return props.noLocalize ? (\n                        <option key={value} value={value}>\n                            {key}\n                        </option>\n                    ) : (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon={faInfo} />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    noLocalize={props.noLocalize}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n    saveMessageId?: string;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id={props.saveMessageId ?? \"generic.save\"} />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentPropsWithoutRef } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    selectPage: (page: number) => void;\n    totalPages: number;\n    currentPage: number;\n} & Partial<ComponentPropsWithoutRef<\"div\">>;\n\ninterface IState {\n    showGoto: boolean;\n    gotoValue: number;\n}\n\nexport default class PageHelper extends React.PureComponent<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showGoto: false,\n            gotoValue: props.currentPage\n        };\n    }\n\n    public render(): React.ReactNode {\n        const items: React.ReactNode[] = [];\n\n        const maxRight = Math.max(this.props.totalPages - this.props.currentPage - 1, 0);\n        const maxLeft = Math.max(this.props.currentPage - 2, 0);\n\n        const min = Math.max(\n            this.props.currentPage -\n                Math.max(\n                    5 - Number(this.props.currentPage !== this.props.totalPages) - maxRight,\n                    2\n                ),\n            2\n        );\n        const max = Math.min(\n            this.props.currentPage +\n                Math.max(5 - Number(this.props.currentPage !== 1) - maxLeft, 2),\n            this.props.totalPages - 1\n        );\n\n        //Start at the second page and stop at the second to last page\n        for (let i = min; i <= max; i++) {\n            items.push(\n                <Pagination.Item\n                    key={i}\n                    active={i === this.props.currentPage}\n                    onClick={() => this.props.selectPage(i)}>\n                    {i}\n                </Pagination.Item>\n            );\n        }\n\n        const ellipsis = this.props.totalPages > 7 ? <Pagination.Ellipsis disabled /> : null;\n\n        const findPopover = (\n            <Popover id=\"popover-gotopage\">\n                <Popover.Title>\n                    <FormattedMessage id=\"generic.goto.title\" />\n                </Popover.Title>\n                <Popover.Content>\n                    <form\n                        className=\"d-flex\"\n                        onSubmit={e => {\n                            e.preventDefault();\n                            this.props.selectPage(this.state.gotoValue);\n                            this.setState({\n                                showGoto: false\n                            });\n                        }}>\n                        <Form.Control\n                            className=\"mr-2\"\n                            type=\"number\"\n                            min={1}\n                            max={this.props.totalPages}\n                            value={this.state.gotoValue}\n                            onChange={e => this.setState({ gotoValue: parseInt(e.target.value) })}\n                            custom\n                        />\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"generic.goto\" />\n                        </Button>\n                    </form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { selectPage: _1, totalPages: _2, currentPage: _3, ...props } = this.props;\n\n        return (\n            <div className=\"text-center\" style={{ position: \"sticky\", bottom: \"1.5em\" }} {...props}>\n                <Pagination className=\"justify-content-center\">\n                    <Pagination.Prev\n                        disabled={this.props.currentPage <= 1}\n                        onClick={() =>\n                            this.props.selectPage(Math.max(this.props.currentPage - 1, 1))\n                        }\n                    />\n                    <Pagination.Item\n                        active={this.props.currentPage <= 1}\n                        onClick={() => this.props.selectPage(1)}>\n                        1\n                    </Pagination.Item>\n                    {ellipsis}\n                    {items}\n                    {ellipsis}\n                    {this.props.totalPages >= 2 ? (\n                        <Pagination.Item\n                            active={this.props.currentPage >= this.props.totalPages}\n                            onClick={() => this.props.selectPage(this.props.totalPages)}>\n                            {this.props.totalPages}\n                        </Pagination.Item>\n                    ) : null}\n                    {this.props.totalPages > 7 ? (\n                        <OverlayTrigger\n                            show={this.state.showGoto}\n                            placement=\"top\"\n                            overlay={findPopover}>\n                            <Pagination.Item\n                                onClick={() =>\n                                    this.setState(prev => {\n                                        return {\n                                            showGoto: !prev.showGoto\n                                        };\n                                    })\n                                }>\n                                <FontAwesomeIcon icon=\"search\" />\n                            </Pagination.Item>\n                        </OverlayTrigger>\n                    ) : null}\n                    <Pagination.Next\n                        disabled={this.props.currentPage >= this.props.totalPages}\n                        onClick={() =>\n                            this.props.selectPage(\n                                Math.min(this.props.currentPage + 1, this.props.totalPages)\n                            )\n                        }\n                    />\n                </Pagination>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n"],"names":["ViewDataType","DeploymentViewer","React","constructor","props","super","this","state","openTestMergesId","render","obj","viewData","className","id","renderViewData","text","renderFunc","noJobs","watchdogViewData","deploymentsViewData","viewDataType","Watchdog","activeCompileJob","renderWatchdog","CompileJobs","compileJobs","length","renderDeployments","Error","variant","renderTable","tableContents","colSpan","pill","renderCompileJob","stagedCompileJob","map","compileJob","selectPage","newPage","paging","loadPage","totalPages","currentPage","correctedByondVersion","byondVersion","endsWith","substring","dateFormatter","day","year","month","hour","minute","hour12","timeZoneName","hasTestMerges","revisionInformation","activeTestMerges","testMergesOpen","outOfDateDMApi","dmApiVersion","SemverLessThan","context","serverInfo","onClick","setState","style","whiteSpace","overlay","ref","triggerHandler","icon","faCaretDown","faCaretRight","values","codebase","tgs","cursor","e","window","open","focus","stopPropagation","faExclamationTriangle","Date","job","startedAt","toLocaleString","stoppedAt","startedBy","name","dmeName","commitSha","originCommitSha","minimumSecurityLevel","Object","keys","DreamDaemonSecurity","filter","v","isNaN","Number","testMerge","key","number","href","url","titleAtMerge","targetCommitSha","mergedBy","mergedAt","comment","contextType","InstanceEditContext","FieldType","StringControl","value","onChange","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","checked","NumberControl","valueAsNumber","min","max","EnumControl","parseInt","as","custom","entries","enum","noLocalize","message","defaultValues","Enum","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","innerid","tooltip","show","visibility","faInfo","newValue","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","includeAll","onSave","saveMessageId","JsonViewer","src","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","PageHelper","showGoto","gotoValue","items","maxRight","maxLeft","i","push","active","ellipsis","findPopover","onSubmit","preventDefault","_1","_2","_3","position","bottom","placement","prev"],"sourceRoot":""}