{"version":3,"file":"740.b11156a8db58861deaec.bundle.js","mappings":"+JAwBKA,EAMAC,E,uZANAD,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,MAAAA,GAAAA,Q,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,IAAAA,EAAAA,KAmDL,MAAMC,UAAiBC,EAAAA,UAGZC,YAAYC,GACfC,MAAMD,GAENE,KAAKC,MAAQ,CACTC,SAAS,EACTC,OAAQ,GACRC,SAAU,GACVC,iBAAiB,EACjBC,gBAAiB,KACjBC,gBAAiB,KACjBC,eAAgBC,EAAAA,GAAAA,SAGpBT,KAAKU,qBAAuBV,KAAKU,qBAAqBC,KAAKX,MAGjC,2BACtBY,EAAAA,EAAAA,IAAgBZ,KAAKa,QAAQC,sBAAuBC,EAAAA,GAAAA,YAC9Cf,KAAKgB,UAEXhB,KAAKiB,SAAS,CACVf,SAAS,IAIbgB,SAASC,GACbnB,KAAKiB,UAASG,IACV,MAAMjB,EAASkB,MAAMC,KAAKF,EAAUjB,QAEpC,OADAA,EAAOoB,KAAKJ,GACL,CACHhB,OAAAA,MAKS,gBACjB,IAAIS,EAAAA,EAAAA,IAAgBZ,KAAKa,QAAQC,sBAAuBC,EAAAA,GAAAA,MAAqB,CACzEf,KAAKiB,SAAS,CACVf,SAAS,IAGb,IAAIsB,EAAW,EACXpB,EAAsB,GAC1B,IAAK,IAAIqB,EAAO,EAAGA,GAAQD,IAAYC,EAAM,CACzC,MAAMC,QAAiBC,EAAAA,EAAAA,aAA2B3B,KAAKa,QAAQe,SAASC,GAAI,CACxEJ,KAAAA,IAGJ,GAAIC,EAASI,OAASC,EAAAA,EAAAA,GAIf,CACH/B,KAAKkB,SAASQ,EAASP,OACvB,MALAK,EAAWE,EAASM,QAAQC,WAE5B7B,EAAWA,EAAS8B,OAAOR,EAASM,QAAQG,SAQpD/B,EAASgC,SAAQC,GAAYA,EAAQC,4BAA6B,IAElEtC,KAAKiB,SAAS,CACVb,SAAAA,EACAF,SAAS,KAKG,iBAACqC,GACrB,IAAIC,EACAC,EACAC,EAEJ,IAAKH,EAAkBI,KAMnB,YALAC,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,4CAMhB,OAAQU,EAAkBQ,UACtB,KAAKtC,EAAAA,GAAAA,QAED,GADAgC,EAAiBF,GACZE,EAAeO,SAMhB,YALAJ,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,6CAMhBW,EAAoB,GAAEC,EAAeO,YAAYP,EAAeQ,mBAC5DR,EAAeS,UAAY,IAAM,OACjCT,EAAeU,mBAAqB,IAAM,MAC9C,MACJ,KAAK1C,EAAAA,GAAAA,IAED,GADAiC,EAAaH,GACRG,EAAWU,QAMZ,YALAR,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,+CAKhB,IAAKa,EAAWW,SAMZ,YALAT,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,4CAMhBW,EAAoB,GAAEE,EAAWU,WAAWV,EAAWY,QACnDZ,EAAWW,YACXX,EAAWa,OAAS,IAAM,MAC1Bb,EAAWc,WACXhB,GAAqB,IAAGE,EAAWe,gBAAgBf,EAAWc,YAClE,MACJ,QACI,MAAM,IAAIE,MAAM,iBAGxB1D,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMwB,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAI,CACzEkB,SAAUR,EAAkBQ,SAC5BJ,KAAMJ,EAAkBI,KACxBgB,QAASpB,EAAkBoB,QAC3BnB,iBAAAA,EACAoB,aAAcrB,EAAkBqB,aAChCC,qBAAsBtB,EAAkBsB,uBAG5C,GAAInC,EAASI,OAASC,EAAAA,EAAAA,GAAe,CACjC,MAAM+B,EAAsBpC,EAASM,QACrC8B,EAAWxB,4BAA6B,EACxC,MAAMyB,EAAc,IAAI/D,KAAKC,MAAMG,UACnC2D,EAAYxC,KAAKuC,GACjB9D,KAAKiB,SAAS,CACVb,SAAU2D,EACVzD,gBAAiBwD,EACjBzD,iBAAiB,SAGrBL,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIU,oBAACmC,GACxBrC,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMwB,QAAiBC,EAAAA,EAAAA,WAAyB3B,KAAKa,QAAQe,SAASC,GAAIQ,EAAQR,IAClF,GAAIH,EAASI,OAASC,EAAAA,EAAAA,GAAe,EACjCM,EAAUX,EAASM,SACXM,4BAA6B,EAErC,MAAMlC,EAAW,IAAIJ,KAAKC,MAAMG,UAC1B4D,EAAQ5D,EAAS6D,QAAQ5B,GAC/BjC,EAAS4D,GAAS3B,EAElBrC,KAAKiB,SAAS,CACVb,SAAAA,EACAE,gBAAiB+B,SAGrBrC,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIQ,kBAACgE,GACtBlE,KAAKiB,SAAS,CACVf,SAAS,IAGb,IAAImC,EAAUrC,KAAKC,MAAMK,gBAEzB,MAAMoB,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAI,IACtEqC,EACHrC,GAAIQ,EAAQR,KAGhB,GAAIH,EAASI,OAASC,EAAAA,EAAAA,IAClB,GAAIL,EAASM,QAAS,CAClB,MAAM5B,EAAW,IAAIJ,KAAKC,MAAMG,UAC1B4D,EAAQ5D,EAAS6D,QAAQ5B,GAE/BA,EAAUX,EAASM,QACnBK,EAAQC,4BAA6B,EAErClC,EAAS4D,GAAS3B,EAElBrC,KAAKiB,SAAS,CACVb,SAAAA,EACAE,gBAAiB+B,UAIzBrC,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIW,qBAACmC,EAAkB8B,GAC3C,IAAKA,EAAYC,YAIb,YAHAxB,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAAEjB,GAAI,+CAK5C,GAAIQ,EAAQU,WAAatC,EAAAA,GAAAA,QAAsB,CAE3C,IADY,IAAI4D,OAAO,YACdC,KAAKH,EAAYC,aAMtB,YALAxB,MACI5C,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,+CAOpB7B,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMqE,EAAc,IAAKlC,EAAQmC,UAAY,IAC7CD,EAAYhD,KAAK4C,GAEjB,MAAMzC,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAI,CACzE2C,SAAUD,EACV1C,GAAIQ,EAAQR,KAGhB,GAAIH,EAASI,OAASC,EAAAA,EAAAA,IAClB,GAAIL,EAASM,QAAS,CAClB,MAAM5B,EAAW,IAAIJ,KAAKC,MAAMG,UAC1B4D,EAAQ5D,EAAS6D,QAAQ5B,IAE/BA,EAAUX,EAASM,SACXM,4BAA6B,EAErClC,EAAS4D,GAAS3B,EAElBrC,KAAKiB,SAAS,CACVb,SAAAA,EACAE,gBAAiB+B,EACjB9B,gBAAiB8B,EAAQmC,SAASnC,EAAQmC,SAASC,OAAS,WAIpEzE,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIY,sBAACmC,EAAkB8B,GAC5CnE,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMqE,EAAc,IAAKlC,EAAQmC,UAAY,IACvCE,EAAgBH,EAAYA,EAAYN,QAAQjE,KAAKC,MAAMM,kBAEjEoE,OAAOC,OAAOF,EAAeP,GAE7B,MAAMzC,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAI,CACzE2C,SAAUD,EACV1C,GAAIQ,EAAQR,KAGhB,GAAIH,EAASI,OAASC,EAAAA,EAAAA,IAClB,GAAIL,EAASM,QAAS,CAClB,MAAM5B,EAAW,IAAIJ,KAAKC,MAAMG,UAC1B4D,EAAQ5D,EAAS6D,QAAQ5B,IAE/BA,EAAUX,EAASM,SACXM,4BAA6B,EAErClC,EAAS4D,GAAS3B,EAElBrC,KAAKiB,SAAS,CACVb,SAAAA,EACAE,gBAAiB+B,UAIzBrC,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIc,wBAACmC,EAAkB8B,GAC9C,IACKU,QACG7E,KAAKF,MAAM+C,KAAKC,cACZ,CAAEjB,GAAI,6CACN,CACIiD,YAAaX,EAAYY,KAAOZ,EAAYC,eAKxD,OAEJpE,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMqE,EAAc,IAAKlC,EAAQmC,UAAY,IACvCR,EAAQO,EAAYN,QAAQE,GAClCI,EAAYS,OAAOhB,EAAO,GAE1B,MAAMtC,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAI,CACzE2C,SAAUD,EACV1C,GAAIQ,EAAQR,KAGhB,GAAIH,EAASI,OAASC,EAAAA,EAAAA,IAClB,GAAIL,EAASM,QAAS,CAClB,MAAM5B,EAAW,IAAIJ,KAAKC,MAAMG,UAC1B4D,EAAQ5D,EAAS6D,QAAQ5B,IAE/BA,EAAUX,EAASM,SACXM,4BAA6B,EAErClC,EAAS4D,GAAS3B,EAElBrC,KAAKiB,SAAS,CACVb,SAAAA,EACAE,gBAAiB+B,EAEjB9B,gBAAiB,aAIzBP,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIU,oBAACmC,GACxB,IACKwC,QACG7E,KAAKF,MAAM+C,KAAKC,cACZ,CAAEjB,GAAI,qCACN,CAAEoD,QAAS5C,EAAQM,QAI3B,OAEJ3C,KAAKiB,SAAS,CACVf,SAAS,IAGb,MAAMwB,QAAiBC,EAAAA,EAAAA,cAA4B3B,KAAKa,QAAQe,SAASC,GAAIQ,EAAQR,IAErF,GAAIH,EAASI,OAASC,EAAAA,EAAAA,GAAe,CACjC,MAAMgC,EAAc,IAAI/D,KAAKC,MAAMG,UAC7B4D,EAAQD,EAAYE,QAAQ5B,GAClC0B,EAAYiB,OAAOhB,EAAO,GAE1BhE,KAAKiB,SAAS,CACVb,SAAU2D,EACVzD,gBAAiB,YAGrBN,KAAKkB,SAASQ,EAASP,OAG3BnB,KAAKiB,SAAS,CACVf,SAAS,IAIVgF,SACH,GAAIlF,KAAKC,MAAMC,QACX,OAAO,gBAAC,IAAD,CAASiF,KAAK,iBAGzB,MAAMC,GAAUxE,EAAAA,EAAAA,IAAgBZ,KAAKa,QAAQC,sBAAuBC,EAAAA,GAAAA,MAC9DsE,GAAYzE,EAAAA,EAAAA,IAAgBZ,KAAKa,QAAQC,sBAAuBC,EAAAA,GAAAA,QAEtE,OACI,uBAAKuE,UAAU,eACX,gBAAC,IAAD,CAAiBC,IAAKvF,KAAKC,QAC3B,0BACI,gBAAC,IAAD,CAAkB4B,GAAG,wBAExB7B,KAAKC,MAAME,OAAOqF,KAAI,CAACC,EAAKzB,KACzB,GAAKyB,EACL,OACI,gBAAC,KAAD,CACIC,IAAK1B,EACL7C,MAAOsE,EACPE,QAAS,IACL3F,KAAKiB,UAAS2E,IACV,MAAMC,EAASxE,MAAMC,KAAKsE,EAAKzF,QAE/B,OADA0F,EAAO7B,QAAS8B,EACT,CACH3F,OAAQ0F,WAOhC,uBAAKP,UAAU,mBACX,uBACIA,UAAU,YACVS,MAAO,CACHC,aAAc,OACdC,UAAW,QACXC,SAAU,QACVC,UAAW,WAEf,sBAAIb,UAAU,cACTF,EACGpF,KAAKC,MAAMG,SAASoF,IAAIxF,KAAKU,sBAE7B,gBAAC,WAAD,MAEH2E,EACG,sBAAIC,UAAU,cACV,gBAAC,IAAD,CACIc,UAAU,MACVC,OACIrG,KAAKC,MAAMG,SAASqE,OACpBzE,KAAKa,QAAQe,SAAS0E,oBAEhBR,EAEVS,QAASzG,GACL,gBAAC,IAAD,GAAS+B,GAAG,sBAAyB/B,GACjC,gBAAC,IAAD,CACI+B,GAAG,2BACH2E,OAAQ,CACJC,IAAKzG,KAAKa,QAAQe,SAAS0E,kBAK3C,gBAAC,IAAD,CACIhB,UAAU,SACVoB,SACI1G,KAAKC,MAAMG,SAASqE,QACpBzE,KAAKa,QAAQe,SAAS0E,aAE1BK,QAAS,IACL3G,KAAKiB,SAAS,CACVX,gBAAiB,KACjBC,gBAAiB,KACjBF,kBACKL,KAAKC,MAAMI,kBACZL,KAAKC,MAAMK,oBAIvB,gBAAC,IAAD,CAAiBsG,KAAMC,EAAAA,MAhB3B,OAkBI,gBAAC,IAAD,CAAkBhF,GAAG,iCAKjC,gBAAC,WAAD,QAIZ,uBACIyD,UAAU,sDACVS,MAAO,CAAEe,QAAS,SACjB9G,KAAKC,MAAMM,gBACRP,KAAK+G,sBAAqB,GAC1B/G,KAAKC,MAAMK,kBAAoBN,KAAKC,MAAMI,gBAC1CL,KAAKgH,sBAAqB,GAC1BhH,KAAKC,MAAMI,gBACXL,KAAKC,MAAMK,gBACPN,KAAK+G,sBAAqB,GAE1B/G,KAAKgH,sBAAqB,GAG9B,0BACI,gBAAC,IAAD,CAAkBnF,GAAG,uCASzCnB,qBAAqB2B,GACzB,MAAM4E,EAAWjH,KAAKC,MAAMK,kBAAoB+B,EAC1C6E,GAAmBtG,EAAAA,EAAAA,IACrBZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,eAEJ,OACI,sBAAI2E,IAAKrD,EAAQR,GAAIyD,UAAU,cAC3B,gBAAC,IAAD,CACI6B,QAASF,EAAW,YAAc,UAClCN,QAAS,IACL3G,KAAKiB,SAAS,CACVX,iBACI2G,GACCjH,KAAKC,MAAMM,iBACXP,KAAKC,MAAMI,gBAENgC,EADA,KAEV9B,gBAAiB,KACjBF,iBAAiB,IAGzBiF,UAAU,UACV,gBAAC,IAAD,CACIsB,KAAMvE,EAAQU,WAAatC,EAAAA,GAAAA,QAAuB2G,EAAAA,IAAYC,EAAAA,MAhBtE,OAkBWhF,EAAQM,MAElBuE,GAAoBD,EACjB,sBAAI3B,UAAU,cACTjD,EAAQmC,SAASgB,KAAI8B,IAClB,MAAMC,EAAkBvH,KAAKC,MAAMM,kBAAoB+G,EACvD,OACI,sBAAI5B,IAAK4B,EAAQlD,YAAakB,UAAU,cACpC,gBAAC,IAAD,CACI6B,QAASI,EAAkB,YAAc,UACzCZ,QAAS,IACL3G,KAAKiB,SAAS,CACVV,gBAAiBgH,EAAkB,KAAOD,IAGlDhC,UAAU,UACV,gBAAC,IAAD,CAAiBsB,KAAMY,EAAAA,MAR3B,OAUKF,EAAQvC,IAAO,IAAGuC,EAAQvC,OAASuC,EAAQlD,iBAK5D,sBAAIkB,UAAU,cACV,gBAAC,IAAD,CACIc,UAAU,MACVC,OACIhE,EAAQmC,SAASC,OAASpC,EAAQuB,oBAE5BkC,EAEVS,QAASzG,GACL,gBAAC,IAAD,GAAS+B,GAAG,0BAA6B/B,GACrC,gBAAC,IAAD,CACI+B,GAAG,oCACH2E,OAAQ,CAAEC,IAAKpE,EAAQuB,kBAInC,gBAAC,IAAD,CACI0B,UAAU,SACVoB,SAAUrE,EAAQmC,SAASC,QAAUpC,EAAQuB,aAC7C+C,QAAS,IACL3G,KAAKiB,SAAS,CACVV,gBAAiB,KACjBF,kBACKL,KAAKC,MAAMI,kBACZL,KAAKC,MAAMM,oBAIvB,gBAAC,IAAD,CAAiBqG,KAAMC,EAAAA,MAZ3B,OAcI,gBAAC,IAAD,CAAkBhF,GAAG,0CAMrC,gBAAC,WAAD,OAMRmF,qBAAqBS,GACzB,MAAMC,EAAsB,CACxBC,KAAMC,EAAAA,GAAAA,KACNjF,KAAM,gCACNkF,aAAc7H,KAAKC,MAAMO,eACzBsH,KAAMrH,EAAAA,GACNsH,YAAY,GAGVC,EAAgB,IACfN,EACHO,SAAWC,IACPlI,KAAKiB,SAAS,CAAET,eAAgB0H,MAIlCC,EAAe,CACjBpF,SAAU,IAAK2E,GACf/E,KAAM,CACFgF,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,4BACNyF,QAAS,iCAEbzE,QAAS,CACLgE,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,+BACNyF,QAAS,mCACTP,cAAc,GAElBjE,aAAc,CACV+D,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,6BACNyF,QAAS,iCACTC,IAAK,EACL5B,IAAK,MACLoB,aAAc,IAElBhE,qBAAsB,CAClB8D,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,iCACNyF,QAAS,qCACTC,IAAK,EACLR,aAAc,IAItB,GAAIJ,EAAK,CACL,MAAMa,EAAgB,IACfH,EACHnF,SAAU,CACN2E,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,4CACNyF,QAAS,iDAEbG,oBAAqB,CACjBZ,KAAMC,EAAAA,GAAAA,KACNjF,KAAM,6CACNyF,QAAS,iDACTP,aAAcpI,EAA2B+I,OACzCV,KAAMrI,EACNsI,YAAY,GAEhB7E,UAAW,CACPyE,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,4CACNyF,QAAS,gDACTP,cAAc,GAElB1E,mBAAoB,CAChBwE,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,+CACNyF,QAAS,mDACTP,cAAc,IAIhBY,EAAY,IACXN,EACH/E,QAAS,CACLuE,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,0CACNyF,QAAS,+CAEb9E,KAAM,CACFqE,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,uCACN0F,IAAK,EACL5B,IAAK,MACLoB,aAAc,MAElBxE,SAAU,CACNsE,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,wCAEVa,SAAU,CACNmE,KAAMC,EAAAA,GAAAA,SACNjF,KAAM,uCACNyF,QAAS,4CAEb3E,aAAc,CACVkE,KAAMC,EAAAA,GAAAA,KACNjF,KAAM,2CACNkF,aAAcnI,EAAgBgJ,KAC9BZ,KAAMpI,EACNqI,YAAY,GAEhBxE,OAAQ,CACJoE,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,sCACNyF,QAAS,4CAMjB,OAFCD,EAAapF,SAA4B2D,UAAW,EAGjD,gBAAC,WAAD,KACI,0BACI,gBAAC,IAAD,CAAkB7E,GAAG,+BAEzB,2BACA,gBAAC,KAAemG,GAChB,2BACA,gBAAC,IAAD,CACItC,IAAM,mBAAkB1F,KAAKC,MAAMO,iBACnCmI,cAAY,EACZC,YAAU,EACVC,cAAc,mCACdC,OACI9I,KAAKC,MAAMO,iBAAmBC,EAAAA,GAAAA,QACxB6H,EACAG,EAEVM,OAASxG,IACAvC,KAAKgJ,WAAWzG,OAOzC,MAAMF,EAAUrC,KAAKC,MAAMK,gBACrB2I,GAA0BrI,EAAAA,EAAAA,IAC5BZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,sBAEEmI,GAA0BtI,EAAAA,EAAAA,IAC5BZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,uBAGEoI,EAAa,IACZhB,EACH3F,iBAAkB,CACdmF,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,uCACNyF,QAAS,2CACTP,aAAcoB,EACR5G,EAAQC,2BACJD,EAAQG,iBACRxC,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,kDAEZ7B,KAAKF,MAAM+C,KAAKC,cAAc,CAC1BjB,GAAI,8CAEd6E,UAAWwC,IAIlBC,EAAWxG,KAAwBkF,aAAexF,EAAQM,KAC1DwG,EAAWxF,QAA2BkE,aAAexF,EAAQsB,QAC7DwF,EAAWvF,aAAgCiE,aAAexF,EAAQuB,aAClEuF,EAAWtF,qBAAwCgE,aAChDxF,EAAQwB,qBAEXsF,EAAWxG,KAAwB+D,WAAY9F,EAAAA,EAAAA,IAC5CZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,WAEHoI,EAAWxF,QAA2B+C,WAAY9F,EAAAA,EAAAA,IAC/CZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,cAEHoI,EAAWvF,aAAgC8C,WAAY9F,EAAAA,EAAAA,IACpDZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,mBAEHoI,EAAWtF,qBAAwC6C,WAAY9F,EAAAA,EAAAA,IAC5DZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,2BAGJ,MAAMqI,GAAYxI,EAAAA,EAAAA,IAAgBZ,KAAKa,QAAQC,sBAAuBC,EAAAA,GAAAA,QAEtE,OACI,gBAAC,WAAD,KACI,0BACI,gBAAC,IAAD,CACI6F,KAAMvE,EAAQU,WAAatC,EAAAA,GAAAA,QAAuB2G,EAAAA,IAAYC,EAAAA,MAFtE,OAIWhF,EAAQM,MAEnB,2BACEN,EAAQC,2BAqBN,gBAAC,WAAD,MApBA,gBAAC,WAAD,KACI,gBAAC,IAAD,CACI8D,UAAU,MACVC,MAAM4C,QAAkCnD,EACxCS,QAASzG,GACL,gBAAC,IAAD,GAAS+B,GAAG,2BAA8B/B,GACtC,gBAAC,IAAD,CAAkB+B,GAAG,qCAG7B,gBAAC,IAAD,CACIyD,UAAU,SACVoB,UAAWuC,EACXtC,QAAS,KAAW3G,KAAKqJ,cAAchH,KACvC,gBAAC,IAAD,CAAkBR,GAAG,gCAG7B,2BACA,4BAKR,gBAAC,IAAD,CACIiH,OAAQK,EACRJ,OAAS7E,IAAsClE,KAAKsJ,YAAYpF,MAEpE,2BACA,gBAAC,IAAD,CACIkC,UAAU,MACVC,MAAM+C,QAAoBtD,EAC1BS,QAASzG,GACL,gBAAC,IAAD,GAAS+B,GAAG,wBAA2B/B,GACnC,gBAAC,IAAD,CAAkB+B,GAAG,qCAG7B,gBAAC,IAAD,CACIyD,UAAU,SACVoB,UAAW0C,EACXjC,QAAQ,SACRR,QAAS,KAAW3G,KAAKuJ,cAAclH,KACvC,gBAAC,IAAD,CAAkBR,GAAG,iCAOjCkF,qBAAqBU,GACzB,MAAMpF,EAAUrC,KAAKC,MAAMK,gBAErB6H,EAAe,CACjBpD,IAAK,CACD4C,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,mCACNyF,QAAS,wCAEboB,eAAgB,CACZ7B,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,qCACNyF,QAAS,0CAEbqB,kBAAmB,CACf9B,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,wCACNyF,QAAS,6CAEbsB,iBAAkB,CACd/B,KAAMC,EAAAA,GAAAA,QACNjF,KAAM,uCACNyF,QAAS,6CAIXuB,GAAkB/I,EAAAA,EAAAA,IACpBZ,KAAKa,QAAQC,sBACbC,EAAAA,GAAAA,eAGJ,GAAI0G,EAAK,CACL,MAAMa,EAAgB,CAElBlE,YAAa,CACTuD,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,uCACNyF,QAAS,+CAEVD,GAEDM,EAAY,CACdrE,YAAa,CACTuD,KAAMC,EAAAA,GAAAA,OACNjF,KAAM,mCACNyF,QAAS,uCACTP,aAAc,QAEfM,GAGP,OACI,gBAAC,WAAD,KACI,0BACI,gBAAC,IAAD,CAAkBtG,GAAG,uCAEzB,2BACA,gBAAC,IAAD,CACI6D,IAAM,2BAA0BrD,EAAQU,WACxC6F,YAAU,EACVC,cAAc,sCACdC,OACIzG,EAAQU,WAAatC,EAAAA,GAAAA,QAAuB6H,EAAgBG,EAEhEM,OAAS5E,IACAnE,KAAK4J,eAAevH,EAAS8B,OAOtD,MAAMmD,EAAUtH,KAAKC,MAAMM,gBAO3B,OALC4H,EAAaqB,eAAkC3B,aAAeP,EAAQkC,eACtErB,EAAauB,iBAAoC7B,aAAeP,EAAQoC,iBACxEvB,EAAasB,kBAAqC5B,aAAeP,EAAQmC,kBACzEtB,EAAapD,IAAuB8C,aAAeP,EAAQvC,IAGxD,gBAAC,WAAD,CAAgBW,IAAKrD,EAAQmC,SAASP,QAAQqD,IAC1C,0BACKA,EAAQlD,YACRkD,EAAQvC,IAAO,KAAIuC,EAAQvC,OAAS,IAEzC,2BACA,gBAAC,IAAD,CACI+D,OAAQX,EACRY,OAAQc,IACJ,MAAM1F,EAAc,CAChBC,YAAapE,KAAKC,MAAMM,gBAAiB6D,eACtCyF,GAEF7J,KAAK8J,gBAAgBzH,EAAS8B,MAG3C,2BACA,gBAAC,IAAD,CACIiC,UAAU,MACVC,MAAMsD,QAA0B7D,EAChCS,QAASzG,GACL,gBAAC,IAAD,GAAS+B,GAAG,wBAA2B/B,GACnC,gBAAC,IAAD,CAAkB+B,GAAG,6CAG7B,gBAAC,IAAD,CACIyD,UAAU,SACVoB,UAAWiD,EACXxC,QAAQ,SACRR,QAAS,KAAW3G,KAAK+J,kBAAkB1H,EAASiF,KACpD,gBAAC,IAAD,CAAkBzF,GAAG,0CAQ7ClC,EAASqK,YAAcC,EAAAA,EACvB,WAAeC,EAAAA,EAAAA,IAAWvK","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/ChatBots.tsx"],"sourcesContent":["import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport { faComment, faHashtag, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\n\nimport ChatBotClient from \"../../../../ApiClient/ChatBotClient\";\nimport {\n    ChatBotResponse,\n    ChatBotRights,\n    ChatChannel,\n    ChatProvider\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasChatBotRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm, { InputFormField } from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum DiscordDMOutputDisplayType {\n    Always = 0,\n    OnError = 1,\n    Never = 2\n}\n\nenum IrcPasswordType {\n    Server = 0,\n    SASL = 1,\n    NickServ = 2\n}\n\ninterface ChatBotConnectionBuilder {\n    provider: ChatProvider;\n    name: string;\n    enabled: boolean;\n    channelLimit: number;\n    reconnectionInterval: number;\n}\n\ninterface ChatBotUpdate extends ChatBotConnectionBuilder {\n    connectionString: string;\n}\n\ninterface DiscordConnectionBuilder extends ChatBotConnectionBuilder {\n    botToken: string;\n    basedMeme: boolean;\n    deploymentBranding: boolean;\n    dmOutputDisplay: DiscordDMOutputDisplayType;\n}\n\ninterface IrcConnectionBuilder extends ChatBotConnectionBuilder {\n    name: string;\n    address: string;\n    port: number;\n    nickname: string;\n    useSsl: boolean;\n    passwordType: IrcPasswordType;\n    password?: string;\n}\n\ninterface ChatBot extends ChatBotResponse {\n    loadedWithConnectionString?: boolean;\n}\n\ninterface IProps extends WrappedComponentProps {}\n\ninterface IState {\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    chatBots: ChatBot[];\n    selectedAddNode: boolean;\n    selectedChatBot: ChatBot | null;\n    selectedChannel: ChatChannel | null;\n    addBotProvider: ChatProvider;\n}\n\nclass ChatBots extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            errors: [],\n            chatBots: [],\n            selectedAddNode: false,\n            selectedChatBot: null,\n            selectedChannel: null,\n            addBotProvider: ChatProvider.Discord\n        };\n\n        this.renderChatBotBrowser = this.renderChatBotBrowser.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read))\n            await this.refresh();\n        else\n            this.setState({\n                loading: false\n            });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async refresh(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read)) {\n            this.setState({\n                loading: true\n            });\n\n            let maxPages = 1;\n            let chatBots: ChatBot[] = [];\n            for (let page = 1; page <= maxPages; ++page) {\n                const response = await ChatBotClient.listChatBots(this.context.instance.id, {\n                    page\n                });\n\n                if (response.code === StatusCode.OK) {\n                    maxPages = response.payload.totalPages;\n\n                    chatBots = chatBots.concat(response.payload.content);\n                } else {\n                    this.addError(response.error);\n                    break;\n                }\n            }\n\n            // List endpoint does not pull connection string\n            chatBots.forEach(chatBot => (chatBot.loadedWithConnectionString = false));\n\n            this.setState({\n                chatBots,\n                loading: false\n            });\n        }\n    }\n\n    private async addChatBot(connectionBuilder: ChatBotConnectionBuilder): Promise<void> {\n        let connectionString: string;\n        let discordBuilder: DiscordConnectionBuilder;\n        let ircBuilder: IrcConnectionBuilder;\n\n        if (!connectionBuilder.name) {\n            alert(\n                this.props.intl.formatMessage({\n                    id: \"view.instance.chat.create.missing.name\"\n                })\n            );\n            return;\n        }\n\n        switch (connectionBuilder.provider) {\n            case ChatProvider.Discord:\n                discordBuilder = connectionBuilder as DiscordConnectionBuilder;\n                if (!discordBuilder.botToken) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.token\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${discordBuilder.botToken};${discordBuilder.dmOutputDisplay};${\n                    discordBuilder.basedMeme ? \"1\" : \"0\"\n                };${discordBuilder.deploymentBranding ? \"1\" : \"0\"}`;\n                break;\n            case ChatProvider.Irc:\n                ircBuilder = connectionBuilder as IrcConnectionBuilder;\n                if (!ircBuilder.address) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.address\"\n                        })\n                    );\n                    return;\n                }\n                if (!ircBuilder.nickname) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.nick\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${ircBuilder.address};${ircBuilder.port};${\n                    ircBuilder.nickname\n                };${ircBuilder.useSsl ? \"1\" : \"0\"}`;\n                if (ircBuilder.password)\n                    connectionString += `;${ircBuilder.passwordType};${ircBuilder.password}`;\n                break;\n            default:\n                throw new Error(\"Bad provider!\");\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.createChatBot(this.context.instance.id, {\n            provider: connectionBuilder.provider,\n            name: connectionBuilder.name,\n            enabled: connectionBuilder.enabled,\n            connectionString,\n            channelLimit: connectionBuilder.channelLimit,\n            reconnectionInterval: connectionBuilder.reconnectionInterval\n        });\n\n        if (response.code === StatusCode.OK) {\n            const newChatBot: ChatBot = response.payload;\n            newChatBot.loadedWithConnectionString = true;\n            const newChatBots = [...this.state.chatBots];\n            newChatBots.push(newChatBot);\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: newChatBot,\n                selectedAddNode: false\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async reloadChatBot(chatBot: ChatBot): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.getChatBot(this.context.instance.id, chatBot.id);\n        if (response.code === StatusCode.OK) {\n            chatBot = response.payload;\n            chatBot.loadedWithConnectionString = true;\n\n            const chatBots = [...this.state.chatBots];\n            const index = chatBots.indexOf(chatBot);\n            chatBots[index] = chatBot;\n\n            this.setState({\n                chatBots,\n                selectedChatBot: chatBot\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatBot(chatBotUpdate: ChatBotUpdate): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        let chatBot = this.state.selectedChatBot!;\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            ...chatBotUpdate,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async addChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (!chatChannel.channelData) {\n            alert(\n                this.props.intl.formatMessage({ id: \"view.instance.chat.create.missing.channel\" })\n            );\n            return;\n        }\n\n        if (chatBot.provider === ChatProvider.Discord) {\n            const reg = new RegExp(\"^[0-9]+$\");\n            if (!reg.test(chatChannel.channelData)) {\n                alert(\n                    this.props.intl.formatMessage({\n                        id: \"view.instance.chat.create.invalid.discord\"\n                    })\n                );\n                return;\n            }\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        newChannels.push(chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n                    selectedChannel: chatBot.channels[chatBot.channels.length - 1]\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const channelToEdit = newChannels[newChannels.indexOf(this.state.selectedChannel!)];\n\n        Object.assign(channelToEdit, chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.channel.confirm\" },\n                    {\n                        channelName: chatChannel.tag ?? chatChannel.channelData\n                    }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const index = newChannels.indexOf(chatChannel);\n        newChannels.splice(index, 1);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n\n                    selectedChannel: null\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatBot(chatBot: ChatBot): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.confirm\" },\n                    { botName: chatBot.name }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.deleteChatBot(this.context.instance.id, chatBot.id);\n\n        if (response.code === StatusCode.OK) {\n            const newChatBots = [...this.state.chatBots];\n            const index = newChatBots.indexOf(chatBot);\n            newChatBots.splice(index, 1);\n\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: null\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.chat\" />;\n        }\n\n        const canRead = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read);\n        const canCreate = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Create);\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.chat\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <div className=\"d-flex flex-row\">\n                    <div\n                        className=\"text-left\"\n                        style={{\n                            paddingRight: \"16px\",\n                            maxHeight: \"800px\",\n                            minWidth: \"300px\",\n                            overflowY: \"scroll\"\n                        }}>\n                        <ul className=\"browser-ul\">\n                            {canRead ? (\n                                this.state.chatBots.map(this.renderChatBotBrowser)\n                            ) : (\n                                <React.Fragment />\n                            )}\n                            {canCreate ? (\n                                <li className=\"browser-li\">\n                                    <OverlayTrigger\n                                        placement=\"top\"\n                                        show={\n                                            this.state.chatBots.length <\n                                            this.context.instance.chatBotLimit\n                                                ? false\n                                                : undefined\n                                        }\n                                        overlay={props => (\n                                            <Tooltip id=\"too-many-chat-bots\" {...props}>\n                                                <FormattedMessage\n                                                    id=\"view.instance.chat.limit\"\n                                                    values={{\n                                                        max: this.context.instance.chatBotLimit\n                                                    }}\n                                                />\n                                            </Tooltip>\n                                        )}>\n                                        <Button\n                                            className=\"nowrap\"\n                                            disabled={\n                                                this.state.chatBots.length >=\n                                                this.context.instance.chatBotLimit\n                                            }\n                                            onClick={() =>\n                                                this.setState({\n                                                    selectedChatBot: null,\n                                                    selectedChannel: null,\n                                                    selectedAddNode: !!(\n                                                        !this.state.selectedAddNode ||\n                                                        this.state.selectedChatBot\n                                                    )\n                                                })\n                                            }>\n                                            <FontAwesomeIcon icon={faPlus} />\n                                            &nbsp;\n                                            <FormattedMessage id=\"view.instance.chat.create\" />\n                                        </Button>\n                                    </OverlayTrigger>\n                                </li>\n                            ) : (\n                                <React.Fragment />\n                            )}\n                        </ul>\n                    </div>\n                    <div\n                        className=\"flex-fill flex-column text-center align-self-center\"\n                        style={{ padding: \"16px\" }}>\n                        {this.state.selectedChannel ? (\n                            this.renderAddEditChannel(false)\n                        ) : this.state.selectedChatBot && !this.state.selectedAddNode ? (\n                            this.renderAddEditChatBot(false)\n                        ) : this.state.selectedAddNode ? (\n                            this.state.selectedChatBot ? (\n                                this.renderAddEditChannel(true)\n                            ) : (\n                                this.renderAddEditChatBot(true)\n                            )\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.instance.chat.select_item\" />\n                            </h4>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderChatBotBrowser(chatBot: ChatBotResponse): React.ReactNode {\n        const selected = this.state.selectedChatBot === chatBot;\n        const canWriteChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n        return (\n            <li key={chatBot.id} className=\"browser-li\">\n                <Button\n                    variant={selected ? \"secondary\" : \"primary\"}\n                    onClick={() =>\n                        this.setState({\n                            selectedChatBot:\n                                selected &&\n                                !this.state.selectedChannel &&\n                                !this.state.selectedAddNode\n                                    ? null\n                                    : chatBot,\n                            selectedChannel: null,\n                            selectedAddNode: false\n                        })\n                    }\n                    className=\"nowrap\">\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </Button>\n                {canWriteChannels && selected ? (\n                    <ul className=\"browser-ul\">\n                        {chatBot.channels.map(channel => {\n                            const channelSelected = this.state.selectedChannel === channel;\n                            return (\n                                <li key={channel.channelData} className=\"browser-li\">\n                                    <Button\n                                        variant={channelSelected ? \"secondary\" : \"primary\"}\n                                        onClick={() =>\n                                            this.setState({\n                                                selectedChannel: channelSelected ? null : channel\n                                            })\n                                        }\n                                        className=\"nowrap\">\n                                        <FontAwesomeIcon icon={faHashtag} />\n                                        &nbsp;\n                                        {channel.tag ? `(${channel.tag})` : channel.channelData}\n                                    </Button>\n                                </li>\n                            );\n                        })}\n                        <li className=\"browser-li\">\n                            <OverlayTrigger\n                                placement=\"top\"\n                                show={\n                                    chatBot.channels.length < chatBot.channelLimit\n                                        ? false\n                                        : undefined\n                                }\n                                overlay={props => (\n                                    <Tooltip id=\"too-many-chat-channels\" {...props}>\n                                        <FormattedMessage\n                                            id=\"view.instance.chat.limit.channels\"\n                                            values={{ max: chatBot.channelLimit }}\n                                        />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    className=\"nowrap\"\n                                    disabled={chatBot.channels.length >= chatBot.channelLimit}\n                                    onClick={() =>\n                                        this.setState({\n                                            selectedChannel: null,\n                                            selectedAddNode: !!(\n                                                !this.state.selectedAddNode ||\n                                                this.state.selectedChannel\n                                            )\n                                        })\n                                    }>\n                                    <FontAwesomeIcon icon={faPlus} />\n                                    &nbsp;\n                                    <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </li>\n                    </ul>\n                ) : (\n                    <React.Fragment />\n                )}\n            </li>\n        );\n    }\n\n    private renderAddEditChatBot(add: boolean): React.ReactNode {\n        const providerFieldCommon = {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.chat.provider\",\n            defaultValue: this.state.addBotProvider,\n            enum: ChatProvider,\n            noLocalize: true\n        };\n\n        const providerField = {\n            ...providerFieldCommon,\n            onChange: (newValue: ChatProvider) => {\n                this.setState({ addBotProvider: newValue });\n            }\n        };\n\n        const fieldsCommon = {\n            provider: { ...providerFieldCommon },\n            name: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.name\",\n                tooltip: \"fields.instance.chat.name.tip\"\n            },\n            enabled: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.enabled\",\n                tooltip: \"fields.instance.chat.enabled.tip\",\n                defaultValue: true\n            },\n            channelLimit: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.limit\",\n                tooltip: \"fields.instance.chat.limit.tip\",\n                min: 0,\n                max: 65535,\n                defaultValue: 10\n            },\n            reconnectionInterval: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.reconnect\",\n                tooltip: \"fields.instance.chat.reconnect.tip\",\n                min: 0,\n                defaultValue: 5\n            }\n        };\n\n        if (add) {\n            const fieldsDiscord = {\n                ...fieldsCommon,\n                botToken: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.discord.token\",\n                    tooltip: \"fields.instance.chat.create.discord.token.tip\"\n                },\n                dmOutputDisplayType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.discord.output\",\n                    tooltip: \"fields.instance.chat.create.discord.output.tip\",\n                    defaultValue: DiscordDMOutputDisplayType.Always,\n                    enum: DiscordDMOutputDisplayType,\n                    noLocalize: true\n                },\n                basedMeme: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.discord.based\",\n                    tooltip: \"fields.instance.chat.create.discord.based.tip\",\n                    defaultValue: true\n                },\n                deploymentBranding: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.discord.branding\",\n                    tooltip: \"fields.instance.chat.create.discord.branding.tip\",\n                    defaultValue: true\n                }\n            };\n\n            const fieldsIrc = {\n                ...fieldsCommon,\n                address: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.address\",\n                    tooltip: \"fields.instance.chat.create.irc.address.tip\"\n                },\n                port: {\n                    type: FieldType.Number as FieldType.Number,\n                    name: \"fields.instance.chat.create.irc.port\",\n                    min: 1,\n                    max: 65535,\n                    defaultValue: 6697 // RFC7194\n                },\n                nickname: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.nick\"\n                },\n                password: {\n                    type: FieldType.Password as FieldType.Password,\n                    name: \"fields.instance.chat.create.irc.pass\",\n                    tooltip: \"fields.instance.chat.create.irc.pass.tip\"\n                },\n                passwordType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.irc.passtype\",\n                    defaultValue: IrcPasswordType.SASL,\n                    enum: IrcPasswordType,\n                    noLocalize: true\n                },\n                useSsl: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.irc.ssl\",\n                    tooltip: \"fields.instance.chat.create.irc.ssl.tip\"\n                }\n            };\n\n            (fieldsCommon.provider as InputFormField).disabled = true;\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create\" />\n                    </h5>\n                    <hr />\n                    <InputField {...providerField} />\n                    <hr />\n                    <InputForm\n                        key={`bot-create-form-${this.state.addBotProvider}`}\n                        hideDisabled\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.save\"\n                        fields={\n                            this.state.addBotProvider === ChatProvider.Discord\n                                ? fieldsDiscord\n                                : fieldsIrc\n                        }\n                        onSave={(connectionBuilder: ChatBotConnectionBuilder) =>\n                            void this.addChatBot(connectionBuilder)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const chatBot = this.state.selectedChatBot!;\n        const canReadConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.ReadConnectionString\n        );\n        const canEditConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteConnectionString\n        );\n\n        const fieldsEdit = {\n            ...fieldsCommon,\n            connectionString: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.edit.connection\",\n                tooltip: \"fields.instance.chat.edit.connection.tip\",\n                defaultValue: canReadConnectionString\n                    ? chatBot.loadedWithConnectionString\n                        ? chatBot.connectionString\n                        : this.props.intl.formatMessage({\n                              id: \"fields.instance.chat.edit.connection.unloaded\"\n                          })\n                    : this.props.intl.formatMessage({\n                          id: \"fields.instance.chat.edit.connection.deny\"\n                      }),\n                disabled: !canEditConnectionString\n            }\n        };\n\n        (fieldsEdit.name as InputFormField).defaultValue = chatBot.name;\n        (fieldsEdit.enabled as InputFormField).defaultValue = chatBot.enabled;\n        (fieldsEdit.channelLimit as InputFormField).defaultValue = chatBot.channelLimit;\n        (fieldsEdit.reconnectionInterval as InputFormField).defaultValue =\n            chatBot.reconnectionInterval;\n\n        (fieldsEdit.name as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteName\n        );\n        (fieldsEdit.enabled as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteEnabled\n        );\n        (fieldsEdit.channelLimit as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannelLimit\n        );\n        (fieldsEdit.reconnectionInterval as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteReconnectionInterval\n        );\n\n        const canDelete = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Delete);\n\n        return (\n            <React.Fragment>\n                <h5>\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </h5>\n                <hr />\n                {!chatBot.loadedWithConnectionString ? (\n                    <React.Fragment>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            show={canReadConnectionString ? false : undefined}\n                            overlay={props => (\n                                <Tooltip id=\"chat-bot-read-conn-perm\" {...props}>\n                                    <FormattedMessage id=\"view.instance.chat.reload.deny\" />\n                                </Tooltip>\n                            )}>\n                            <Button\n                                className=\"nowrap\"\n                                disabled={!canReadConnectionString}\n                                onClick={() => void this.reloadChatBot(chatBot)}>\n                                <FormattedMessage id=\"view.instance.chat.reload\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <br />\n                        <br />\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n                <InputForm\n                    fields={fieldsEdit}\n                    onSave={(chatBotUpdate: ChatBotUpdate) => void this.editChatBot(chatBotUpdate)}\n                />\n                <hr />\n                <OverlayTrigger\n                    placement=\"top\"\n                    show={canDelete ? false : undefined}\n                    overlay={props => (\n                        <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                            <FormattedMessage id=\"view.instance.chat.delete.deny\" />\n                        </Tooltip>\n                    )}>\n                    <Button\n                        className=\"nowrap\"\n                        disabled={!canDelete}\n                        variant=\"danger\"\n                        onClick={() => void this.deleteChatBot(chatBot)}>\n                        <FormattedMessage id=\"view.instance.chat.delete\" />\n                    </Button>\n                </OverlayTrigger>\n            </React.Fragment>\n        );\n    }\n\n    private renderAddEditChannel(add: boolean): React.ReactNode {\n        const chatBot = this.state.selectedChatBot!;\n\n        const fieldsCommon = {\n            tag: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.channel.tag\",\n                tooltip: \"fields.instance.chat.channel.tag.tip\"\n            },\n            isAdminChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.admin\",\n                tooltip: \"fields.instance.chat.channel.admin.tip\"\n            },\n            isWatchdogChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.watchdog\",\n                tooltip: \"fields.instance.chat.channel.watchdog.tip\"\n            },\n            isUpdatesChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.updates\",\n                tooltip: \"fields.instance.chat.channel.updates.tip\"\n            }\n        };\n\n        const canEditChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n\n        if (add) {\n            const fieldsDiscord = {\n                // we remap this to discord later because of uint64 memes\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.discord\",\n                    tooltip: \"fields.instance.chat.channel.discord.tip\"\n                },\n                ...fieldsCommon\n            };\n            const fieldsIrc = {\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.irc\",\n                    tooltip: \"fields.instance.chat.channel.irc.tip\",\n                    defaultValue: \"#\"\n                },\n                ...fieldsCommon\n            };\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                    </h5>\n                    <hr />\n                    <InputForm\n                        key={`bot-channel-create-form-${chatBot.provider}`}\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.channel\"\n                        fields={\n                            chatBot.provider === ChatProvider.Discord ? fieldsDiscord : fieldsIrc\n                        }\n                        onSave={(chatChannel: ChatChannel) =>\n                            void this.addChatChannel(chatBot, chatChannel)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const channel = this.state.selectedChannel!;\n\n        (fieldsCommon.isAdminChannel as InputFormField).defaultValue = channel.isAdminChannel;\n        (fieldsCommon.isUpdatesChannel as InputFormField).defaultValue = channel.isUpdatesChannel;\n        (fieldsCommon.isWatchdogChannel as InputFormField).defaultValue = channel.isWatchdogChannel;\n        (fieldsCommon.tag as InputFormField).defaultValue = channel.tag;\n\n        return (\n            <React.Fragment key={chatBot.channels.indexOf(channel)}>\n                <h5>\n                    {channel.channelData}\n                    {channel.tag ? ` (${channel.tag})` : \"\"}\n                </h5>\n                <hr />\n                <InputForm\n                    fields={fieldsCommon}\n                    onSave={chatChannelStub => {\n                        const chatChannel = {\n                            channelData: this.state.selectedChannel!.channelData,\n                            ...chatChannelStub\n                        };\n                        void this.editChatChannel(chatBot, chatChannel);\n                    }}\n                />\n                <hr />\n                <OverlayTrigger\n                    placement=\"top\"\n                    show={canEditChannels ? false : undefined}\n                    overlay={props => (\n                        <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                            <FormattedMessage id=\"view.instance.chat.delete.channel.deny\" />\n                        </Tooltip>\n                    )}>\n                    <Button\n                        className=\"nowrap\"\n                        disabled={!canEditChannels}\n                        variant=\"danger\"\n                        onClick={() => void this.deleteChatChannel(chatBot, channel)}>\n                        <FormattedMessage id=\"view.instance.chat.delete.channel\" />\n                    </Button>\n                </OverlayTrigger>\n            </React.Fragment>\n        );\n    }\n}\n\nChatBots.contextType = InstanceEditContext;\nexport default injectIntl(ChatBots);\n"],"names":["DiscordDMOutputDisplayType","IrcPasswordType","ChatBots","React","constructor","props","super","this","state","loading","errors","chatBots","selectedAddNode","selectedChatBot","selectedChannel","addBotProvider","ChatProvider","renderChatBotBrowser","bind","hasChatBotRight","context","instancePermissionSet","ChatBotRights","refresh","setState","addError","error","prevState","Array","from","push","maxPages","page","response","ChatBotClient","instance","id","code","StatusCode","payload","totalPages","concat","content","forEach","chatBot","loadedWithConnectionString","connectionBuilder","connectionString","discordBuilder","ircBuilder","name","alert","intl","formatMessage","provider","botToken","dmOutputDisplay","basedMeme","deploymentBranding","address","nickname","port","useSsl","password","passwordType","Error","enabled","channelLimit","reconnectionInterval","newChatBot","newChatBots","index","indexOf","chatBotUpdate","chatChannel","channelData","RegExp","test","newChannels","channels","length","channelToEdit","Object","assign","confirm","channelName","tag","splice","botName","render","text","canRead","canCreate","className","obj","map","err","key","onClose","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","placement","show","chatBotLimit","overlay","values","max","disabled","onClick","icon","faPlus","padding","renderAddEditChannel","renderAddEditChatBot","selected","canWriteChannels","variant","faDiscord","faComment","channel","channelSelected","faHashtag","add","providerFieldCommon","type","FieldType","defaultValue","enum","noLocalize","providerField","onChange","newValue","fieldsCommon","tooltip","min","fieldsDiscord","dmOutputDisplayType","Always","fieldsIrc","SASL","hideDisabled","includeAll","saveMessageId","fields","onSave","addChatBot","canReadConnectionString","canEditConnectionString","fieldsEdit","canDelete","reloadChatBot","editChatBot","deleteChatBot","isAdminChannel","isWatchdogChannel","isUpdatesChannel","canEditChannels","addChatChannel","chatChannelStub","editChatChannel","deleteChatChannel","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}