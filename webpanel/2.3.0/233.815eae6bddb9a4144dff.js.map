{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/ApiClient/TransferClient.ts"],"names":["ticket","response","ServerClient","headers","Accept","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","errorMessage","axiosResponse","file","e","void","ApiClient"],"mappings":"u4CAYA,QAAe,a,kOAAA,U,IAAA,I,IAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,6BACX,UAAsBA,GAGlB,IAAIC,QAFEC,gBAGN,IACID,QAAiBC,0CACb,CACIF,OAAQA,GAEZ,KACA,CACIG,QAAS,CACLC,OAAQ,gDAItB,MAAOC,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQJ,EAASS,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAUV,EAASW,OAG3B,KAAK,IACD,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,4BAAkC,CACvDC,aAAcd,EAASW,SAInC,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAef,GACjBA,SA7CT,wEAoDX,UACID,EACAiB,GAIA,IAAIhB,QAFEC,gBAGN,IACID,QAAiBC,wCACb,CAAEF,OAAQA,GACV,KACA,CACIY,KAAMK,EACNd,QAAS,CACL,eAAgB,+BAI9B,MAAOe,GACL,OAAO,IAAIZ,IAAe,CACtBC,KAAMC,UACNC,MAAOS,IAIf,OAAQjB,EAASS,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAS,OAGjB,KAAK,IACD,OAAO,IAAIL,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,mBAAyB,CAC9CK,MAAM,MAIlB,KAAK,IACD,OAAO,IAAIb,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,4BAAkC,CACvDC,aAAcd,EAASW,SAInC,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEE,cAAef,GACjBA,SA1GT,mD,iBAAA,EAAI,CAA8BmB","file":"233.815eae6bddb9a4144dff.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport { ErrorMessageResponse } from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type DownloadErrors = GenericErrors | ErrorCode.TRANSFER_NOT_AVAILABLE;\nexport type UploadErrors =\n    | GenericErrors\n    | ErrorCode.TRANSFER_NOT_AVAILABLE\n    | ErrorCode.UPLOAD_FAILED;\n\nexport default new (class TransferClient extends ApiClient {\n    public async Download(ticket: string): Promise<InternalStatus<string, DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.TransferController_Download(\n                {\n                    ticket: ticket\n                },\n                null,\n                {\n                    headers: {\n                        Accept: \"application/json, application/octet-stream\"\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: (response.data as unknown) as string\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async Upload(\n        ticket: string,\n        file: ArrayBuffer\n    ): Promise<InternalStatus<null, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.TransferController_Upload(\n                { ticket: ticket },\n                null,\n                {\n                    data: file,\n                    headers: {\n                        \"Content-Type\": \"application/octect-stream\"\n                    }\n                }\n            );\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.UPLOAD_FAILED, {\n                        void: true\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}