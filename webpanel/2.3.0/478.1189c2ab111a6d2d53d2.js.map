{"version":3,"file":"478.1189c2ab111a6d2d53d2.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n    }, [props.defaultValue]);\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n        onChange(currentValue);\n    }, [currentValue]);\n\n    const onChange = (newValue: InputFieldTypes) => {\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(newValue as boolean, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(newValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(newValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n    };\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            {props.tooltip ? (\n                                <div className=\"ml-auto\" ref={ref}>\n                                    <FontAwesomeIcon icon=\"info\" />\n                                </div>\n                            ) : null}\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n    }, []);\n\n    Object.entries(props.fields).forEach(([id, field]) => {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    });\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue == (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type])\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights\n} from \"../../../../ApiClient/generatedcode/_enums\";\nimport { InstanceUpdateRequest } from \"../../../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: []\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: this.context.instance.id\n        });\n        if (response.code === StatusCode.OK) {\n            this.context.reloadInstance();\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                <InputForm fields={fields} onSave={this.editInstance} />\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n"],"names":["FieldType","StringControl","React","props","ref","Form","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","useState","defaultValue","currentValue","setCurrentValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","innerid","newValue","basicControls","string","password","boolean","undefined","changed","InputGroup","OverlayTrigger","overlay","tooltip","Tooltip","show","triggerHandler","icon","Button","style","visibility","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","onSave","InstanceSettings","editInstance","bind","state","errors","error","this","setState","Array","from","push","instance","response","InstanceClient","context","code","StatusCode","reloadInstance","addError","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","InstanceManagerRights","path","chatBotLimit","autoUpdateInterval","configurationType","ConfigurationType","err","index","ErrorAlert","onClose","prev","newarr","contextType","InstanceEditContext","withRouter"],"sourceRoot":""}