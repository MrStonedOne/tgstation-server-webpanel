{"version":3,"file":"main.3d8f1ad315a02d6ee636.js","mappings":"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2C,SAAU,CACN3C,KAAM,YAEVmO,KAAM,CACFnO,KAAM,QAEV0Z,MAAO,CACH1Z,KAAM,UAKD8L,EAA+E,GAE/ExF,EAAY,CACrBgT,oBAAgBxa,EAChBya,qBAAiBza,EAEjBma,wBAAoBna,EACpBoa,6BAAyBpa,EAEzBob,sBAAkBpb,EAClBqb,iBAAarb,EACbsb,mBAAetb,EACfub,kBAAcvb,EACdwb,eAAgB,IAAI/Y,IAEpBgZ,YAAa,K,8GCnXbC,EAA0B,IAA4B,KACtDC,EAAqC,IAAgC,GAEzED,EAAwB7Y,KAAK,CAAC+Y,EAAOpe,GAAI,kEAAoEme,EAAqC,6WAA8W,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,2BAA2B,MAAQ,GAAG,SAAW,iOAAiO,eAAiB,CAAC,qbAAqb,WAAa,MAEjwC,O,sBCVA,IAAIjW,EAAM,CACT,eAAgB,CACf,MACA,IACA,IACA,KAED,mBAAoB,CACnB,MACA,IACA,IACA,KAED,iBAAkB,CACjB,MACA,IACA,IACA,IACA,KAED,qBAAsB,CACrB,MACA,IACA,IACA,IACA,KAED,mBAAoB,CACnB,MACA,IACA,IACA,KAED,uBAAwB,CACvB,MACA,IACA,IACA,KAED,mBAAoB,CACnB,MACA,KAED,uBAAwB,CACvB,MACA,KAED,kBAAmB,CAClB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,SAAU,CACT,MACA,KAED,aAAc,CACb,MACA,KAED,SAAU,CACT,MACA,KAED,aAAc,CACb,MACA,KAED,oBAAqB,CACpB,MACA,KAED,wBAAyB,CACxB,MACA,KAED,wBAAyB,CACxB,MACA,IACA,IACA,IAED,4BAA6B,CAC5B,MACA,IACA,IACA,IAED,yBAA0B,CACzB,MACA,IACA,KAED,6BAA8B,CAC7B,MACA,IACA,KAED,6BAA8B,CAC7B,MACA,KAED,iCAAkC,CACjC,MACA,KAED,0BAA2B,CAC1B,MACA,IACA,IACA,GACA,IACA,KAED,8BAA+B,CAC9B,MACA,IACA,IACA,GACA,IACA,KAED,kBAAmB,CAClB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,kBAAmB,CAClB,MACA,KAED,sBAAuB,CACtB,MACA,KAED,UAAW,CACV,OAED,cAAe,CACd,OAED,UAAW,CACV,MACA,KAED,cAAe,CACd,MACA,KAED,gBAAiB,CAChB,MACA,KAED,oBAAqB,CACpB,MACA,KAED,cAAe,CACd,MACA,GACA,KAED,kBAAmB,CAClB,MACA,GACA,KAED,cAAe,CACd,MACA,KAED,kBAAmB,CAClB,MACA,MAGF,SAASmW,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEtW,EAAKoW,GAC9B,OAAOzQ,QAAQC,UAAU+L,MAAK,WAC7B,IAAInN,EAAI,IAAIwB,MAAM,uBAAyBoQ,EAAM,KAEjD,MADA5R,EAAE9L,KAAO,mBACH8L,KAIR,IAAI+R,EAAMvW,EAAIoW,GAAMte,EAAKye,EAAI,GAC7B,OAAO5Q,QAAQkM,IAAI0E,EAAIrD,MAAM,GAAGlT,IAAIqW,EAAoB7R,IAAImN,MAAK,WAChE,OAAO0E,EAAoBve,MAG7Bqe,EAAoBxS,KAAO,WAAa,OAAOD,OAAOC,KAAK3D,IAC3DmW,EAAoBre,GAAK,MACzBoe,EAAOM,QAAUL,G,oBCtMjB,IAAInW,EAAM,CACT,YAAa,CACZ,KACA,MAGF,SAASmW,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEtW,EAAKoW,GAC9B,OAAOzQ,QAAQC,UAAU+L,MAAK,WAC7B,IAAInN,EAAI,IAAIwB,MAAM,uBAAyBoQ,EAAM,KAEjD,MADA5R,EAAE9L,KAAO,mBACH8L,KAIR,IAAI+R,EAAMvW,EAAIoW,GAAMte,EAAKye,EAAI,GAC7B,OAAOF,EAAoB7R,EAAE+R,EAAI,IAAI5E,MAAK,WACzC,OAAO0E,EAAoBI,EAAE3e,EAAI,OAGnCqe,EAAoBxS,KAAO,WAAa,OAAOD,OAAOC,KAAK3D,IAC3DmW,EAAoBre,GAAK,IACzBoe,EAAOM,QAAUL,G","sources":["webpack://tgstation-server-control-panel/./src/components/utils/AccessDenied.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/GenericAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobCard.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobsList.tsx","webpack://tgstation-server-control-panel/./src/components/utils/Loading.tsx","webpack://tgstation-server-control-panel/./src/components/views/Login.tsx","webpack://tgstation-server-control-panel/./src/contexts/GeneralContext.ts","webpack://tgstation-server-control-panel/./src/definitions/constants.ts","webpack://tgstation-server-control-panel/./src/App.css?d9cd","webpack://tgstation-server-control-panel/./src/components/AppNavbar.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorBoundary.tsx","webpack://tgstation-server-control-panel/./src/components/utils/Reload.tsx","webpack://tgstation-server-control-panel/./src/Router.tsx","webpack://tgstation-server-control-panel/./src/translations/Locales.ts","webpack://tgstation-server-control-panel/./src/translations/Translation.ts","webpack://tgstation-server-control-panel/./src/translations/TranslationFactory.ts","webpack://tgstation-server-control-panel/./src/App.tsx","webpack://tgstation-server-control-panel/./src/utils/icolibrary.ts","webpack://tgstation-server-control-panel/./src/index.tsx","webpack://tgstation-server-control-panel/./src/utils/RouteController.ts","webpack://tgstation-server-control-panel/./src/utils/misc.ts","webpack://tgstation-server-control-panel/./src/utils/routes.ts","webpack://tgstation-server-control-panel/./src/App.css","webpack://tgstation-server-control-panel/./src/components/views|lazy|/^\\.\\/.*$/|groupOptions: {}|namespace object","webpack://tgstation-server-control-panel/./src/translations/locales|lazy|/^\\.\\/.*\\.json$/|groupOptions: {}|namespace object"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport GenericAlert from \"./GenericAlert\";\n\ninterface IProps extends RouteComponentProps {}\n\ninterface IState {\n    auth: boolean;\n}\n\nclass AccessDenied extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const goBack = () => {\n            this.props.history.goBack();\n        };\n        return (\n            <GenericAlert title=\"generic.accessdenied\">\n                <Button variant=\"danger\" className=\"float-right\" onClick={goBack}>\n                    <FormattedMessage id=\"generic.goback\" />\n                </Button>\n            </GenericAlert>\n        );\n    }\n}\n\nexport default withRouter(AccessDenied);\n","import ClickToSelect from \"@mapbox/react-click-to-select\";\nimport React, { Component, ReactNode } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport InternalError, {\n    DescType,\n    ErrorCode\n} from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { API_VERSION, MODE, VERSION } from \"../../definitions/constants\";\n\ninterface IProps {\n    error: InternalError<ErrorCode> | undefined;\n    onClose?: () => void;\n}\n\ninterface IState {\n    popup: boolean;\n}\n\nexport default class ErrorAlert extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            popup: false\n        };\n    }\n    public render(): ReactNode {\n        if (!this.props.error) {\n            return \"\";\n        }\n\n        const handleClose = () => this.setState({ popup: false });\n        const handleOpen = () => this.setState({ popup: true });\n\n        return (\n            <Alert\n                className=\"clearfix\"\n                variant=\"error\"\n                dismissible={!!this.props.onClose}\n                onClose={this.props.onClose}>\n                <FormattedMessage id={this.props.error.code} />\n                <hr />\n\n                <Button variant=\"danger\" className=\"float-right\" onClick={handleOpen}>\n                    <FormattedMessage id=\"generic.details\" />\n                </Button>\n\n                <Modal centered show={this.state.popup} onHide={handleClose} size=\"lg\">\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id={this.props.error.code} />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className=\"text-danger pb-0\">\n                        {this.props.error.desc?.type == DescType.LOCALE ? (\n                            <FormattedMessage id={this.props.error.desc.desc} />\n                        ) : this.props.error.desc?.desc ? (\n                            this.props.error.desc.desc\n                        ) : (\n                            \"\"\n                        )}\n                        <hr />\n                        <ClickToSelect>\n                            <code className=\"bg-darker d-block pre-wrap p-2 pre-scrollable\">\n                                {`Webpanel Version: ${VERSION}\nWebpanel Mode: ${MODE}\nAPI Version: ${API_VERSION}\n\nError Code: ${this.props.error.code}\nError Description: ${this.props.error.desc ? this.props.error.desc.desc : \"No description\"}\n\nAdditional Information:\n${this.props.error.extendedInfo}`.replace(/\\\\/g, \"\\\\\\\\\")}\n                            </code>\n                        </ClickToSelect>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <span className=\"font-italic mr-auto\">\n                            <FormattedMessage id=\"generic.debugwarn\" />\n                        </span>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            <FormattedMessage id=\"generic.close\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Alert>\n        );\n    }\n}\n\nexport type ErrorState = [\n    Array<InternalError<ErrorCode> | undefined>,\n    React.Dispatch<React.SetStateAction<Array<InternalError<ErrorCode> | undefined>>>\n];\n\nfunction addError([, setErrors]: ErrorState, error: InternalError<ErrorCode>): void {\n    setErrors(prevState => {\n        const errors = Array.from(prevState);\n        errors.push(error);\n        return errors;\n    });\n}\n\nfunction displayErrors([errors, setErrors]: ErrorState): Array<JSX.Element | undefined> {\n    return errors.map((err, index) => {\n        if (!err) return;\n        return (\n            <ErrorAlert\n                key={index}\n                error={err}\n                onClose={() =>\n                    setErrors(prev => {\n                        const newarr = Array.from(prev);\n                        newarr[index] = undefined;\n                        return newarr;\n                    })\n                }\n            />\n        );\n    });\n}\n\nexport { displayErrors };\nexport { addError };\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IProps {\n    title: string;\n    body?: string;\n    children?: JSX.Element;\n}\n\nexport default function GenericAlert(props: IProps): JSX.Element {\n    return (\n        <Alert className=\"clearfix\" variant=\"error\">\n            <FormattedMessage id={props.title} />\n            {props.body ? (\n                <React.Fragment>\n                    <hr />\n                    <FormattedMessage id={props.body} />\n                </React.Fragment>\n            ) : props.children ? (\n                <React.Fragment>\n                    <hr />\n                    {props.children}\n                </React.Fragment>\n            ) : null}\n        </Alert>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Toast from \"react-bootstrap/Toast\";\nimport ToastBody from \"react-bootstrap/ToastBody\";\nimport ToastHeader from \"react-bootstrap/ToastHeader\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\n\nimport { ErrorCode as TGSErrorCode } from \"../../ApiClient/generatedcode/_enums\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\n\ninterface IState {}\ninterface IProps {\n    job: TGSJobResponse;\n    width?: string;\n    onClose?: (job: TGSJobResponse) => void;\n    onCancel: (job: TGSJobResponse) => void;\n}\n\nexport default class JobCard extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const job = this.props.job;\n        const createddate = new Date(job.startedAt);\n        const createddiff = (createddate.getTime() - Date.now()) / 1000;\n        const stoppeddate = new Date(job.stoppedAt ?? 0);\n        const stoppeddiff = (stoppeddate.getTime() - Date.now()) / 1000;\n        const variant =\n            job.errorCode !== undefined || job.exceptionDetails !== undefined\n                ? \"danger\"\n                : job.cancelled\n                ? \"warning\"\n                : job.stoppedAt\n                ? \"success\"\n                : \"info\";\n\n        return (\n            <Toast\n                className=\"mx-auto\"\n                key={job.id}\n                style={{\n                    maxWidth: this.props.width\n                }}\n                onClose={() => {\n                    if (this.props.onClose) this.props.onClose(job);\n                }}>\n                <ToastHeader\n                    closeButton={!!job.stoppedAt && !!this.props.onClose}\n                    className={`bg-${variant}`}>\n                    #{job.id}: {job.description}\n                </ToastHeader>\n                <ToastBody className=\"pt-0\">\n                    {/*STAGE*/}\n                    {job.stage ? <div className=\"mb-2\">▶{job.stage}</div> : null}\n                    {/*STARTED AT*/}\n                    <FormattedMessage id=\"app.job.started\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-started`}>\n                                {createddate.toLocaleString()}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span {...triggerHandler} ref={ref as React.Ref<HTMLSpanElement>}>\n                                <FormattedRelativeTime\n                                    value={createddiff}\n                                    numeric=\"auto\"\n                                    updateIntervalInSeconds={1}\n                                />\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n                    {/*CREATED BY*/}\n                    <FormattedMessage id=\"app.job.startedby\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-startedby`}>\n                                <FormattedMessage id=\"generic.userid\" />\n                                {job.startedBy.id}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span ref={ref as React.Ref<HTMLSpanElement>} {...triggerHandler}>\n                                {job.startedBy.name}\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n                    <br />\n                    {/*STOPPED AT*/}\n                    {job.stoppedAt ? (\n                        <React.Fragment>\n                            <FormattedMessage id=\"app.job.stopped\" />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-stopped`}>\n                                        {createddate.toLocaleString()}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        {...triggerHandler}\n                                        ref={ref as React.Ref<HTMLSpanElement>}>\n                                        <FormattedRelativeTime\n                                            value={stoppeddiff}\n                                            numeric=\"auto\"\n                                            updateIntervalInSeconds={1}\n                                        />\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    {/*STOPPED BY*/}\n                    {job.cancelledBy ? (\n                        <React.Fragment>\n                            <FormattedMessage id=\"app.job.stoppedby\" />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-createdby`}>\n                                        <FormattedMessage id=\"generic.userid\" />\n                                        {job.startedBy.id}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        ref={ref as React.Ref<HTMLSpanElement>}\n                                        {...triggerHandler}>\n                                        {job.cancelledBy!.name}\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    {(job.stoppedAt || job.cancelledBy) &&\n                    (job.errorCode !== undefined || job.exceptionDetails !== undefined) ? (\n                        <br />\n                    ) : (\n                        \"\"\n                    )}\n                    {/*ERROR*/}\n                    {job.errorCode !== undefined || job.exceptionDetails !== undefined ? (\n                        <React.Fragment>\n                            <span>\n                                <FormattedMessage id=\"view.instance.jobs.error\" />(\n                                {job.errorCode !== undefined && job.errorCode !== null\n                                    ? TGSErrorCode[job.errorCode]\n                                    : \"NoCode\"}\n                                ): {job.exceptionDetails}\n                            </span>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    <div className=\"d-flex mt-2\" style={{ height: \"1.5rem\" }}>\n                        <ProgressBar\n                            className=\"text-darker font-weight-bold flex-grow-1 h-unset\"\n                            animated={!job.stoppedAt}\n                            label={\n                                typeof job.progress === \"number\"\n                                    ? `${job.progress.toString()}%`\n                                    : undefined\n                            }\n                            now={typeof job.progress === \"number\" ? job.progress : 100}\n                            striped\n                            variant={variant}\n                        />\n                        {job.canCancel && !job.stoppedAt ? (\n                            <Button\n                                style={{ padding: \"0 1em\" }}\n                                className=\"ml-1\"\n                                variant=\"danger\"\n                                onClick={() => this.props.onCancel(job)}>\n                                <FontAwesomeIcon icon=\"times\" className=\"d-block\" />\n                            </Button>\n                        ) : null}\n                    </div>\n                </ToastBody>\n            </Toast>\n        );\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport { OverlayInjectedProps } from \"react-bootstrap/Overlay\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Rnd } from \"react-rnd\";\n\nimport { InstanceResponse } from \"../../ApiClient/generatedcode/schemas\";\nimport InstanceClient from \"../../ApiClient/InstanceClient\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { jobsWidgetOptions } from \"../../ApiClient/util/config\";\nimport JobsController from \"../../ApiClient/util/JobsController\";\nimport ErrorAlert from \"./ErrorAlert\";\nimport JobCard from \"./JobCard\";\nimport Loading from \"./Loading\";\n\ninterface IProps {\n    width?: string;\n    widget: boolean;\n}\n\ninterface IState {\n    jobs: Map<number, Map<number, TGSJobResponse>>;\n    errors: InternalError<ErrorCode>[];\n    ownerrors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    instances: Map<number, InstanceResponse>;\n}\n\nexport default class JobsList extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        widget: true\n    };\n\n    private widgetRef = React.createRef<HTMLDivElement>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n        this.onClose = this.onClose.bind(this);\n\n        this.state = {\n            jobs: JobsController.jobsByInstance,\n            errors: [],\n            ownerrors: [],\n            loading: true,\n            instances: new Map<number, InstanceResponse>()\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const ownerrors = Array.from(prevState.ownerrors);\n            ownerrors.push(error);\n            if (this.widgetRef.current) {\n                this.widgetRef.current.scrollTop = 0;\n            }\n            return {\n                ownerrors\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        JobsController.on(\"jobsLoaded\", this.handleUpdate);\n        await this.handleUpdate();\n    }\n\n    public componentWillUnmount(): void {\n        JobsController.removeListener(\"jobsLoaded\", this.handleUpdate);\n    }\n\n    public async handleUpdate(): Promise<void> {\n        const instances: InstanceResponse[] = [];\n\n        const response1 = await InstanceClient.listInstances({ pageSize: 100 });\n        if (response1.code === StatusCode.ERROR) {\n            this.addError(response1.error);\n            return;\n        } else {\n            instances.push(...response1.payload.content);\n        }\n        for (let i = 2; i <= response1.payload.totalPages; i++) {\n            const response2 = await InstanceClient.listInstances({ page: i, pageSize: 100 });\n            if (response2.code === StatusCode.ERROR) {\n                this.addError(response2.error);\n                return;\n            } else {\n                instances.push(...response2.payload.content);\n            }\n        }\n\n        const instanceMap = new Map<number, InstanceResponse>();\n        instances.forEach(instance => instanceMap.set(instance.id, instance));\n\n        this.setState({\n            jobs: JobsController.jobsByInstance,\n            errors: JobsController.errors,\n            loading: false,\n            instances: instanceMap\n        });\n    }\n\n    private async onCancel(job: TGSJobResponse) {\n        const status = await JobsController.cancelJob(job.id, error => this.addError(error));\n\n        if (!status) {\n            return;\n        }\n        JobsController.fastmode = 5;\n    }\n\n    private onClose(job: TGSJobResponse) {\n        JobsController.clearJob(job.id);\n    }\n\n    public render(): ReactNode {\n        if (!this.props.widget) return this.nested();\n\n        let totalJobs = 0;\n        for (const job of this.state.jobs.values()) {\n            totalJobs += job.size;\n        }\n\n        let display: boolean;\n        if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.NEVER) {\n            display = false;\n        } else if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.ALWAYS) {\n            display = true;\n        } else {\n            display = totalJobs > 0 || this.state.errors.length > 0;\n        }\n\n        return (\n            <div\n                style={{\n                    position: \"fixed\",\n                    top: 0,\n                    bottom: 0,\n                    right: 0,\n                    left: 0,\n                    pointerEvents: \"none\"\n                }}>\n                <Rnd\n                    className={`jobswidget ${display ? \"\" : \"invisible\"}`}\n                    style={{\n                        pointerEvents: \"auto\",\n                        bottom: 0,\n                        right: 0\n                    }}\n                    default={{\n                        width: \"30vw\",\n                        height: \"50vh\",\n                        x:\n                            document.documentElement.clientWidth -\n                            Math.min(document.documentElement.clientWidth * 0.3, 350) -\n                            20,\n                        y:\n                            document.documentElement.clientHeight -\n                            document.documentElement.clientHeight * 0.5 -\n                            20\n                    }}\n                    maxWidth={350}\n                    minHeight={50}\n                    minWidth={110}\n                    bounds=\"parent\">\n                    <div className=\"fancyscroll overflow-auto h-100\" ref={this.widgetRef}>\n                        <h5 className=\"text-center text-darker font-weight-bold\">\n                            <FormattedMessage id=\"view.instance.jobs.title\" />\n                        </h5>\n                        {this.nested()}\n                    </div>\n                </Rnd>\n            </div>\n        );\n    }\n\n    private nested(): ReactNode {\n        return (\n            <div className={this.props.widget ? \"d-sm-block\" : \"\"}>\n                {this.state.loading ? <Loading text=\"loading.instance.jobs.list\" /> : \"\"}\n                {this.state.ownerrors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.ownerrors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        ownerrors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.errors.map((error, index) => {\n                    return (\n                        <div key={index} style={{ maxWidth: this.props.widget ? 350 : \"unset\" }}>\n                            <ErrorAlert error={error} />\n                        </div>\n                    );\n                })}\n                {Array.from(this.state.jobs)\n                    .sort((a, b) => a[0] - b[0])\n                    .map(([instanceid, jobMap]) => {\n                        const renderTooltip = (instanceid: number) => {\n                            return (props: OverlayInjectedProps) => (\n                                <Tooltip id={`tooltip-instance-${instanceid}`} {...props}>\n                                    {instanceid}\n                                </Tooltip>\n                            );\n                        };\n\n                        return (\n                            <React.Fragment key={instanceid}>\n                                <div className=\"bg-dark p-2 text-center\">\n                                    <OverlayTrigger overlay={renderTooltip(instanceid)}>\n                                        <React.Fragment>\n                                            {this.state.instances.get(instanceid)?.name ??\n                                                \"Unknown\"}{\" \"}\n                                            (\n                                            <FormattedMessage\n                                                id=\"view.instance.jobs.jobtotal\"\n                                                values={{ amount: jobMap.size }}\n                                            />\n                                            )\n                                        </React.Fragment>\n                                    </OverlayTrigger>\n                                </div>\n                                {Array.from(jobMap, ([, job]) => job)\n                                    .sort((a, b) => b.id - a.id)\n                                    .map(job => (\n                                        <JobCard\n                                            job={job}\n                                            width={this.props.width}\n                                            key={job.id}\n                                            onClose={this.onClose}\n                                            onCancel={this.onCancel}\n                                        />\n                                    ))}\n                            </React.Fragment>\n                        );\n                    })}\n            </div>\n        );\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport Spinner, { SpinnerProps } from \"react-bootstrap/Spinner\";\nimport { FormattedMessage } from \"react-intl\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\nimport TransitionGroup from \"react-transition-group/TransitionGroup\";\n\ntype IProps = SpinnerProps & {\n    animation: \"border\" | \"grow\";\n    center: boolean;\n    width: number;\n    widthUnit: string;\n    className?: string;\n    text?: string;\n};\n\ninterface IState {}\n\nexport default class Loading extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        animation: \"border\",\n        width: \"50\",\n        widthUnit: \"vmin\",\n        center: true\n    };\n    public constructor(props: IProps) {\n        super(props);\n    }\n\n    public render(): ReactNode {\n        const {\n            variant,\n            animation,\n            center,\n            className,\n            width,\n            widthUnit,\n            text,\n            children,\n            ...otherprops\n        } = this.props;\n        const styles: React.CSSProperties = {\n            width: `${width}${widthUnit}`,\n            height: `${width}${widthUnit}`\n        } as React.CSSProperties;\n        return (\n            <TransitionGroup>\n                <CSSTransition\n                    appear\n                    classNames=\"anim-fade\"\n                    addEndListener={(node, done) => {\n                        node.addEventListener(\"transitionend\", done, false);\n                    }}>\n                    <div className={center ? \"text-center\" : \"\"}>\n                        <Spinner\n                            variant={variant ? variant : \"secondary\"}\n                            className={center ? `d-block mx-auto ${className ?? \"\"}` : className}\n                            style={styles}\n                            animation={animation ? animation : \"border\"}\n                            {...otherprops}\n                        />\n                        {text ? <FormattedMessage id={text} /> : \"\"}\n                        {children}\n                    </div>\n                </CSSTransition>\n            </TransitionGroup>\n        );\n    }\n}\n","import { faDiscord } from \"@fortawesome/free-brands-svg-icons/faDiscord\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons/faGithub\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { OAuthProvider } from \"../../ApiClient/generatedcode/_enums\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport CredentialsProvider from \"../../ApiClient/util/CredentialsProvider\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../../contexts/GeneralContext\";\nimport { MODE } from \"../../definitions/constants\";\nimport KeycloakLogo from \"../../images/keycloak_icon_64px.png\";\nimport TGLogo from \"../../images/tglogo-white.svg\";\nimport { RouteData } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {\n    prefillLogin?: string;\n    postLoginAction?: () => void;\n}\ninterface IState {\n    busy: boolean;\n    validated: boolean;\n    username: string;\n    password: string;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    redirectSetup?: boolean;\n}\n\nexport type NormalOauth = { provider: Exclude<OAuthProvider, OAuthProvider.TGForums>; url: string };\nexport type TGSnowflakeOauth = {\n    provider: OAuthProvider.TGForums;\n    state: string;\n    url: string;\n};\nexport type StoredOAuthData = NormalOauth | TGSnowflakeOauth;\nexport type OAuthStateStorage = Record<string, StoredOAuthData>;\n\nclass Login extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.submit = this.submit.bind(this);\n\n        console.log(RouteData.oautherrors);\n\n        this.state = {\n            busy: false,\n            validated: false,\n            username: \"\",\n            password: \"\",\n            errors: Array.from(RouteData.oautherrors)\n        };\n    }\n\n    public componentDidMount() {\n        if (MODE === \"PROD\") {\n            // noinspection ES6MissingAwait\n            void this.tryLoginDefault();\n        }\n    }\n\n    private async tryLoginDefault(): Promise<void> {\n        const response = await ServerClient.login({\n            type: CredentialsType.Password,\n            userName: \"admin\",\n            password: \"ISolemlySwearToDeleteTheDataDirectory\"\n        });\n\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                redirectSetup: true\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        const handleUsrInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handlePwdInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password: event.target.value });\n\n        if (this.state.busy || CredentialsProvider.isTokenValid()) {\n            return <Loading text=\"loading.login\" />;\n        }\n\n        if (!this.context.serverInfo) {\n            return <Loading text=\"loading.serverinfo\" />;\n        }\n\n        /*if (this.state.redirectSetup) {\n                return <Redirect to={AppRoutes.setup.link || AppRoutes.setup.route} />;\n            }*/\n\n        const providers: Record<OAuthProvider, React.ReactNode> = {\n            [OAuthProvider.GitHub]: <FontAwesomeIcon icon={faGithub} style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Discord]: (\n                <FontAwesomeIcon icon={faDiscord} style={{ width: \"1.2em\" }} />\n            ),\n            [OAuthProvider.TGForums]: <img src={TGLogo} alt=\"tglogo\" style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Keycloak]: (\n                <img src={KeycloakLogo} alt=\"keycloaklogo\" style={{ width: \"1.2em\" }} />\n            )\n        };\n\n        return (\n            <Form validated={this.state.validated} onSubmit={this.submit}>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    <Form.Group controlId=\"username\">\n                        <Form.Label>\n                            <FormattedMessage id=\"login.username\" />\n                        </Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            onChange={handleUsrInput}\n                            value={this.state.username}\n                            required\n                        />\n                    </Form.Group>\n                    <Form.Group controlId=\"password\">\n                        <Form.Label>\n                            <FormattedMessage id=\"login.password\" />\n                        </Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            onChange={handlePwdInput}\n                            value={this.state.password}\n                            required\n                        />\n                    </Form.Group>\n                    <Button type=\"submit\">\n                        <FormattedMessage id=\"login.submit\" />\n                    </Button>\n                    <hr />\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-flex flex-column align-items-stretch\">\n                            {Object.keys(this.context.serverInfo.oAuthProviderInfos ?? {}).map(\n                                provider => (\n                                    <Button\n                                        className=\"text-left my-1\"\n                                        key={provider}\n                                        onClick={() => this.startOAuth(provider as OAuthProvider)}>\n                                        {providers[provider as OAuthProvider]}\n                                        <span className=\"ml-2\">\n                                            <FormattedMessage\n                                                id=\"login.oauth\"\n                                                values={{ provider }}\n                                            />\n                                        </span>\n                                    </Button>\n                                )\n                            )}\n                        </div>\n                    </div>\n                </Col>\n            </Form>\n        );\n    }\n\n    private async startOAuth(provider: OAuthProvider): Promise<void> {\n        if (!this.context.serverInfo) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"serverInfo is null in startOAuth\")\n                })\n            );\n            return;\n        }\n\n        const stateArray = new Uint8Array(10);\n        window.crypto.getRandomValues(stateArray);\n        const state = Array.from(stateArray, dec => dec.toString(16).padStart(2, \"0\")).join(\"\");\n\n        let url: string | undefined = undefined;\n\n        const e = encodeURIComponent;\n\n        switch (provider) {\n            case OAuthProvider.Discord: {\n                url = `https://discord.com/api/oauth2/authorize?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Discord.clientId\n                )}&scope=identify&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Discord.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.GitHub: {\n                url = `https://github.com/login/oauth/authorize?client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.clientId\n                )}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.redirectUri\n                )}&state=${e(state)}&allow_signup=false`;\n                break;\n            }\n            case OAuthProvider.Keycloak: {\n                url = `${this.context.serverInfo.oAuthProviderInfos.Keycloak\n                    .serverUrl!}/protocol/openid-connect/auth?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.clientId\n                )}&scope=openid&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.TGForums: {\n                url = `https://tgstation13.org/phpBB/oauth.php?session_public_token=${e(\n                    this.context.serverInfo.oAuthProviderInfos.TGForums.clientId\n                )}`;\n                break;\n            }\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n        if (provider === OAuthProvider.TGForums) {\n            oauthdata[\"tgforums\"] = {\n                provider: provider,\n                url: this.props.location.pathname,\n                state: this.context.serverInfo.oAuthProviderInfos.TGForums.clientId\n            };\n        } else {\n            oauthdata[state] = {\n                provider: provider,\n                url: this.props.location.pathname\n            };\n        }\n\n        window.sessionStorage.setItem(\"oauth\", JSON.stringify(oauthdata));\n\n        window.location.href = url;\n\n        return new Promise(resolve => resolve());\n    }\n\n    private async submit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.setState({\n            busy: true\n        });\n        const response = await ServerClient.login({\n            type: CredentialsType.Password,\n            userName: this.state.username,\n            password: this.state.password\n        });\n        if (response.code == StatusCode.ERROR) {\n            this.setState({\n                busy: false\n            });\n            this.addError(response.error);\n        } else {\n            if (this.props.postLoginAction) {\n                this.props.postLoginAction();\n            }\n        }\n    }\n}\nLogin.contextType = GeneralContext;\nexport default withRouter(Login);\n","import React from \"react\";\n\nimport { ServerInformationResponse, UserResponse } from \"../ApiClient/generatedcode/schemas\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type GeneralContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n};\n\n//same as GeneralContext except used for components which arent loading under the router so we cant guarentee that serverInfo and user wont be null\nexport type UnsafeGeneralContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    user: UserResponse | null;\n    serverInfo: ServerInformationResponse | null;\n};\n\nexport const GeneralContext = React.createContext<GeneralContext>(\n    undefined as unknown as GeneralContext\n);\n","declare const API_VERSION: string;\ndeclare const VERSION: string;\ndeclare const MODE: \"DEV\" | \"PROD\" | \"PROD-GITHUB\";\ndeclare const DEFAULT_BASEPATH: string;\ndeclare const DEFAULT_APIPATH: string;\n\nconst _API_VERSION = API_VERSION;\nconst _VERSION = VERSION;\nconst _MODE = MODE;\nconst _DEFAULT_BASEPATH = DEFAULT_BASEPATH;\nconst _DEFAULT_APIPATH = DEFAULT_APIPATH;\n\nexport { _API_VERSION as API_VERSION };\nexport { _VERSION as VERSION };\nexport { _MODE as MODE };\nexport { _DEFAULT_BASEPATH as DEFAULT_BASEPATH };\nexport { _DEFAULT_APIPATH as DEFAULT_APIPATH };\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./App.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\n\nimport ServerClient from \"../ApiClient/ServerClient\";\nimport CredentialsProvider from \"../ApiClient/util/CredentialsProvider\";\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../contexts/GeneralContext\";\nimport { matchesPath } from \"../utils/misc\";\nimport RouteController from \"../utils/RouteController\";\nimport { AppCategories, AppRoute, AppRoutes } from \"../utils/routes\";\n\ninterface IProps extends RouteComponentProps {\n    category?: {\n        name: string;\n        key: string;\n    };\n}\n\ninterface IState {\n    loggedIn: boolean;\n    //so we dont actually use the routes but it allows us to make react update the component\n    routes: AppRoute[];\n    categories: typeof AppCategories;\n    focusedCategory: string;\n    focusTimer?: number;\n}\n\nclass AppNavbar extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.logoutClick = this.logoutClick.bind(this);\n        this.loginSuccess = this.loginSuccess.bind(this);\n        this.logout = this.logout.bind(this);\n        this.refresh = this.refresh.bind(this);\n\n        this.state = {\n            loggedIn: !!CredentialsProvider.isTokenValid(),\n            routes: [],\n            categories: AppCategories,\n            focusedCategory: this.props.category?.name ?? \"\"\n        };\n    }\n\n    private loginSuccess() {\n        this.setState({\n            loggedIn: true\n        });\n    }\n\n    private logout() {\n        this.setState({\n            loggedIn: false\n        });\n    }\n\n    private refresh(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        LoginHooks.on(\"loginSuccess\", this.loginSuccess);\n        ServerClient.on(\"logout\", this.logout);\n\n        this.setState({\n            routes: await RouteController.getRoutes()\n        });\n\n        RouteController.on(\"refresh\", this.refresh);\n    }\n\n    public componentWillUnmount(): void {\n        LoginHooks.removeListener(\"loginSuccess\", this.loginSuccess);\n        ServerClient.removeListener(\"logout\", this.logout);\n        RouteController.removeListener(\"refresh\", this.refresh);\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>): void {\n        if (\n            this.props.category !== undefined &&\n            this.props.category.key !== prevProps.category?.key\n        ) {\n            this.setState({\n                focusedCategory: this.props.category.name\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <Navbar\n                    className=\"shadow-lg\"\n                    expand={this.state.loggedIn ? \"lg\" : undefined}\n                    collapseOnSelect\n                    variant=\"dark\"\n                    bg=\"primary\">\n                    <Navbar.Brand\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.home.link ?? AppRoutes.home.route, {\n                                reload: true\n                            });\n                        }}\n                        className=\"mr-auto\">\n                        {this.renderVersion()}\n                    </Navbar.Brand>\n                    <Navbar.Toggle className=\"mr-2\" aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse className=\"text-right mr-2\" style={{ minWidth: \"0px\" }}>\n                        <Nav className=\"mr-auto overflow-auto fancyscroll\">\n                            {!this.state.loggedIn ? (\n                                <Nav.Item>\n                                    <Nav.Link\n                                        onClick={() => {\n                                            this.props.history.push(\n                                                AppRoutes.home.link ?? AppRoutes.home.route,\n                                                { reload: true }\n                                            );\n                                        }}\n                                        active={true}>\n                                        <FormattedMessage id=\"routes.login\" />\n                                    </Nav.Link>\n                                </Nav.Item>\n                            ) : (\n                                Object.values(this.state.categories).map(cat => {\n                                    if (!cat.leader.cachedAuth) return;\n                                    return (\n                                        <div\n                                            key={cat.name}\n                                            className=\"d-flex\"\n                                            onMouseEnter={() => {\n                                                const timer = window.setTimeout(() => {\n                                                    this.setState({\n                                                        focusedCategory: cat.name,\n                                                        focusTimer: undefined\n                                                    });\n                                                }, 130);\n                                                this.setState({\n                                                    focusTimer: timer\n                                                });\n                                            }}\n                                            onMouseLeave={() => {\n                                                window.clearTimeout(this.state.focusTimer);\n                                                this.setState({\n                                                    focusTimer: undefined\n                                                });\n                                            }}\n                                            onClick={() => {\n                                                window.clearTimeout(this.state.focusTimer);\n                                                this.setState({\n                                                    focusedCategory: cat.name,\n                                                    focusTimer: undefined\n                                                });\n                                            }}>\n                                            <Nav.Item>\n                                                <Nav.Link\n                                                    onClick={() => {\n                                                        this.props.history.push(\n                                                            cat.leader.link ?? cat.leader.route,\n                                                            { reload: true }\n                                                        );\n                                                    }}\n                                                    active={matchesPath(\n                                                        this.props.location.pathname,\n                                                        cat.leader.route,\n                                                        !cat.leader.navbarLoose\n                                                    )}>\n                                                    <FormattedMessage id={cat.leader.name} />\n                                                </Nav.Link>\n                                            </Nav.Item>\n                                            {Object.values(cat.routes).filter(\n                                                value => value.cachedAuth\n                                            ).length >= 2 ? (\n                                                <CSSTransition\n                                                    in={this.state.focusedCategory === cat.name}\n                                                    classNames=\"anim-collapse\"\n                                                    className=\"nowrap anim-collapse-all\"\n                                                    addEndListener={(node, done) => {\n                                                        node.addEventListener(\n                                                            \"transitionend\",\n                                                            done,\n                                                            false\n                                                        );\n                                                    }}\n                                                    onMouseEnter={() => {\n                                                        this.setState({\n                                                            focusedCategory: cat.name\n                                                        });\n                                                    }}>\n                                                    <div>\n                                                        <Nav>\n                                                            <div className=\"py-2 d-none d-lg-inline\">\n                                                                <FontAwesomeIcon icon=\"angle-right\" />\n                                                            </div>\n                                                            <Nav className=\"bg-darkblue mx-1 rounded\">\n                                                                {cat.routes.map(val => {\n                                                                    if (val.catleader) return; //we already display this but differently\n                                                                    if (!val.cachedAuth) return;\n                                                                    if (!val.visibleNavbar) return;\n\n                                                                    return (\n                                                                        <Nav.Item key={val.name}>\n                                                                            <Nav.Link\n                                                                                onClick={() => {\n                                                                                    this.props.history.push(\n                                                                                        val.link ??\n                                                                                            val.route,\n                                                                                        {\n                                                                                            reload: true\n                                                                                        }\n                                                                                    );\n                                                                                }}\n                                                                                active={matchesPath(\n                                                                                    this.props\n                                                                                        .location\n                                                                                        .pathname,\n                                                                                    val.route,\n                                                                                    !val.navbarLoose\n                                                                                )}>\n                                                                                <FormattedMessage\n                                                                                    id={val.name}\n                                                                                />\n                                                                            </Nav.Link>\n                                                                        </Nav.Item>\n                                                                    );\n                                                                })}\n\n                                                                <div className=\"py-2 d-none d-lg-inline mr-1\">\n                                                                    <FontAwesomeIcon icon=\"grip-lines-vertical\" />\n                                                                </div>\n                                                            </Nav>\n                                                        </Nav>\n                                                    </div>\n                                                </CSSTransition>\n                                            ) : (\n                                                \"\"\n                                            )}\n                                        </div>\n                                    );\n                                })\n                            )}\n                        </Nav>\n                        {this.renderUser()}\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n\n    private renderVersion(): React.ReactNode {\n        if (!this.context.serverInfo?.version) {\n            return <FormattedMessage id=\"loading.loading\" />;\n        }\n\n        return (\n            <React.Fragment>\n                <FormattedMessage id=\"generic.appname\" />\n                {\" v\"}\n                {this.context.serverInfo.version}\n            </React.Fragment>\n        );\n    }\n\n    private renderUser(): React.ReactNode {\n        if (!this.state.loggedIn)\n            return (\n                <React.Fragment>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.config.link ?? AppRoutes.config.route,\n                                { reload: true }\n                            );\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"cogs\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.info.link ?? AppRoutes.info.route, {\n                                reload: true\n                            });\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </Button>\n                </React.Fragment>\n            );\n\n        return (\n            <Nav.Item className=\"ml-auto\">\n                <Dropdown>\n                    <Dropdown.Toggle\n                        id=\"user-dropdown\"\n                        type=\"button\"\n                        variant=\"primary\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\">\n                        {this.context.user ? (\n                            this.context.user.name\n                        ) : (\n                            <FormattedMessage id=\"loading.loading\" />\n                        )}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu alignRight className=\"text-right\">\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.info.link ?? AppRoutes.info.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.info\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.config.link ?? AppRoutes.config.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.config\" />\n                        </Dropdown.Item>\n                        {AppRoutes.passwd.cachedAuth ? (\n                            <Dropdown.Item\n                                onClick={() => {\n                                    this.props.history.push(\n                                        AppRoutes.passwd.link ?? AppRoutes.passwd.route,\n                                        { reload: true }\n                                    );\n                                }}>\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Dropdown.Item>\n                        ) : (\n                            \"\"\n                        )}\n                        <Dropdown.Item\n                            onClick={() => {\n                                ServerClient.emit(\"purgeCache\");\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.purgecache\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.refresh\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={this.logoutClick}>\n                            <FormattedMessage id=\"navbar.logout\" />\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Nav.Item>\n        );\n    }\n\n    private logoutClick(): void {\n        ServerClient.logout();\n    }\n}\nAppNavbar.contextType = GeneralContext;\nexport default withRouter(AppNavbar);\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    error?: Error;\n    errorInfo?: React.ErrorInfo;\n}\n\nclass ErrorBoundary extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {};\n    }\n\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.props.location.key !== prevProps.location.key) {\n            this.setState({\n                error: undefined,\n                errorInfo: undefined\n            });\n        }\n    }\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.setState({\n            error,\n            errorInfo\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.error) {\n            return (\n                <Container className=\"mt-5 mb-5\">\n                    <Card className=\"bg-transparent\" border=\"danger\">\n                        <Card.Header className=\"bg-danger\">\n                            <FormattedMessage id=\"error.somethingwentwrong\" />\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Title>\n                                {this.state.error.name}: {this.state.error.message}\n                            </Card.Title>\n                            <Card.Text as={\"pre\"} className=\"bg-transparent text-danger\">\n                                <code>\n                                    {`Webpanel Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nStack trace: ${\n                                        this.state.errorInfo?.componentStack ??\n                                        \"Unable to get stack info\"\n                                    }`}\n                                </code>\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            );\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default withRouter(ErrorBoundary);\n","import { Component, ReactNode } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\ninterface IProps\n    extends RouteComponentProps<\n        Record<string, string>,\n        {\n            statusCode?: number;\n        },\n        { reload?: boolean }\n    > {}\ninterface IState {\n    clear: boolean;\n}\n\nclass Reload extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            clear: false\n        };\n    }\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.state.clear) {\n            this.setState({\n                clear: false\n            });\n            return;\n        }\n        if (\n            prevProps.match.path == this.props.match.path &&\n            prevProps.location.key != this.props.location.key &&\n            this.props.location.state?.reload\n        ) {\n            this.setState({\n                clear: true\n            });\n        }\n    }\n\n    public render(): ReactNode {\n        return this.state.clear ? \"\" : this.props.children;\n    }\n}\n\nexport default withRouter(Reload);\n","import loadable, { LoadableComponent } from \"@loadable/component\";\nimport * as React from \"react\";\nimport { Component, ComponentClass, ReactNode } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { OAuthProvider } from \"./ApiClient/generatedcode/_enums\";\nimport { CredentialsType } from \"./ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"./ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"./ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport AccessDenied from \"./components/utils/AccessDenied\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport Loading from \"./components/utils/Loading\";\nimport Reload from \"./components/utils/Reload\";\nimport Login, { OAuthStateStorage } from \"./components/views/Login\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { MODE } from \"./definitions/constants\";\nimport { matchesPath } from \"./utils/misc\";\nimport RouteController from \"./utils/RouteController\";\nimport { AppRoute, AppRoutes, RouteData } from \"./utils/routes\";\n\ninterface IState {\n    loading: boolean;\n    routes: Array<AppRoute>;\n    components: Map<string, LoadableComponent<unknown>>;\n}\ninterface IProps extends RouteComponentProps {\n    loggedIn: boolean;\n    selectCategory: (category: string) => void;\n}\n\nconst LoadSpin = (page: string) => (\n    <Loading text={\"loading.page\"}>\n        <FormattedMessage id={page} />\n    </Loading>\n);\n\nconst NotFound = loadable(() => import(\"./components/utils/NotFound\"), {\n    fallback: LoadSpin(\"loading.page.notfound\")\n});\n\nclass Router extends Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.refreshListener = this.refreshListener.bind(this);\n\n        const components = new Map<string, LoadableComponent<unknown>>();\n\n        const routes = RouteController.getImmediateRoutes(false);\n        routes.forEach(route => {\n            components.set(\n                route.name,\n                //*should* always be a react component\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                loadable(() => import(`./components/views/${route.file}`), {\n                    fallback: LoadSpin(route.name)\n                })\n            );\n        });\n\n        this.state = {\n            loading: !!new URLSearchParams(window.location.search).get(\"state\"),\n            routes: RouteController.getImmediateRoutes(false),\n            components: components\n        };\n    }\n\n    private refreshListener(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount() {\n        RouteController.on(\"refreshAll\", this.refreshListener);\n\n        this.props.history.listen(location => {\n            void this.listener(location.pathname);\n        });\n        this.listener(this.props.location.pathname);\n\n        const URLSearch = new URLSearchParams(window.location.search);\n        const state = URLSearch.get(\"state\");\n        if (!state) {\n            this.setState({\n                loading: false\n            });\n            return;\n        }\n\n        if (MODE === \"PROD\") {\n            window.history.replaceState(null, document.title, window.location.pathname);\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n\n        const oauthstate = oauthdata[state];\n        if (!oauthstate) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`State(${state}) cannot be resolved to a provider.`)\n                })\n            );\n        }\n\n        let code = URLSearch.get(\"code\");\n        if (oauthstate.provider === OAuthProvider.TGForums) {\n            code = oauthstate.state;\n        }\n\n        if (!code) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`Code not found.`)\n                })\n            );\n        }\n        this.props.history.replace(oauthstate.url);\n\n        const response = await ServerClient.login({\n            type: CredentialsType.OAuth,\n            provider: oauthstate.provider,\n            token: code\n        });\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                loading: false\n            });\n        } else {\n            return this.setErrorAndEnd(response.error);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        RouteController.removeListener(\"refreshAll\", this.refreshListener);\n    }\n\n    private setErrorAndEnd(error: InternalError<ErrorCode>) {\n        RouteData.oautherrors = [error];\n        this.setState({\n            loading: false\n        });\n    }\n\n    private listener(location: string) {\n        const routes = RouteController.getImmediateRoutes(false);\n        for (const route of routes) {\n            if (route.category && route.navbarLoose && matchesPath(location, route.route)) {\n                this.props.selectCategory(route.category);\n                break;\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.app\" />;\n        }\n\n        return (\n            <ErrorBoundary>\n                <Reload>\n                    <div>\n                        <Switch>\n                            {this.state.routes.map(route => {\n                                if (!route.loginless && !this.props.loggedIn) return;\n\n                                return (\n                                    <Route\n                                        exact={!route.loose}\n                                        path={route.route}\n                                        key={route.name}\n                                        render={props => {\n                                            let Comp;\n\n                                            if (!route.cachedAuth) {\n                                                Comp = AccessDenied;\n                                            } else {\n                                                Comp = this.state.components.get(\n                                                    route.name\n                                                )! as ComponentClass;\n                                            }\n\n                                            return !this.context?.user && !route.loginless ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no user in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : //Yeah I have no excuse for this, I didn't want to implement a route config option\n                                            // to allow a single route to work without server info so i added it as a check here\n                                            !this.context?.serverInfo &&\n                                              route != AppRoutes.config ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no server info in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : route.noContainer ? (\n                                                <React.Fragment>\n                                                    <Comp {...props} />\n                                                </React.Fragment>\n                                            ) : (\n                                                <Container className=\"mt-5 mb-5\">\n                                                    <Comp {...props} />\n                                                </Container>\n                                            );\n                                        }}\n                                    />\n                                );\n                            })}\n                            <Container className=\"mt-5 mb-5\">\n                                <Route key=\"notfound\">\n                                    {this.props.loggedIn ? <NotFound /> : <Login />}\n                                </Route>\n                            </Container>\n                        </Switch>\n                    </div>\n                </Reload>\n            </ErrorBoundary>\n        );\n    }\n}\nRouter.contextType = GeneralContext;\nexport default withRouter(Router);\n","class Locales {\n    public static readonly en: string = \"en\";\n}\n\nexport default Locales;\n","import ILocalization from \"./ILocalization\";\nimport ITranslation from \"./ITranslation\";\n\nexport default class Translation implements ITranslation {\n    public constructor(public readonly locale: string, public readonly messages: ILocalization) {}\n}\n","import ITranslation from \"./ITranslation\";\nimport ITranslationFactory from \"./ITranslationFactory\";\nimport Locales from \"./Locales\";\nimport Translation from \"./Translation\";\n\nclass TranslationFactory implements ITranslationFactory {\n    private static readonly fallbackLocale: string = Locales.en;\n\n    private static getShortHandedLocale(locale: string): string {\n        return locale.split(\"-\")[0];\n    }\n\n    public async loadTranslation(locale: string): Promise<ITranslation> {\n        //fancy type annotations but its just load the json file in this variable as a map of strings to strings\n        const localization: { [key: string]: string } = (await import(\n            `./locales/${locale}.json`\n        )) as { [key: string]: string };\n\n        if (!localization) {\n            let shortHandedLocale = TranslationFactory.getShortHandedLocale(locale);\n            if (shortHandedLocale === locale) {\n                if (shortHandedLocale === TranslationFactory.fallbackLocale)\n                    throw new Error(\"Invalid locale: \" + locale);\n                shortHandedLocale = TranslationFactory.fallbackLocale;\n            }\n            return await this.loadTranslation(shortHandedLocale);\n        }\n\n        let model: ITranslation | null = null;\n        try {\n            model = new Translation(locale, localization);\n        } catch (e) {\n            throw Error(`Error loading localization for locale '${locale}': ${JSON.stringify(e)}`);\n        }\n\n        return model;\n    }\n}\n\nexport default TranslationFactory;\n","import \"./App.css\";\n\nimport * as React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage, IntlProvider } from \"react-intl\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { CredentialsType } from \"./ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"./ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"./ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport UserClient from \"./ApiClient/UserClient\";\nimport CredentialsProvider from \"./ApiClient/util/CredentialsProvider\";\nimport LoginHooks from \"./ApiClient/util/LoginHooks\";\nimport AppNavbar from \"./components/AppNavbar\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport JobsList from \"./components/utils/JobsList\";\nimport Loading from \"./components/utils/Loading\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { DEFAULT_BASEPATH } from \"./definitions/constants\";\nimport Router from \"./Router\";\nimport ITranslation from \"./translations/ITranslation\";\nimport ITranslationFactory from \"./translations/ITranslationFactory\";\nimport TranslationFactory from \"./translations/TranslationFactory\";\n\ninterface IState {\n    translation?: ITranslation;\n    translationError?: string;\n    loggedIn: boolean;\n    loading: boolean;\n    GeneralContextInfo: UnsafeGeneralContext;\n}\n\ninterface IProps {\n    readonly locale: string;\n    readonly translationFactory?: ITranslationFactory;\n}\n\ninterface InnerProps {\n    loading: boolean;\n    loggedIn: boolean;\n}\n\ninterface InnerState {\n    passdownCat?: { name: string; key: string };\n}\n\nclass InnerApp extends React.Component<InnerProps, InnerState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: InnerProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount() {\n        //I can't be assed to remember the default admin password\n        document.addEventListener(\"keydown\", function (event) {\n            if (event.key == \"L\" && event.ctrlKey && event.shiftKey) {\n                //alert(\"ISolemlySwearToDeleteTheDataDirectory\");\n                ServerClient.logout();\n                void ServerClient.login({\n                    type: CredentialsType.Password,\n                    userName: \"admin\",\n                    password: \"ISolemlySwearToDeleteTheDataDirectory\"\n                });\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <BrowserRouter basename={DEFAULT_BASEPATH}>\n                <ErrorBoundary>\n                    <AppNavbar category={this.state.passdownCat} />\n                    {this.props.loading ? (\n                        <Container className=\"mt-5 mb-5\">\n                            <Loading text=\"loading.app\" />\n                        </Container>\n                    ) : (\n                        <React.Fragment>\n                            <Container className=\"mt-5\">\n                                <Alert variant=\"warning\" className=\"d-block d-lg-none\">\n                                    <Alert.Heading>\n                                        <FormattedMessage id=\"warning.screensize.header\" />\n                                    </Alert.Heading>\n                                    <hr />\n                                    <FormattedMessage id=\"warning.screensize\" />\n                                </Alert>\n                                {[...this.context.errors.values()].map((value, idx) => {\n                                    return (\n                                        <ErrorAlert\n                                            error={value}\n                                            key={idx}\n                                            onClose={() => this.context.deleteError(value)}\n                                        />\n                                    );\n                                })}\n                            </Container>\n                            <Router\n                                loggedIn={this.props.loggedIn}\n                                selectCategory={cat => {\n                                    this.setState({\n                                        passdownCat: {\n                                            name: cat,\n                                            key: Math.random().toString()\n                                        }\n                                    });\n                                }}\n                            />\n                        </React.Fragment>\n                    )}\n                    {this.props.loggedIn ? <JobsList /> : null}\n                </ErrorBoundary>\n            </BrowserRouter>\n        );\n    }\n}\nInnerApp.contextType = GeneralContext;\n\nclass App extends React.Component<IProps, IState> {\n    private readonly translationFactory: ITranslationFactory;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.finishLogin = this.finishLogin.bind(this);\n        this.finishLogout = this.finishLogout.bind(this);\n        this.updateContextUser = this.updateContextUser.bind(this);\n        this.updateContextServer = this.updateContextServer.bind(this);\n        this.deleteGeneralContextError = this.deleteGeneralContextError.bind(this);\n\n        this.translationFactory = this.props.translationFactory ?? new TranslationFactory();\n\n        this.state = {\n            loggedIn: !!CredentialsProvider.isTokenValid(),\n            loading: true,\n            GeneralContextInfo: {\n                errors: new Set(),\n                user: null,\n                serverInfo: null,\n                deleteError: this.deleteGeneralContextError\n            }\n        };\n    }\n\n    private async updateContextUser() {\n        const response = await UserClient.getCurrentUser();\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    GeneralContextInfo: {\n                        errors: prev.GeneralContextInfo.errors,\n                        user: response.payload,\n                        serverInfo: prev.GeneralContextInfo.serverInfo,\n                        deleteError: prev.GeneralContextInfo.deleteError\n                    }\n                };\n            });\n        } else {\n            if (response.error.code === ErrorCode.HTTP_ACCESS_DENIED) {\n                this.setState(prev => {\n                    return {\n                        GeneralContextInfo: {\n                            user: null,\n                            serverInfo: prev.GeneralContextInfo.serverInfo,\n                            deleteError: prev.GeneralContextInfo.deleteError,\n                            errors: prev.GeneralContextInfo.errors\n                        }\n                    };\n                });\n            } else {\n                setTimeout(() => void this.updateContextUser(), 5000);\n                this.setState(prev => {\n                    const newSet = new Set(prev.GeneralContextInfo.errors);\n                    newSet.add(response.error);\n                    return {\n                        GeneralContextInfo: {\n                            errors: newSet,\n                            deleteError: prev.GeneralContextInfo.deleteError,\n                            user: null,\n                            serverInfo: prev.GeneralContextInfo.serverInfo\n                        }\n                    };\n                });\n            }\n        }\n    }\n\n    private async updateContextServer() {\n        const response = await ServerClient.getServerInfo();\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    GeneralContextInfo: {\n                        errors: prev.GeneralContextInfo.errors,\n                        user: prev.GeneralContextInfo.user,\n                        serverInfo: response.payload,\n                        deleteError: prev.GeneralContextInfo.deleteError\n                    }\n                };\n            });\n        } else {\n            setTimeout(() => void this.updateContextServer(), 5000);\n            this.setState(prev => {\n                const newSet = new Set(prev.GeneralContextInfo.errors);\n                newSet.add(response.error);\n                return {\n                    GeneralContextInfo: {\n                        errors: newSet,\n                        deleteError: prev.GeneralContextInfo.deleteError,\n                        user: prev.GeneralContextInfo.user,\n                        serverInfo: null\n                    }\n                };\n            });\n        }\n    }\n\n    public deleteGeneralContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.GeneralContextInfo.errors);\n            newSet.delete(error);\n            return {\n                GeneralContextInfo: {\n                    deleteError: prev.GeneralContextInfo.deleteError,\n                    user: prev.GeneralContextInfo.user,\n                    serverInfo: prev.GeneralContextInfo.serverInfo,\n                    errors: newSet\n                }\n            };\n        });\n    }\n\n    private finishLogin() {\n        console.log(\"Logging in\");\n\n        void UserClient.getCurrentUser(); //preload the user, we dont particularly care about the content, just that its preloaded\n        void this.updateContextUser();\n        this.setState({\n            loggedIn: true,\n            loading: false\n        });\n    }\n\n    private finishLogout() {\n        this.setState({\n            loggedIn: false\n        });\n\n        void this.updateContextUser();\n    }\n    public async componentDidMount(): Promise<void> {\n        LoginHooks.on(\"loginSuccess\", this.finishLogin);\n        ServerClient.on(\"logout\", this.finishLogout);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.on(\"purgeCache\", this.updateContextServer);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.on(\"purgeCache\", this.updateContextUser);\n\n        await this.loadTranslation();\n        await ServerClient.initApi();\n        await this.updateContextServer();\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        LoginHooks.removeListener(\"loginSuccess\", this.finishLogin);\n        ServerClient.removeListener(\"logout\", this.finishLogout);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.removeListener(\"purgeCache\", this.updateContextServer);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.removeListener(\"purgeCache\", this.updateContextUser);\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.translationError != null)\n            return <p className=\"App-error\">{this.state.translationError}</p>;\n\n        if (this.state.translation == null) return <Loading>Loading translations...</Loading>;\n        return (\n            <IntlProvider\n                locale={this.state.translation.locale}\n                messages={this.state.translation.messages}>\n                <GeneralContext.Provider value={this.state.GeneralContextInfo as GeneralContext}>\n                    <InnerApp loading={this.state.loading} loggedIn={this.state.loggedIn} />\n                </GeneralContext.Provider>\n            </IntlProvider>\n        );\n    }\n\n    private async loadTranslation(): Promise<void> {\n        console.time(\"LoadTranslations\");\n        try {\n            const translation = await this.translationFactory.loadTranslation(this.props.locale);\n            this.setState({\n                translation\n            });\n        } catch (error) {\n            this.setState({\n                translationError: JSON.stringify(error) ?? \"An unknown error occurred\"\n            });\n\n            return;\n        }\n        console.timeEnd(\"LoadTranslations\");\n    }\n}\n\nexport default App;\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faDiscord, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faGitAlt } from \"@fortawesome/free-brands-svg-icons/faGitAlt\";\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons/faAngleRight\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons/faCheck\";\nimport { faCodeBranch } from \"@fortawesome/free-solid-svg-icons/faCodeBranch\";\nimport { faCogs } from \"@fortawesome/free-solid-svg-icons/faCogs\";\nimport { faComments } from \"@fortawesome/free-solid-svg-icons/faComments\";\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons/faExclamationCircle\";\nimport { faFolderOpen } from \"@fortawesome/free-solid-svg-icons/faFolderOpen\";\nimport { faGripLinesVertical } from \"@fortawesome/free-solid-svg-icons/faGripLinesVertical\";\nimport { faHammer } from \"@fortawesome/free-solid-svg-icons/faHammer\";\nimport { faHdd } from \"@fortawesome/free-solid-svg-icons/faHdd\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons/faHome\";\nimport { faInfo } from \"@fortawesome/free-solid-svg-icons/faInfo\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons/faInfoCircle\";\nimport { faKey } from \"@fortawesome/free-solid-svg-icons/faKey\";\nimport { faListUl } from \"@fortawesome/free-solid-svg-icons/faListUl\";\nimport { faLock } from \"@fortawesome/free-solid-svg-icons/faLock\";\nimport { faPen } from \"@fortawesome/free-solid-svg-icons/faPen\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons/faPlus\";\nimport { faQuestion } from \"@fortawesome/free-solid-svg-icons/faQuestion\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons/faSearch\";\nimport { faServer } from \"@fortawesome/free-solid-svg-icons/faServer\";\nimport { faStream } from \"@fortawesome/free-solid-svg-icons/faStream\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons/faSync\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons/faTimes\";\nimport { faTools } from \"@fortawesome/free-solid-svg-icons/faTools\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons/faTrash\";\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons/faUndo\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons/faUser\";\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons/faUsers\";\nimport { faUserSlash } from \"@fortawesome/free-solid-svg-icons/faUserSlash\";\n\nexport default function (): void {\n    library.add(\n        faCheck,\n        faTimes,\n        faExclamationCircle,\n        faUser,\n        faUserSlash,\n        faHdd,\n        faSync,\n        faPlus,\n        faQuestion,\n        faHome,\n        faTools,\n        faCogs,\n        faUndo,\n        faInfo,\n        faGripLinesVertical,\n        faAngleRight,\n        faKey,\n        faPen,\n        faGithub,\n        faDiscord,\n        faTrash,\n        faInfoCircle,\n        faGitAlt,\n        faHammer,\n        faListUl,\n        faComments,\n        faFolderOpen,\n        faUsers,\n        faCodeBranch,\n        faSearch,\n        faServer,\n        faStream,\n        faLock\n    );\n}\n","//definition files\nimport \"./custom.d\";\n//css\nimport \"./styles/dark.scss\";\n//polyfills\nimport \"@formatjs/intl-relativetimeformat/polyfill\";\nimport \"@formatjs/intl-relativetimeformat/locale-data/en\";\nimport \"@formatjs/intl-pluralrules/polyfill\";\nimport \"@formatjs/intl-pluralrules/locale-data/en\";\n\nimport * as React from \"react\";\nimport { render as ReactDOMRender } from \"react-dom\";\n\nimport ConfigController from \"./ApiClient/util/ConfigController\";\nimport JobsController from \"./ApiClient/util/JobsController\";\nimport App from \"./App\";\nimport { MODE, VERSION } from \"./definitions/constants\";\nimport Locales from \"./translations/Locales\";\nimport initIcons from \"./utils/icolibrary\";\n\ninitIcons();\nConfigController.loadconfig();\nJobsController.init();\n\nif (window.loadedChannelFromWebpack && MODE !== \"DEV\") {\n    alert(\n        \"Warning: channel.json was served from bundled files instead of TGS, the webpanel is running from the local version instead of the github update repo.\\nPlease report this to your server host.\\nIf you are the server host, please report this to alexkar598#2712 on discord\\n\\nWebpanel version: \" +\n            VERSION\n    );\n}\n\n//At some point, the webpanel had the ability to save passwords, this is however,\n// insecure as compromised webhosts can lead to code being served from an untrusted source,\n// leaking the saved password. Makes sure it's not there anymore\ntry {\n    window.localStorage.removeItem(\"username\");\n    window.sessionStorage.removeItem(\"username\");\n    window.localStorage.removeItem(\"password\");\n    window.sessionStorage.removeItem(\"password\");\n} catch {\n    (() => {})();\n}\n\nconst rootNode = document.getElementById(\"root\") as HTMLElement;\nconst appTsx = (\n    <React.StrictMode>\n        <App locale={Locales.en} />\n    </React.StrictMode>\n);\n\nReactDOMRender(appTsx, rootNode);\n","import { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport {\n    AppCategories,\n    AppRoute,\n    AppRoutes,\n    UnpopulatedAppCategories,\n    UnpopulatedAppCategory\n} from \"./routes\";\n\ninterface IEvents {\n    refresh: (routes: Array<AppRoute>) => void; //auth\n    refreshAll: (routes: Array<AppRoute>) => void; //noauth+auth\n}\n\n//helper class to process AppRoutes\nclass RouteController extends TypedEmitter<IEvents> {\n    private refreshing = false;\n\n    public constructor() {\n        super();\n        window.rtcontroller = this;\n        this.refreshRoutes = this.refreshRoutes.bind(this);\n\n        LoginHooks.addHook(this.refreshRoutes);\n        this.refreshRoutes().catch(console.error);\n\n        //process categories\n        console.time(\"Category mapping\");\n        const catmap = new Map<string, UnpopulatedAppCategory>();\n\n        for (const [name, val] of Object.entries(UnpopulatedAppCategories)) {\n            val.routes = [];\n            //null asserted the name because that one is everywhere, even if the rest is partial\n            catmap.set(val.name!, val);\n            //@ts-expect-error typescript cannot infer that the name is a key of UnpopulatedAppCategories\n            AppCategories[name] = val;\n        }\n\n        for (const route of Object.values(AppRoutes)) {\n            if (!route.category) continue;\n\n            const cat = catmap.get(route.category);\n            if (!cat) {\n                console.error(\"Route has invalid category\", route);\n                continue;\n            }\n\n            //this is guaranteed to be an array as its set in the loop above\n            cat.routes!.push(route);\n\n            if (route.catleader) {\n                if (cat.leader) {\n                    console.error(\"Category has two leaders\", cat.leader, route);\n                    continue;\n                }\n                cat.leader = route;\n            }\n        }\n        console.log(\"Categories mapped\", catmap);\n        console.timeEnd(\"Category mapping\");\n    }\n\n    public async refreshRoutes() {\n        if (this.refreshing) {\n            console.log(\"Already refreshing\");\n            return;\n        } //no need to refresh twice\n\n        this.refreshing = true;\n\n        const work = []; //    we get all hidden routes no matter the authentification without waiting for the refresh\n        const routes = this.getImmediateRoutes(false);\n\n        for (const route of routes) {\n            route.cachedAuth = undefined;\n            if (route.isAuthorized) {\n                work.push(\n                    route.isAuthorized().then(auth => {\n                        route.cachedAuth = auth;\n                    })\n                );\n            } else {\n                route.cachedAuth = true;\n            }\n        }\n\n        await Promise.all(work); //wait for all the authorized calls to complete\n\n        this.emit(\"refresh\", this.getImmediateRoutes(true));\n        const routesNoAuth = this.getImmediateRoutes(false);\n        this.emit(\"refreshAll\", routesNoAuth);\n        this.refreshing = false;\n\n        console.log(\"Routes refreshed\", routesNoAuth);\n        return await this.getRoutes();\n    }\n\n    private wait4refresh() {\n        return new Promise<void>(resolve => {\n            if (!this.refreshing) {\n                resolve();\n                return;\n            }\n            this.on(\"refresh\", () => {\n                resolve();\n            });\n        });\n    }\n\n    public async getRoutes(auth = true): Promise<AppRoute[]> {\n        await this.wait4refresh();\n\n        return this.getImmediateRoutes(auth);\n    }\n\n    public getImmediateRoutes(auth = true) {\n        const results: Array<AppRoute> = [];\n\n        for (const val of Object.values(AppRoutes)) {\n            //we check for isauthorized here without calling because routes that lack the function are public\n            if (val.isAuthorized && !val.cachedAuth && auth) continue; //if not authorized and we only show authorized routes\n\n            results.push(val);\n        }\n\n        return results;\n    }\n}\n\nexport default new RouteController();\n","import { pathToRegexp } from \"path-to-regexp\";\n\nimport {\n    AdministrationRights,\n    ByondRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    InstanceManagerRights,\n    InstancePermissionSetRights,\n    RepositoryRights\n} from \"../ApiClient/generatedcode/_enums\";\nimport {\n    InstancePermissionSetResponse,\n    PermissionSet,\n    UserResponse\n} from \"../ApiClient/generatedcode/schemas\";\n\nexport type DistributiveOmit<T, K extends keyof T> = T extends T ? Omit<T, K> : never;\n\nfunction download(filename: string, text: string): void {\n    const element = document.createElement(\"a\");\n    element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text));\n    element.setAttribute(\"download\", filename);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nfunction replaceAll(str: string, find: string, replace: string, ignore?: boolean): string {\n    return str.replace(\n        new RegExp(find.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"), ignore ? \"gi\" : \"g\"),\n        replace.replace(/\\$/g, \"$$$$\")\n    );\n}\n\nfunction matchesPath(path: string, target: string, exact = false): boolean {\n    //remove trailing slashes\n    if (path.slice(-1) === \"/\") path = path.slice(0, -1);\n    if (target.slice(-1) === \"/\") target = target.slice(0, -1);\n\n    return pathToRegexp(target, undefined, { end: exact }).test(path);\n}\n\nfunction resolvePermissionSet(user: UserResponse): PermissionSet {\n    return (user.permissionSet ?? user.group?.permissionSet) as PermissionSet;\n}\n\nfunction bitflagIsTrue(bitfield: number, bitflag: number): boolean {\n    return !!(bitflag & bitfield);\n}\n\nfunction hasAdminRight(permissionSet: PermissionSet, right: AdministrationRights): boolean {\n    return bitflagIsTrue(permissionSet.administrationRights, right);\n}\n\nfunction hasInstanceManagerRight(\n    permissionSet: PermissionSet,\n    right: InstanceManagerRights\n): boolean {\n    return bitflagIsTrue(permissionSet.instanceManagerRights, right);\n}\n\nfunction hasByondRight(permissionSet: InstancePermissionSetResponse, right: ByondRights): boolean {\n    return bitflagIsTrue(permissionSet.byondRights, right);\n}\n\nfunction hasChatBotRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: ChatBotRights\n): boolean {\n    return bitflagIsTrue(permissionSet.chatBotRights, right);\n}\n\nfunction hasConfigRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: ConfigurationRights\n): boolean {\n    return bitflagIsTrue(permissionSet.configurationRights, right);\n}\n\nfunction hasDreamDaemonRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: DreamDaemonRights\n): boolean {\n    return bitflagIsTrue(permissionSet.dreamDaemonRights, right);\n}\n\nfunction hasDreamMakerRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: DreamMakerRights\n): boolean {\n    return bitflagIsTrue(permissionSet.dreamMakerRights, right);\n}\n\nfunction hasInstancePermRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: InstancePermissionSetRights\n): boolean {\n    return bitflagIsTrue(permissionSet.instancePermissionSetRights, right);\n}\n\nfunction hasRepoRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: RepositoryRights\n): boolean {\n    return bitflagIsTrue(permissionSet.repositoryRights, right);\n}\n\nexport {\n    download,\n    replaceAll,\n    matchesPath,\n    resolvePermissionSet,\n    bitflagIsTrue,\n    hasAdminRight,\n    hasByondRight,\n    hasConfigRight,\n    hasRepoRight,\n    hasChatBotRight,\n    hasInstancePermRight,\n    hasInstanceManagerRight,\n    hasDreamMakerRight,\n    hasDreamDaemonRight\n};\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nimport { AdministrationRights, InstanceManagerRights } from \"../ApiClient/generatedcode/_enums\";\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../ApiClient/UserClient\";\nimport CredentialsProvider from \"../ApiClient/util/CredentialsProvider\";\nimport { resolvePermissionSet } from \"./misc\";\n\nexport interface AppRoute {\n    ///Base parameters\n    //must be unique, also is the id of the route name message\n    name: string;\n    //must be unique, url to access\n    route: string;\n    //link to link to when linking to the route, defaults to the \"route\"\n    link?: string;\n    //filename in components/view that the route should display\n    file: string;\n\n    ///Path parameters\n    //If subpaths should route here\n    loose: boolean;\n    //If subpaths should light up the navbar button\n    navbarLoose: boolean;\n\n    ///Authentication\n    //if we can route to it even on the login page\n    loginless?: boolean;\n    //function to tell if we are authorized\n    isAuthorized?: () => Promise<boolean>;\n    //result of isAuthorized() after RouteController runs it, can be used by components but only set by RouteController\n    cachedAuth?: boolean;\n\n    ///Visibility\n    //if this shows up on the navbar\n    visibleNavbar: boolean;\n    //serves two purposes, first one is to give it an icon, the second one is to not display it if the icon is undefined\n    homeIcon?: IconProp;\n\n    ///Categories\n    //name of the category it belongs to\n    category?: string;\n    //if this is the main button in the category\n    catleader?: boolean;\n\n    ///Misc\n    //Should we not wrap this component in a <Container>?\n    noContainer?: boolean;\n}\n\nfunction adminRight(right: AdministrationRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.isTokenValid()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).administrationRights & right);\n        }\n        return false;\n    };\n}\n\nfunction instanceManagerRight(right: InstanceManagerRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.isTokenValid()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).instanceManagerRights & right);\n        }\n        return false;\n    };\n}\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesAppRoute = <T>(et: { [K in keyof T]: AppRoute }) => et;\n\nconst AppRoutes = asElementTypesAppRoute({\n    home: {\n        name: \"routes.home\",\n        route: \"/\",\n        file: \"Home\",\n\n        loose: false,\n        navbarLoose: false,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"home\",\n        catleader: true\n    },\n    instancecreate: {\n        name: \"routes.instancecreate\",\n        route: \"/instances/create\",\n        file: \"Instance/Create\",\n\n        loose: false,\n        navbarLoose: false,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.Create),\n\n        visibleNavbar: false,\n\n        category: \"instance\",\n        catleader: false\n    },\n    instancelist: {\n        name: \"routes.instancelist\",\n        route: \"/instances/\",\n        file: \"Instance/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.List | InstanceManagerRights.Read),\n\n        visibleNavbar: true,\n        homeIcon: \"hdd\",\n\n        category: \"instance\",\n        catleader: true\n    },\n    instanceedit: {\n        name: \"routes.instanceedit\",\n        route: \"/instances/edit/:id(\\\\d+)/:tab?/\",\n        file: \"Instance/InstanceEdit\",\n\n        get link(): string {\n            return RouteData.selectedinstanceid !== undefined\n                ? `/instances/edit/${RouteData.selectedinstanceid}/${\n                      RouteData.selectedinstanceedittab !== undefined\n                          ? `${RouteData.selectedinstanceedittab}/`\n                          : \"\"\n                  }`\n                : AppRoutes.instancelist.link ?? AppRoutes.instancelist.route;\n        },\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    instancejobs: {\n        name: \"routes.instancejobs\",\n        route: \"/instances/jobs/\",\n        file: \"Instance/Jobs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    userlist: {\n        name: \"routes.usermanager\",\n        route: \"/users/\",\n        file: \"User/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: \"user\",\n\n        category: \"user\",\n        catleader: true\n    },\n    useredit: {\n        name: \"routes.useredit\",\n        route: \"/users/edit/user/:id(\\\\d+)/:tab?/\",\n\n        //whole lot of bullshit just to make it that if you have an id, link to the edit page, otherwise link to the list page, and if you link to the user page, put the tab in\n        get link(): string {\n            return RouteData.selecteduserid !== undefined\n                ? `/users/edit/user/${RouteData.selecteduserid}/${\n                      RouteData.selectedusertab !== undefined ? `${RouteData.selectedusertab}/` : \"\"\n                  }`\n                : AppRoutes.userlist.link ?? AppRoutes.userlist.route;\n        },\n        file: \"User/Edit\",\n\n        loose: true,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    usercreate: {\n        name: \"routes.usercreate\",\n        route: \"/users/create/\",\n\n        link: \"/users/create/\",\n        file: \"User/Create\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.WriteUsers),\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    admin: {\n        name: \"routes.admin\",\n        route: \"/admin/\",\n        file: \"Administration\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.ChangeVersion),\n\n        visibleNavbar: true,\n        homeIcon: \"tools\",\n\n        category: \"admin\",\n        catleader: true\n    },\n    admin_update: {\n        name: \"routes.admin.update\",\n        route: \"/admin/update/:all?/\",\n        file: \"Admin/Update\",\n\n        link: \"/admin/update/\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.ChangeVersion),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\"\n    },\n    admin_logs: {\n        name: \"routes.admin.logs\",\n        route: \"/admin/logs/:name?/\",\n        link: \"/admin/logs/\",\n        file: \"Admin/Logs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.DownloadLogs),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\",\n\n        noContainer: true\n    },\n    passwd: {\n        name: \"routes.passwd\",\n        route: \"/users/passwd/:id(\\\\d+)?/\",\n        link: \"/users/passwd/\",\n        file: \"ChangePassword\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.EditOwnPassword),\n\n        visibleNavbar: false,\n        homeIcon: \"key\"\n    },\n    config: {\n        name: \"routes.config\",\n        route: \"/config/\",\n        file: \"Configuration\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false,\n        homeIcon: \"cogs\"\n    },\n    setup: {\n        name: \"routes.setup\",\n        route: \"/setup/\",\n        file: \"Setup\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    oAuth: {\n        name: \"routes.oauth\",\n        route: \"/oauth/:provider?/\",\n        file: \"Login\",\n\n        loose: true,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    info: {\n        name: \"routes.info\",\n        route: \"/info\",\n        file: \"Info\",\n\n        loose: false,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: true,\n        homeIcon: \"info-circle\",\n\n        category: undefined,\n        catleader: false\n    }\n});\n\nexport { AppRoutes };\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesCategory = <T>(et: { [K in keyof T]: UnpopulatedAppCategory }) => et;\n\nexport type UnpopulatedAppCategory = Partial<AppCategory>;\n\nexport interface AppCategory {\n    name: string; //doesnt really matter, kinda bullshit\n    routes: AppRoute[];\n    leader: AppRoute;\n}\n\nexport const UnpopulatedAppCategories = asElementTypesCategory({\n    home: {\n        name: \"home\"\n    },\n    instance: {\n        name: \"instance\"\n    },\n    user: {\n        name: \"user\"\n    },\n    admin: {\n        name: \"admin\"\n    }\n});\n\n// @ts-expect-error This is populated in the constructor after its populated\nexport const AppCategories: { [K in keyof typeof UnpopulatedAppCategories]: AppCategory } = {};\n\nexport const RouteData = {\n    selecteduserid: undefined as undefined | number,\n    selectedusertab: undefined as undefined | string,\n\n    selectedinstanceid: undefined as undefined | number,\n    selectedinstanceedittab: undefined as undefined | string,\n\n    instancelistpage: undefined as undefined | number,\n    loglistpage: undefined as undefined | number,\n    byondlistpage: undefined as undefined | number,\n    userlistpage: undefined as undefined | number,\n    jobhistorypage: new Map<number, number>(),\n\n    oautherrors: [] as InternalError<ErrorCode>[]\n};\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../node_modules/css-loader/dist/runtime/getUrl.js\";\nimport ___CSS_LOADER_URL_IMPORT_0___ from \"./logo.svg\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".App {\\n    background-size: 50%;\\n    background: #1e1e1e url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \") no-repeat center;\\n    position: absolute;\\n    width: 100%;\\n    top: 0;\\n    bottom: 0;\\n    display: grid;\\n}\\n\\n.App-error {\\n    color: red;\\n    font-size: 150%;\\n    margin: auto;\\n}\\n\\n.App-main {\\n    display: grid;\\n}\\n\\n.Root {\\n    overflow: hidden;\\n    display: grid;\\n    grid-template-rows: 9% auto;\\n}\\n\\n.Root-login {\\n    display: grid;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/App.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,oBAAoB;IACpB,4EAAkD;IAClD,kBAAkB;IAClB,WAAW;IACX,MAAM;IACN,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,2BAA2B;AAC/B;;AAEA;IACI,aAAa;AACjB\",\"sourcesContent\":[\".App {\\n    background-size: 50%;\\n    background: #1e1e1e url(logo.svg) no-repeat center;\\n    position: absolute;\\n    width: 100%;\\n    top: 0;\\n    bottom: 0;\\n    display: grid;\\n}\\n\\n.App-error {\\n    color: red;\\n    font-size: 150%;\\n    margin: auto;\\n}\\n\\n.App-main {\\n    display: grid;\\n}\\n\\n.Root {\\n    overflow: hidden;\\n    display: grid;\\n    grid-template-rows: 9% auto;\\n}\\n\\n.Root-login {\\n    display: grid;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var map = {\n\t\"./Admin/Logs\": [\n\t\t90105,\n\t\t233,\n\t\t820,\n\t\t105\n\t],\n\t\"./Admin/Logs.tsx\": [\n\t\t90105,\n\t\t233,\n\t\t820,\n\t\t105\n\t],\n\t\"./Admin/Update\": [\n\t\t98628,\n\t\t233,\n\t\t820,\n\t\t909,\n\t\t628\n\t],\n\t\"./Admin/Update.tsx\": [\n\t\t98628,\n\t\t233,\n\t\t820,\n\t\t909,\n\t\t628\n\t],\n\t\"./Administration\": [\n\t\t11680,\n\t\t233,\n\t\t820,\n\t\t680\n\t],\n\t\"./Administration.tsx\": [\n\t\t11680,\n\t\t233,\n\t\t820,\n\t\t680\n\t],\n\t\"./ChangePassword\": [\n\t\t83359,\n\t\t359\n\t],\n\t\"./ChangePassword.tsx\": [\n\t\t83359,\n\t\t359\n\t],\n\t\"./Configuration\": [\n\t\t17273,\n\t\t273\n\t],\n\t\"./Configuration.tsx\": [\n\t\t17273,\n\t\t273\n\t],\n\t\"./Home\": [\n\t\t64558,\n\t\t558\n\t],\n\t\"./Home.tsx\": [\n\t\t64558,\n\t\t558\n\t],\n\t\"./Info\": [\n\t\t14464,\n\t\t464\n\t],\n\t\"./Info.tsx\": [\n\t\t14464,\n\t\t464\n\t],\n\t\"./Instance/Create\": [\n\t\t79350,\n\t\t350\n\t],\n\t\"./Instance/Create.tsx\": [\n\t\t79350,\n\t\t350\n\t],\n\t\"./Instance/Edit/Byond\": [\n\t\t59012,\n\t\t233,\n\t\t201,\n\t\t12\n\t],\n\t\"./Instance/Edit/Byond.tsx\": [\n\t\t59012,\n\t\t233,\n\t\t201,\n\t\t12\n\t],\n\t\"./Instance/Edit/Config\": [\n\t\t80478,\n\t\t478,\n\t\t327\n\t],\n\t\"./Instance/Edit/Config.tsx\": [\n\t\t80478,\n\t\t478,\n\t\t327\n\t],\n\t\"./Instance/Edit/JobHistory\": [\n\t\t41606,\n\t\t606\n\t],\n\t\"./Instance/Edit/JobHistory.tsx\": [\n\t\t41606,\n\t\t606\n\t],\n\t\"./Instance/InstanceEdit\": [\n\t\t63711,\n\t\t233,\n\t\t201,\n\t\t12,\n\t\t478,\n\t\t711\n\t],\n\t\"./Instance/InstanceEdit.tsx\": [\n\t\t63711,\n\t\t233,\n\t\t201,\n\t\t12,\n\t\t478,\n\t\t711\n\t],\n\t\"./Instance/Jobs\": [\n\t\t50571,\n\t\t571\n\t],\n\t\"./Instance/Jobs.tsx\": [\n\t\t50571,\n\t\t571\n\t],\n\t\"./Instance/List\": [\n\t\t36228,\n\t\t228\n\t],\n\t\"./Instance/List.tsx\": [\n\t\t36228,\n\t\t228\n\t],\n\t\"./Login\": [\n\t\t63136\n\t],\n\t\"./Login.tsx\": [\n\t\t63136\n\t],\n\t\"./Setup\": [\n\t\t65324,\n\t\t324\n\t],\n\t\"./Setup.tsx\": [\n\t\t65324,\n\t\t324\n\t],\n\t\"./User/Create\": [\n\t\t57257,\n\t\t257\n\t],\n\t\"./User/Create.tsx\": [\n\t\t57257,\n\t\t257\n\t],\n\t\"./User/Edit\": [\n\t\t28253,\n\t\t98,\n\t\t253\n\t],\n\t\"./User/Edit.tsx\": [\n\t\t28253,\n\t\t98,\n\t\t253\n\t],\n\t\"./User/List\": [\n\t\t11120,\n\t\t120\n\t],\n\t\"./User/List.tsx\": [\n\t\t11120,\n\t\t120\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 66235;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./en.json\": [\n\t\t2422,\n\t\t422\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 862;\nmodule.exports = webpackAsyncContext;"],"names":["AccessDenied","title","variant","className","onClick","props","history","goBack","id","React","withRouter","ErrorAlert","state","popup","this","error","handleClose","setState","dismissible","onClose","code","centered","show","onHide","size","closeButton","desc","type","DescType","VERSION","MODE","API_VERSION","extendedInfo","replace","Component","GenericAlert","body","children","JobCard","job","createddate","Date","startedAt","createddiff","getTime","now","stoppeddiff","stoppedAt","undefined","errorCode","exceptionDetails","cancelled","key","style","maxWidth","width","description","stage","overlay","toLocaleString","ref","triggerHandler","value","numeric","updateIntervalInSeconds","startedBy","name","cancelledBy","TGSErrorCode","height","animated","label","progress","toString","striped","canCancel","padding","onCancel","icon","JobsList","widgetRef","handleUpdate","bind","jobs","JobsController","errors","ownerrors","loading","instances","Map","prevState","Array","from","push","current","scrollTop","response1","InstanceClient","pageSize","StatusCode","payload","content","i","totalPages","response2","page","addError","instanceMap","forEach","instance","set","widget","nested","display","totalJobs","values","configOptions","jobsWidgetOptions","length","position","top","bottom","right","left","pointerEvents","default","x","document","documentElement","clientWidth","Math","min","y","clientHeight","minHeight","minWidth","bounds","text","map","err","index","prev","newarr","sort","a","b","instanceid","jobMap","renderTooltip","get","amount","defaultProps","Loading","animation","center","widthUnit","otherprops","styles","appear","classNames","addEndListener","node","done","addEventListener","Login","submit","console","log","RouteData","busy","validated","username","password","ServerClient","CredentialsType","userName","redirectSetup","CredentialsProvider","context","serverInfo","providers","OAuthProvider","faGithub","faDiscord","src","TGLogo","alt","KeycloakLogo","onSubmit","lg","md","controlId","onChange","event","target","required","Object","keys","oAuthProviderInfos","provider","startOAuth","stateArray","Uint8Array","window","crypto","getRandomValues","dec","padStart","join","url","e","encodeURIComponent","Discord","clientId","redirectUri","GitHub","Keycloak","serverUrl","TGForums","oauthdata","JSON","parse","sessionStorage","getItem","location","pathname","setItem","stringify","href","Promise","resolve","InternalError","ErrorCode","jsError","Error","preventDefault","response","postLoginAction","contextType","GeneralContext","_API_VERSION","_VERSION","_MODE","_DEFAULT_BASEPATH","DEFAULT_BASEPATH","_DEFAULT_APIPATH","DEFAULT_APIPATH","options","AppNavbar","logoutClick","loginSuccess","logout","refresh","loggedIn","routes","categories","AppCategories","focusedCategory","category","LoginHooks","RouteController","prevProps","Navbar","expand","collapseOnSelect","bg","AppRoutes","reload","renderVersion","Nav","cat","leader","cachedAuth","onMouseEnter","timer","setTimeout","focusTimer","onMouseLeave","clearTimeout","link","route","active","matchesPath","navbarLoose","filter","CSSTransition","in","val","catleader","visibleNavbar","renderUser","version","Dropdown","user","alignRight","Button","ErrorBoundary","errorInfo","Container","Card","border","message","as","componentStack","Reload","clear","match","path","LoadSpin","NotFound","loadable","fallback","Router","refreshListener","components","file","URLSearchParams","search","listen","listener","URLSearch","oauthstate","setErrorAndEnd","token","selectCategory","loginless","exact","loose","render","Comp","noContainer","Locales","en","Translation","locale","messages","TranslationFactory","localization","shortHandedLocale","getShortHandedLocale","fallbackLocale","loadTranslation","model","split","InnerApp","ctrlKey","shiftKey","basename","passdownCat","Alert","idx","deleteError","random","App","translationFactory","finishLogin","finishLogout","updateContextUser","updateContextServer","deleteGeneralContextError","GeneralContextInfo","Set","UserClient","newSet","add","delete","translationError","translation","time","timeEnd","library","faCheck","faTimes","faExclamationCircle","faUser","faUserSlash","faHdd","faSync","faPlus","faQuestion","faHome","faTools","faCogs","faUndo","faInfo","faGripLinesVertical","faAngleRight","faKey","faPen","faTrash","faInfoCircle","faGitAlt","faHammer","faListUl","faComments","faFolderOpen","faUsers","faCodeBranch","faSearch","faServer","faStream","faLock","ConfigController","loadedChannelFromWebpack","alert","localStorage","removeItem","rootNode","getElementById","appTsx","ReactDOMRender","refreshing","rtcontroller","refreshRoutes","catch","catmap","entries","UnpopulatedAppCategories","work","getImmediateRoutes","isAuthorized","then","auth","all","emit","routesNoAuth","getRoutes","on","wait4refresh","results","TypedEmitter","download","filename","element","createElement","setAttribute","appendChild","click","removeChild","replaceAll","str","find","ignore","RegExp","slice","pathToRegexp","end","test","resolvePermissionSet","permissionSet","group","bitflagIsTrue","bitfield","bitflag","hasInstanceManagerRight","instanceManagerRights","hasByondRight","byondRights","adminRight","administrationRights","instanceManagerRight","home","homeIcon","instancecreate","InstanceManagerRights","instancelist","instanceedit","selectedinstanceid","selectedinstanceedittab","instancejobs","userlist","useredit","selecteduserid","selectedusertab","usercreate","AdministrationRights","admin","admin_update","admin_logs","passwd","config","setup","oAuth","info","instancelistpage","loglistpage","byondlistpage","userlistpage","jobhistorypage","oautherrors","___CSS_LOADER_EXPORT___","___CSS_LOADER_URL_REPLACEMENT_0___","module","webpackAsyncContext","req","__webpack_require__","o","ids","exports","t"],"sourceRoot":""}