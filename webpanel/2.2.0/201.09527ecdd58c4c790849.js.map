{"version":3,"sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ByondClient.ts"],"names":["instance","response","ServerClient","Instance","stat","InternalStatus","code","StatusCode","error","status","payload","data","InternalError","ErrorCode","axiosResponse","page","pageSize","configOptions","version","file","uploadCustomZip","responseData","fileTicket","response2","TransferClient","jsError","Error","ApiClient"],"mappings":"45CAYA,QAAe,a,kOAAA,U,IAAA,M,IAAA,G,EAAA,E,+YAAA,6D,EAAA,G,EAAA,qCACX,UACIA,GAIA,IAAIC,QAFEC,gBAGN,IACID,QAAiBC,mCAA6C,CAAEC,SAAUH,IAC5E,MAAOI,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQH,EAASQ,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAST,EAASU,OAG1B,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEC,cAAeb,GACjBA,SA7BT,iFAoCX,UACID,EADJ,GAGkE,IAG1DC,EAH0D,IAD5Dc,YAC4D,MADrD,EACqD,MADlDC,gBACkD,MADvCC,uBACuC,QACxDf,gBAGN,IACID,QAAiBC,mCAA6C,CAC1DC,SAAUH,EACVe,KAAMA,EACNC,SAAUA,IAEhB,MAAOZ,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQH,EAASQ,QACb,KAAK,IACD,OAAO,IAAIJ,IAAe,CACtBC,KAAMC,OACNG,QAAST,EAASU,OAG1B,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEC,cAAeb,GACjBA,SArET,gFA4EX,UACID,EACAkB,EACAC,GAIA,IAAIlB,QAFEC,gBAGN,IACID,QAAiBC,qCACb,CAAEC,SAAUH,GACZ,CAAEkB,QAASA,EAASE,kBAAmBD,IAE7C,MAAOf,GACL,OAAO,IAAIC,IAAe,CACtBC,KAAMC,UACNC,MAAOJ,IAIf,OAAQH,EAASQ,QACb,KAAK,IACL,KAAK,IACD,IAAMY,EAAepB,EAASU,KAC9B,GAAIU,EAAaC,WAAY,CACzB,GAAIH,EAAM,CACN,IAAMI,QAAkBC,WACpBH,EAAaC,WACbH,GAEJ,OAAII,EAAUjB,OAASC,OACZ,IAAIF,IAAe,CACtBC,KAAMC,OACNG,QAASW,IAGN,IAAIhB,IAAe,CACtBC,KAAMC,UACNC,MAAOe,EAAUf,QAIzB,OAAO,IAAIH,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KAAcC,cAAoB,CACzCY,QAASC,MACL,2FAOpB,OAAO,IAAIrB,IAAe,CACtBC,KAAMC,OACNG,QAAST,EAASU,OAG1B,QACI,OAAO,IAAIN,IAAe,CACtBC,KAAMC,UACNC,MAAO,IAAII,KACPC,wBACA,CAAEC,cAAeb,GACjBA,SA5IT,qD,iBAAA,EAAI,CAA2B0B","file":"201.09527ecdd58c4c790849.js","sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ByondInstallResponse,\n    ByondResponse,\n    PaginatedByondResponse\n} from \"./generatedcode/schemas\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { UploadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\nexport default new (class ByondClient extends ApiClient {\n    public async getActiveVersion(\n        instance: number\n    ): Promise<InternalStatus<ByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_Read({ Instance: instance });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listAllVersions(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedByondResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_List({\n                Instance: instance,\n                page: page,\n                pageSize: pageSize\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedByondResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async switchActive(\n        instance: number,\n        version: string,\n        file?: ArrayBuffer\n    ): Promise<InternalStatus<ByondInstallResponse, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.ByondController_Update(\n                { Instance: instance },\n                { version: version, uploadCustomZip: !!file }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const responseData = response.data as ByondInstallResponse;\n                if (responseData.fileTicket) {\n                    if (file) {\n                        const response2 = await TransferClient.Upload(\n                            responseData.fileTicket,\n                            file\n                        );\n                        if (response2.code === StatusCode.OK) {\n                            return new InternalStatus({\n                                code: StatusCode.OK,\n                                payload: responseData\n                            });\n                        } else {\n                            return new InternalStatus({\n                                code: StatusCode.ERROR,\n                                error: response2.error\n                            });\n                        }\n                    } else {\n                        return new InternalStatus({\n                            code: StatusCode.ERROR,\n                            error: new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\n                                    \"switchActive is uploading a custom zip without actually having a zip file to upload\"\n                                )\n                            })\n                        });\n                    }\n                }\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ByondInstallResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"sourceRoot":""}