"use strict";(self.webpackChunktgstation_server_control_panel=self.webpackChunktgstation_server_control_panel||[]).push([[264],{2741:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),r=n(5293),s=n(3489),i=n(4012);function o(e){return a.createElement(r.Z,{show:e.show,overlay:a.createElement(s.Z,{id:e.tooltipid},a.createElement(i.Z,{id:e.tooltipid}))},e.children)}},8264:function(e,t,n){n.r(t),n.d(t,{default:function(){return H}});var a,r,s=n(7294),i=n(5881),o=n(2086),l=n(5005),c=n(5147),m=n(7959),d=n(4012),p=n(5856),u=n(8509),h=n(3204),f=n(6846),g=n(3803),y=n(7611),E=n(7961),b=n(9521),S=n(6190),v=n(7428),w=n(6964),Z=n(3e3),C=n(9635),R=n(9049),P=n(5619),T=n(8425),x=n(5855),k=n(2741),N=n(7814),M=n(9966),I=n(7977),K=n(96),G=n(7764);function A(){return A=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},A.apply(this,arguments)}function O({pr:e,testmergeinfo:t,repoInfo:n,finalState:a,onRemove:r,onSelectCommit:i,onError:o}){const[c,p]=(0,s.useState)(!1),h=e=>{p((t=>{let n;return n="boolean"==typeof e?e:e(t),n&&B(),n}))},[f,y]=(0,s.useState)(!1),[E,b]=(0,s.useState)(e.head),[Z,C]=(0,s.useState)(a?a[1]:""),[P,T]=(0,s.useState)(null),[O,_]=(0,s.useState)(null),H=(0,s.useContext)(S.g),B=(0,s.useCallback)((async a=>{if(P&&!a)return;const r=await v.Z.getPRCommits({owner:n.remoteRepositoryOwner,repo:n.remoteRepositoryName,pr:e,wantedCommit:t?.targetCommitSha});if(r.code===g.G.ERROR)o(r.error);else{const e=new Map;r.payload[0].forEach((t=>e.set(t.sha,t))),T(e),_(r.payload[1]??null)}}),[n.remoteRepositoryOwner,n.remoteRepositoryName,e.head,t?.targetCommitSha]);(0,s.useEffect)((()=>c?void B():void 0),[c,B]),(0,s.useEffect)((()=>f?void B():void 0),[f,B]),(0,s.useEffect)((()=>h(!1)),[a]),(0,s.useEffect)((()=>C(a?a[1]:"")),[a]);let U;t&&(P?.has(t.targetCommitSha)?U=P?.get(t.targetCommitSha):O?.sha===t.targetCommitSha&&(U=O));const X=[...(P??[]).values()].map((n=>({name:n.name,value:n.sha,current:n.sha===t?.targetCommitSha,latest:n.sha===e.head,disabled:!1})));O&&(X.push({name:"...",value:"",current:!1,latest:!1,disabled:!0}),X.push({name:O.name,value:O.sha,current:O.sha===t?.targetCommitSha,latest:O.sha===e.head,disabled:!1}));const D=(0,w.Kp)(H.instancePermissionSet,u.nX.MergePullRequest),L=(0,w.Kp)(H.instancePermissionSet,u.nX.Read)&&(0,w.Kp)(H.instancePermissionSet,u.nX.UpdateBranch)||!t;return s.createElement(s.Fragment,null,s.createElement("tr",null,s.createElement("td",{className:"text-right"+(a?" font-weight-bold":"")},"#",e.number),s.createElement("td",null,s.createElement(I.Z,{pill:!0,className:"text-white text-capitalize mr-2",style:{backgroundColor:{closed:"#c93c37",merged:"#8256d0",open:"#347d39"}[e.state]}},e.state),e.testmergelabel?s.createElement(I.Z,{pill:!0,className:"text-white text-capitalize mr-2",variant:"primary"},s.createElement(d.Z,{id:"view.instance.repo.testmergelabel"})):null),s.createElement("td",null,s.createElement("a",{href:e.link,target:"_blank",rel:"noreferrer"},e.title)),s.createElement("td",{className:"font-italic"},e.author),s.createElement("td",null,s.createElement("div",{className:"d-flex justify-content-center"},s.createElement("div",{className:"d-inline-block text-nowrap"},a?s.createElement(s.Fragment,null,s.createElement(k.Z,{tooltipid:"generic.no_perm",show:!L&&void 0},s.createElement(l.Z,{variant:"danger",className:"mx-1",onClick:r,disabled:!L},s.createElement(N.G,{icon:"minus",fixedWidth:!0}))),s.createElement(k.Z,{tooltipid:"generic.no_perm",show:(!D||!L)&&void 0},s.createElement(l.Z,{className:"mx-1",onClick:n=>n.shiftKey?i(e.head,t?.comment??null):y(!0),variant:a[0]===e.head?"primary":"info",disabled:!D||!L},s.createElement(N.G,{icon:"sync",fixedWidth:!0}))),t?s.createElement(l.Z,{className:"mx-1",onClick:()=>h((e=>!e)),active:c},s.createElement(N.G,{icon:"info",fixedWidth:!0})):null):s.createElement(k.Z,{tooltipid:"generic.no_perm",show:!D&&void 0},s.createElement(l.Z,{variant:"success",className:"mx-1",disabled:!D,onClick:t=>t.shiftKey?i(e.head,null):y(!0)},s.createElement(N.G,{icon:"plus",fixedWidth:!0}))))))),s.createElement("tr",null,s.createElement("td",{className:"py-0 border-top-0"}),s.createElement("td",{colSpan:4,className:"py-0 border-top-0"},t?s.createElement(M.Z,{in:c},s.createElement("div",null,s.createElement("div",{className:"py-3"},s.createElement("table",{className:"reset-table"},s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",{className:"text-nowrap"},s.createElement("span",{className:"p-2"},s.createElement(d.Z,{id:"view.instance.repo.tm.by"}))),s.createElement("td",null,t.mergedBy.name)),s.createElement("tr",null,s.createElement("td",{className:"text-nowrap"},s.createElement("span",{className:"p-2"},s.createElement(d.Z,{id:"view.instance.repo.tm.comment"}))),s.createElement("td",null,t.comment)),s.createElement("tr",null,s.createElement("td",{className:"text-nowrap"},s.createElement("span",{className:"p-2"},s.createElement(d.Z,{id:"view.instance.repo.tm.commit"}))),s.createElement("td",null,U?s.createElement(s.Fragment,null,U.name,s.createElement("a",{className:"ml-1",href:U.url,target:"_blank",rel:"noreferrer"},"(",t.targetCommitSha.substring(0,7),")")):t.targetCommitSha.substring(0,7)))))))):null)),s.createElement(m.Z,{show:f,onHide:()=>y(!1),centered:!0,size:"lg"},s.createElement(m.Z.Header,{closeButton:!0},s.createElement(m.Z.Title,null,s.createElement(d.Z,{id:"view.instance.repo.tm.modal.title"}))),s.createElement(m.Z.Body,null,s.createElement("h5",null,s.createElement("a",{href:e.link,target:"_blank",rel:"noreferrer",className:"text-decoration-none"},e.title)),s.createElement(d.Z,{id:"view.instance.repo.tm.modal.label"}),P?s.createElement(K.Z,{filterOptions:G.Z,search:!0,options:X,value:E??U?.sha,autoComplete:"on",renderOption:(e,t,n,a)=>s.createElement("button",A({type:"button",className:a+(t.disabled?" font-weight-bold":"")},e),s.createElement(I.Z,null,t.value.substring(0,7)),t.current?s.createElement(I.Z,{variant:"primary",pill:!0,className:"mr-1"},s.createElement(d.Z,{id:"generic.testmerged"})):null,t.latest?s.createElement(I.Z,{variant:"success",pill:!0,className:"mr-1"},s.createElement(d.Z,{id:"generic.latest"})):null,t.name),onChange:e=>b(e)}):s.createElement(x.Z,{text:"loading.repo.commits",width:5,widthUnit:"rem"}),s.createElement(R.ZP,{name:"view.instance.repo.tm.modal.comment",type:R.fS.String,onChange:e=>C(e),defaultValue:t?.comment??""}),s.createElement("span",{className:"text-muted font-italic mt-4 d-inline-block"},s.createElement(d.Z,{id:"view.instance.repo.tm.modal.tip"}))),s.createElement(m.Z.Footer,null,s.createElement(l.Z,{variant:"danger",onClick:()=>y(!1)},s.createElement(d.Z,{id:"generic.close"})),s.createElement(l.Z,{onClick:()=>{E&&i(E,Z),y(!1)}},s.createElement(d.Z,{id:"generic.save"})))))}!function(e){e.reapply="reapply",e.added="added",e.removed="removed",e.updated="updated",e.rename="renamed"}(a||(a={})),function(e){e[e.None=0]="None",e[e.Local=1]="Local",e[e.Remote=2]="Remote"}(r||(r={}));class _ extends s.Component{constructor(e){super(e),this.state={errors:[],repositoryInfo:null,loading:!0,cloning:!1,unableToHookClone:!1,gitHubPRs:null,manualPRs:new Set,resetType:r.None,desiredState:new Map,showDeleteModal:!1,manualPR:0,lastManualPR:0,deployAfter:!1,repoBusy:!1,loadingPRs:!1},this.fetchRepositoryInfo=this.fetchRepositoryInfo.bind(this)}addError(e){this.setState((t=>{const n=Array.from(t.errors);return n.push(e),{errors:n}}))}async componentDidMount(){this.setState({deployAfter:(0,w.$A)(this.context.instancePermissionSet,u.xb.Compile)}),await this.fetchRepositoryInfo(void 0,!0)}async fetchRepositoryInfo(e,t){(0,w.Kp)(this.context.instancePermissionSet,u.nX.Read)||(this.setState({loading:!1,cloning:!1}),this.reloadDesiredState(null,t??!1,!1),this.setState({repositoryInfo:null}));const n=await y.Z.getRepository(this.context.instance.id);if(this.setState({cloning:!1,repoBusy:!1}),n.code===g.G.ERROR)if(n.error.code===f.jK.HTTP_DATA_INEGRITY&&n.error.originalErrorMessage?.errorCode===u.jK.RepoCloning)if(this.setState({cloning:!0,unableToHookClone:!1}),e)b.Z.registerCallback(e.id,this.fetchRepositoryInfo);else{const e=await h.Z.listActiveJobs(this.context.instance.id,{page:1,pageSize:100});if(e.code===g.G.OK){const t=e.payload.content.sort(((e,t)=>t.id-e.id)).find((e=>e.description.includes("Clone")&&e.description.includes("repository")));t?b.Z.registerCallback(t.id,this.fetchRepositoryInfo):this.setState({unableToHookClone:!0})}else this.addError(e.error),this.setState({unableToHookClone:!0})}else n.error.code===f.jK.HTTP_DATA_INEGRITY&&n.error.originalErrorMessage?.errorCode===u.jK.RepoBusy?this.setState({repoBusy:!0}):this.addError(n.error);else this.reloadPRs(n.payload,t),this.setState({repositoryInfo:n.payload});this.setState({loading:!1})}reloadPRs(e,t){e.remoteGitProvider===u.Qs.GitHub&&e.remoteRepositoryName&&e.remoteRepositoryOwner&&(this.setState({loadingPRs:!0}),v.Z.getPRs({repo:e.remoteRepositoryName,owner:e.remoteRepositoryOwner,wantedPRs:e.revisionInformation?.activeTestMerges.map((e=>e.number))}).then((n=>{this.setState({loadingPRs:!1}),n.code===g.G.ERROR?this.addError(n.error):(this.setState({gitHubPRs:n.payload}),t&&this.reloadDesiredState(e,!0,!1,n.payload))})).catch((e=>{this.setState({loadingPRs:!1}),this.addError(new f.ZP(f.jK.APP_FAIL,{jsError:e}))})))}async applyTestmerges(e){const t={},n=this.state.repositoryInfo,a=this.state.resetType!==r.None;if(this.state.resetType===r.Local?t.checkoutSha=n?.revisionInformation?.originCommitSha:this.state.resetType===r.Remote&&(t.updateFromOrigin=!0,t.reference=n?.reference),n&&n?.remoteGitProvider===u.Qs.GitHub){const n=[];[...this.state.desiredState.entries()].forEach((([t,r])=>{if(!r)return;const[s,i,o]=r;(!s||a||e)&&n.push({number:t,targetCommitSha:i,comment:o})})),n.length&&(t.newTestMerges=n)}const s=t.newTestMerges??[];this.state.manualPRs.forEach((e=>s.push({number:e}))),s.length&&(t.newTestMerges=s),this.setState({loading:!0});const i=await y.Z.editRepository(this.context.instance.id,t);if(this.setState({loading:!1}),i.code===g.G.OK)if(i.payload.activeJob){if(this.setState({loading:!0}),b.Z.fastmode=5,b.Z.registerCallback(i.payload.activeJob.id,(e=>this.fetchRepositoryInfo(e,void 0===e.errorCode&&void 0===e.exceptionDetails))),b.Z.registerJob(i.payload.activeJob,this.context.instance.id),b.Z.restartLoop(),this.state.deployAfter){const e=i.payload.activeJob.id,t=setInterval((()=>{"number"==typeof b.Z.jobs.get(e)?.progress&&(clearInterval(t),p.Z.startCompile(this.context.instance.id).then((e=>{e.code===g.G.ERROR&&this.addError(e.error)})))}),5e3)}}else await this.fetchRepositoryInfo();else this.addError(i.error)}reloadDesiredState(e,t,n,a){a=a??this.state.gitHubPRs,t&&this.setState({resetType:r.None,manualPRs:new Set}),e&&this.setState((s=>{const i=s.desiredState,o=new Map(t?[]:i);let l=!1;return e.revisionInformation?.activeTestMerges.forEach((e=>{const r=o.get(e.number);if(!t){if(!r)return;if(r&&!r[0])return}const s=a?.find((t=>e.number===t.number));!t||n||"merged"!==s?.state?o.set(e.number,[!0,e.targetCommitSha,e.comment??""]):(o.set(e.number,null),l=!0)})),{resetType:l?r.Local:s.resetType,desiredState:o}}))}render(){return s.createElement("div",{className:"text-center"},s.createElement(T.t,{obj:this.state}),this.renderErrors(),this.state.repositoryInfo&&!this.state.repositoryInfo.origin?this.renderPreClone():s.createElement(s.Fragment,null,s.createElement("h3",null,s.createElement(d.Z,{id:"view.instance.repo.repoinfo"})),this.state.repoBusy?s.createElement(x.Z,{text:"loading.repo.busy"}):s.createElement(s.Fragment,null,this.renderRepoInformation(),s.createElement("hr",null),this.renderSettings(),s.createElement("hr",null),s.createElement("h3",null,s.createElement(d.Z,{id:"view.instance.repo.testmerges"})),this.renderTestMerges(),s.createElement("hr",null),this.renderDelete())))}renderErrors(){return s.createElement(s.Fragment,null,this.state.errors.map(((e,t)=>{if(e)return s.createElement(Z.ZP,{key:t,error:e,onClose:()=>this.setState((e=>{const n=Array.from(e.errors);return n[t]=void 0,{errors:n}}))})})))}renderRepoInformation(){const e=this.state.repositoryInfo;return e?s.createElement("table",{className:"mx-auto text-left"},s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",null,s.createElement("span",{className:"mr-3"},s.createElement(d.Z,{id:"view.instance.repo.info.origin"}))),s.createElement("td",null,e.origin)),s.createElement("tr",null,s.createElement("td",null,s.createElement("span",{className:"mr-3"},s.createElement(d.Z,{id:"view.instance.repo.info.owner"}))),s.createElement("td",null,e.remoteRepositoryOwner)),s.createElement("tr",null,s.createElement("td",null,s.createElement("span",{className:"mr-3"},s.createElement(d.Z,{id:"view.instance.repo.info.name"}))),s.createElement("td",null,e.remoteRepositoryName)))):s.createElement(C.Z,{title:"view.instance.repo.norepoinfo"})}renderPreClone(){const e={origin:{type:R.fS.String,name:"fields.instance.repository.url"},reference:{type:R.fS.String,name:"fields.instance.repository.ref",defaultValue:"main"},accessUser:{type:R.fS.String,name:"fields.instance.repository.gituser",defaultValue:""},accessToken:{type:R.fS.String,name:"fields.instance.repository.gitpassword",defaultValue:""},updateSubmodules:{type:R.fS.Boolean,name:"fields.instance.repository.enablesubmodules",defaultValue:!0}};return s.createElement(s.Fragment,null,s.createElement("h3",null,s.createElement(d.Z,{id:"view.instance.repo.clone"})),s.createElement(P.Z,{fields:e,hideDisabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.Read),onSave:async e=>{const t=await y.Z.cloneRepository(this.context.instance.id,e);t.code===g.G.OK?(await this.fetchRepositoryInfo(t.payload.activeJob??void 0),b.Z.restartLoop()):this.addError(t.error)},includeAll:!0}))}renderSettings(){const e=this.state.repositoryInfo,t={originCheckoutSha:{type:R.fS.String,name:"fields.instance.repository.origincheckoutsha",disabled:!0,defaultValue:e?e.revisionInformation?.originCommitSha:"",tooltip:"fields.instance.repository.origincheckoutsha.desc"},checkoutSha:{type:R.fS.String,name:"fields.instance.repository.checkoutsha",defaultValue:e?e.revisionInformation?.commitSha:"",tooltip:"fields.instance.repository.checkoutsha.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.SetSha)},reference:{type:R.fS.String,name:"fields.instance.repository.reference",defaultValue:e?e.reference:"",tooltip:"fields.instance.repository.reference.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.SetReference)},committerName:{type:R.fS.String,name:"fields.instance.repository.committerName",defaultValue:e?e.committerName:"",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeCommitter)},committerEmail:{type:R.fS.String,name:"fields.instance.repository.committerEmail",defaultValue:e?e.committerEmail:"",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeCommitter)},accessUser:{type:R.fS.String,name:"fields.instance.repository.accessUser",defaultValue:e?e.accessUser:"",tooltip:"fields.instance.repository.accessUser.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeCredentials)},accessToken:{type:R.fS.Password,name:"fields.instance.repository.accessToken",tooltip:"fields.instance.repository.accessToken.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeCredentials)},clearAccessToken:{type:R.fS.Boolean,name:"fields.instance.repository.clearAccessToken",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeCredentials)},pushTestMergeCommits:{type:R.fS.Boolean,name:"fields.instance.repository.pushTestMergeCommits",defaultValue:!!e&&e.pushTestMergeCommits,tooltip:"fields.instance.repository.pushTestMergeCommits.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeTestMergeCommits)},createGitHubDeployments:{type:R.fS.Boolean,name:"fields.instance.repository.createGitHubDeployments",defaultValue:!!e&&e.createGitHubDeployments,tooltip:"fields.instance.repository.createGitHubDeployments.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeTestMergeCommits)},showTestMergeCommitters:{type:R.fS.Boolean,name:"fields.instance.repository.showTestMergeCommitters",defaultValue:!!e&&e.showTestMergeCommitters,tooltip:"fields.instance.repository.showTestMergeCommitters.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeTestMergeCommits)},autoUpdatesKeepTestMerges:{type:R.fS.Boolean,name:"fields.instance.repository.autoUpdatesKeepTestMerges",defaultValue:!!e&&e.autoUpdatesKeepTestMerges,tooltip:"fields.instance.repository.autoUpdatesKeepTestMerges.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeAutoUpdateSettings)},autoUpdatesSynchronize:{type:R.fS.Boolean,name:"fields.instance.repository.autoUpdatesSynchronize",defaultValue:!!e&&e.autoUpdatesSynchronize,tooltip:"fields.instance.repository.autoUpdatesSynchronize.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeAutoUpdateSettings)},postTestMergeComment:{type:R.fS.Boolean,name:"fields.instance.repository.postTestMergeComment",defaultValue:!!e&&e.postTestMergeComment,tooltip:"fields.instance.repository.postTestMergeComment.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeTestMergeCommits)},updateSubmodules:{type:R.fS.Boolean,name:"fields.instance.repository.updateSubmodules",defaultValue:!!e&&e.updateSubmodules,tooltip:"fields.instance.repository.updateSubmodules.desc",disabled:!(0,w.Kp)(this.context.instancePermissionSet,u.nX.ChangeSubmoduleUpdate)}};return s.createElement(s.Fragment,null,s.createElement("h3",null,s.createElement(d.Z,{id:"view.instance.repo.reposettings"})),s.createElement(P.Z,{fields:t,onSave:async e=>{const{clearAccessToken:t,...n}=e;t&&(n.accessUser="",n.accessToken=""),this.setState({loading:!0});const a=await y.Z.editRepository(this.context.instance.id,n);this.setState({loading:!1}),a.code===g.G.OK?a.payload.activeJob?(this.setState({loading:!0}),b.Z.fastmode=5,b.Z.registerCallback(a.payload.activeJob.id,this.fetchRepositoryInfo),b.Z.registerJob(a.payload.activeJob,this.context.instance.id),b.Z.restartLoop()):await this.fetchRepositoryInfo():this.addError(a.error)}}))}renderTestMerges(){const e=this.state.repositoryInfo,t=(0,w.$A)(this.context.instancePermissionSet,u.xb.Compile),n=(0,w.Kp)(this.context.instancePermissionSet,u.nX.MergePullRequest),m=(0,w.Kp)(this.context.instancePermissionSet,u.nX.Read)&&(0,w.Kp)(this.context.instancePermissionSet,u.nX.UpdateBranch),p=new Map;e&&e.revisionInformation?.activeTestMerges.forEach((e=>p.set(e.number,e)));const h=this.state.gitHubPRs?.sort(((e,t)=>p.has(e.number)!==p.has(t.number)?p.has(e.number)?-1:1:e.testmergelabel!==t.testmergelabel?e.testmergelabel?-1:1:e.number-t.number))??[],f=h.map((t=>{const n=this.state.desiredState.get(t.number),r=e?e?.revisionInformation?.activeTestMerges.find((e=>e.number===t.number)):void 0;return n?r?r.targetCommitSha!==n[1]?[a.updated,t]:(r.comment??"")!==n[2]?[a.rename,t]:[a.reapply,t]:[a.added,t]:this.state.desiredState.get(t.number)?null:r?[a.removed,t]:null})).filter((e=>null!==e)),g=f.sort(((e,t)=>{const n=[a.removed,a.reapply,a.added,a.updated];for(const a of n)if(e[0]===a^t[0]===a)return e[0]===a?-1:1;return 0})),y=!!e&&"(no branch)"===e.reference,b=f.some((e=>e[0]!=a.added&&e[0]!=a.reapply)),S=0===f.filter((([e])=>e!==a.reapply)).length&&this.state.resetType===r.None&&!this.state.manualPRs.size;return e&&e.remoteGitProvider==u.Qs.Unknown?s.createElement(C.Z,{title:"view.instance.repo.testmerges.badprovider"}):this.state.loadingPRs?s.createElement(x.Z,{text:"loading.repo.prs"}):s.createElement("div",{className:"mx-5"},s.createElement(i.Z,{className:"mb-5"},s.createElement(i.Z.Header,null,s.createElement(d.Z,{id:"view.instance.repo.pending.title"})),s.createElement(i.Z.Body,{className:"text-left"},s.createElement("ul",null,S?s.createElement("li",{className:"font-weight-lighter font-italic"},s.createElement(d.Z,{id:"view.instance.repo.pending.none"})):s.createElement(s.Fragment,null,e&&y?s.createElement("li",null,s.createElement(d.Z,{id:"view.instance.repo.pending.reset.nobranch",values:{commit:e.revisionInformation?.originCommitSha.substring(0,7)}})):this.state.resetType===r.Remote?s.createElement("li",null,s.createElement(d.Z,{id:"view.instance.repo.pending.update"})):this.state.resetType===r.Local?s.createElement("li",null,s.createElement(d.Z,{id:"view.instance.repo.pending.reset"})):null,e&&e.remoteGitProvider===u.Qs.GitHub?g.map((([e,t])=>{const n=this.state.desiredState.get(t.number);if(e===a.reapply&&this.state.resetType===r.None&&!y)return null;const i=n?n[1]:null;return s.createElement("li",{key:t.number},s.createElement(d.Z,{id:`view.instance.repo.pending.${e}`,values:{number:t.number,commit:i?.substring(0,7),title:t.title}}))})):null,[...this.state.manualPRs.values()].map((e=>s.createElement("li",{key:e},s.createElement(d.Z,{id:"view.instance.repo.pending.added.manual",values:{number:e}})))))),s.createElement(o.Z,{size:"lg",className:"mb-2 text-center"},s.createElement(l.Z,{disabled:y||!m,onClick:()=>this.setState({resetType:r.Remote}),variant:this.state.resetType===r.Remote?"secondary":"primary"},s.createElement(d.Z,{id:"view.instance.repo.update.remote"})),s.createElement(l.Z,{disabled:y||!m,onClick:()=>this.setState({resetType:r.Local}),variant:this.state.resetType===r.Local?"secondary":"primary"},s.createElement(d.Z,{id:"view.instance.repo.update.local"})),s.createElement(l.Z,{disabled:b,onClick:()=>this.setState({resetType:r.None}),variant:this.state.resetType===r.None?"secondary":"primary"},s.createElement(d.Z,{id:"view.instance.repo.update.none"}))),!E.ZP.manualpr.value&&e&&this.state.gitHubPRs&&e.remoteGitProvider!==u.Qs.GitLab?null:s.createElement("div",{className:"d-flex mt-5"},s.createElement(R.ZP,{name:"view.instance.repo.manual",tooltip:"view.instance.repo.manual.desc",type:R.fS.Number,min:0,defaultValue:this.state.lastManualPR,onChange:e=>this.setState({manualPR:e}),disabled:!n}),s.createElement(k.Z,{tooltipid:"generic.no_perm",show:!n&&void 0},s.createElement(l.Z,{className:"nowrap ml-3",disabled:this.state.manualPR===this.state.lastManualPR||!n,onClick:()=>{this.setState((e=>({manualPRs:new Set([...e.manualPRs.values(),this.state.manualPR]),lastManualPR:this.state.manualPR})))}},s.createElement(d.Z,{id:"view.instance.repo.addmanual"})))),s.createElement(R.ZP,{name:"view.instance.repo.deployAfter",tooltip:"view.instance.repo.deployAfter.desc",type:R.fS.Boolean,defaultValue:!!t&&this.state.deployAfter,disabled:!t,onChange:e=>this.setState({deployAfter:e})})),s.createElement(i.Z.Footer,null,s.createElement(l.Z,{variant:"danger",className:"mx-2",disabled:S,onClick:()=>this.reloadDesiredState(e,!0,!0)},s.createElement(d.Z,{id:"generic.cancel"})),s.createElement(l.Z,{className:"mx-2",disabled:S,onClick:()=>{this.applyTestmerges(y)}},s.createElement(d.Z,{id:"generic.commit"})))),e?e&&e.remoteGitProvider===u.Qs.GitHub?s.createElement(c.Z,{variant:"dark",striped:!0,hover:!0,className:"text-left"},s.createElement("tbody",null,h.map((t=>s.createElement(O,{key:t.number,testmergeinfo:p.get(t.number),pr:t,repoInfo:e,finalState:!!this.state.desiredState.get(t.number)&&this.state.desiredState.get(t.number).slice(1),onRemove:()=>this.setState((e=>({resetType:e.resetType===r.None?r.Local:e.resetType,desiredState:new Map(e.desiredState).set(t.number,null)}))),onSelectCommit:(e,n)=>this.setState((a=>({desiredState:new Map(a.desiredState).set(t.number,[!1,e,n])}))),onError:e=>this.addError(e)}))))):null:s.createElement(C.Z,{title:"view.instance.repo.noautomerge"}))}renderDelete(){return s.createElement(s.Fragment,null,s.createElement("h4",null,s.createElement(d.Z,{id:"view.instance.repo.delete.title"})),s.createElement("span",null,s.createElement(d.Z,{id:"view.instance.repo.delete.desc"})),s.createElement("br",null),s.createElement(l.Z,{variant:"danger",className:"mt-2",onClick:()=>this.setState({showDeleteModal:!0})},s.createElement(d.Z,{id:"view.instance.repo.delete"})),s.createElement(m.Z,{show:this.state.showDeleteModal,onHide:()=>this.setState({showDeleteModal:!1}),centered:!0},s.createElement(m.Z.Header,{closeButton:!0},s.createElement(m.Z.Title,null,s.createElement(d.Z,{id:"view.instance.repo.delete.title"}))),s.createElement(m.Z.Body,null,s.createElement("span",null,s.createElement(d.Z,{id:"generic.areyousure"}))),s.createElement(m.Z.Footer,null,s.createElement(l.Z,{onClick:()=>this.setState({showDeleteModal:!1})},s.createElement(d.Z,{id:"generic.cancel"})),s.createElement(l.Z,{variant:"danger",onClick:async()=>{this.setState({showDeleteModal:!1,loading:!0});const e=await y.Z.deleteRepository(this.context.instance.id);this.setState({loading:!1}),e.code===g.G.OK?e.payload.activeJob?(this.setState({loading:!0}),b.Z.fastmode=5,b.Z.registerCallback(e.payload.activeJob.id,(e=>this.fetchRepositoryInfo(e,void 0===e.errorCode&&void 0===e.exceptionDetails))),b.Z.registerJob(e.payload.activeJob,this.context.instance.id),b.Z.restartLoop()):await this.fetchRepositoryInfo():this.addError(e.error)}},s.createElement(d.Z,{id:"view.instance.repo.delete"})))))}}_.contextType=S.g;var H=_},7428:function(e,t,n){var a=n(7162),r=n(7347),s=n(2638),i=n(2527),o=n(6846),l=n(3803),c=n(7961),m=n(6755);async function d(e,t,n){const a=e.endpoint.merge(t,n);return c.ZP.githubtoken.value&&(a.headers.authorization=`token ${c.ZP.githubtoken.value}`),e(a)}async function p(){return c.ZP.githubtoken.value?{type:"token",tokenType:"pat",token:c.ZP.githubtoken.value}:{type:"unauthenticated"}}const u=()=>Object.assign(p.bind(null),{hook:d.bind(null)}),h=new class extends i.TypedEmitter{constructor(){super(),this.apiClient=void 0;const e=s.v.plugin(a.X,r.O);this.apiClient=new e({authStrategy:u,userAgent:"tgstation-server-control-panel/"+m.q4,baseUrl:"https://api.github.com",throttle:{onRateLimit:(e,t)=>(console.warn(`Request quota exhausted for request ${t.method} ${t.url}`),0===t.request.retryCount&&(console.log(`Retrying after ${e} seconds!`),!0)),onAbuseLimit:(e,t)=>{console.warn(`Abuse detected for request ${t.method} ${t.url}`)}}})}async getVersions({owner:e,repo:t,current:n,all:a}){let r,s=0;try{r=await this.apiClient.paginate(this.apiClient.repos.listReleases,{owner:e,repo:t},((e,t)=>e.data.reduce(((e,r)=>{const i=/tgstation-server-v([\d.]+)/.exec(r.name??"");if(!i)return e;if("4"!==i[1][0]&&"5"!==i[1][0])return e;const o=i[1];let l=!1;if(o<=n){if(s>=3&&!a)return t(),e;s++,l=!0}return e.push({version:o,body:r.body??"",current:o===n,old:l}),e}),[])))}catch(e){return new l.Z({code:l.G.ERROR,error:new o.ZP(o.jK.GITHUB_FAIL,{jsError:e})})}return new l.Z({code:l.G.OK,payload:r})}transformPR(e){return{number:e.number,title:e.title,author:e.user?.login??"ghost",state:e.merged_at?"merged":e.state,link:e.html_url,head:e.head.sha,tail:e.base.sha,testmergelabel:e.labels.some((e=>e.name?.toLowerCase().includes("testmerge")||e.name?.toLowerCase().includes("test merge")))}}async getPRs({owner:e,repo:t,wantedPRs:n}){let a=[];try{a=(await this.apiClient.paginate(this.apiClient.pulls.list,{owner:e,repo:t,state:"open"})).map(this.transformPR);for(const r of n??[])if(!a.find((e=>e.number==r))){const n=(await this.apiClient.pulls.get({owner:e,repo:t,pull_number:r})).data;a.push(this.transformPR(n))}}catch(e){return console.error(e),new l.Z({code:l.G.ERROR,error:new o.ZP(o.jK.GITHUB_FAIL,{jsError:e})})}return new l.Z({code:l.G.OK,payload:a})}async getPRCommits({owner:e,repo:t,pr:n,wantedCommit:a}){let r,s=[];try{if(s=await this.apiClient.paginate(this.apiClient.pulls.listCommits,{owner:e,repo:t,pull_number:n.number,per_page:100},(({data:e})=>e.map((e=>({name:e.commit.message.split("\n")[0],sha:e.sha,url:e.html_url}))))),s.reverse(),a&&!s.find((e=>e.sha===a))){const n=(await this.apiClient.repos.getCommit({owner:e,repo:t,ref:a})).data;r={name:n.commit.message.split("\n")[0],sha:n.sha,url:n.html_url}}}catch(e){return console.error(e),new l.Z({code:l.G.ERROR,error:new o.ZP(o.jK.GITHUB_FAIL,{jsError:e})})}return new l.Z({code:l.G.OK,payload:[s,r]})}};t.Z=h}}]);
//# sourceMappingURL=264.ae29a7bfc5541de47868.bundle.js.map