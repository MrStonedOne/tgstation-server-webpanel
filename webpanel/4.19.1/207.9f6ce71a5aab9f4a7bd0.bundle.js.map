{"version":3,"file":"207.9f6ce71a5aab9f4a7bd0.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React, { ChangeEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport AdminClient from \"../../../ApiClient/AdminClient\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IProps\n    extends RouteComponentProps<{\n        all: string;\n    }> {}\ninterface IState {\n    versions: TGSVersion[];\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    //manual entry\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            versions: [],\n            errors: [],\n            loading: true\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const tasks = [];\n        tasks.push(this.loadVersions());\n\n        await Promise.all(tasks);\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        this.setState({\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n        const response = await AdminClient.updateServer(this.state.selectedOption);\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                break;\n            }\n            case StatusCode.OK: {\n                ServerClient.autoLogin = false;\n                // i need that timer to be async\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                window.setInterval(async () => {\n                    const response = await UserClient.getCurrentUser(true);\n                    switch (response.code) {\n                        //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                        //in both cases, we should reboot\n                        case StatusCode.ERROR: {\n                            window.location.reload();\n                        }\n                    }\n                }, 2000);\n                this.setState({\n                    updating: true\n                });\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const selectedVersionMarkdown = this.state.selectedVersion?.body\n            .replaceAll(\"\\r\", \"\")\n            .replaceAll(\"\\n\", \"\\n\\n\");\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <div className=\"text-center\">\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                show={timing}>\n                                <Button onClick={this.updateServer} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown>{selectedVersionMarkdown!}</ReactMarkdown>\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        <Col xs={8} md={6} className=\"mx-auto\">\n                            {this.state.versions.map((version, index) => {\n                                return (\n                                    <InputGroup className=\"mb-3\" key={version.version}>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Radio\n                                                id={version.version}\n                                                name=\"version\"\n                                                disabled={version.current}\n                                                value={version.version}\n                                                checked={\n                                                    this.state.selectedOption === version.version\n                                                }\n                                                onChange={handleChange}\n                                            />\n                                        </InputGroup.Prepend>\n                                        <FormControl\n                                            as={\"label\"}\n                                            htmlFor={version.version}\n                                            disabled>\n                                            {version.version}\n                                            {version.current ? (\n                                                <FormattedMessage id=\"view.admin.update.current\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                            {index == 0 ? (\n                                                <FormattedMessage id=\"view.admin.update.latest\" />\n                                            ) : (\n                                                \"\"\n                                            )}\n                                        </FormControl>\n                                    </InputGroup>\n                                );\n                            })}\n                            <Button\n                                variant=\"link\"\n                                onClick={() => {\n                                    this.props.history.push(\n                                        (AppRoutes.admin_update.link ??\n                                            AppRoutes.admin_update.route) + \"all/\",\n                                        {\n                                            reload: true\n                                        }\n                                    );\n                                }}\n                                disabled={!!this.props.match.params.all}>\n                                <FormattedMessage id=\"view.admin.update.showall\" />\n                            </Button>\n                            <br />\n                            <Button onClick={this.loadNotes} disabled={!this.state.selectedOption}>\n                                <FormattedMessage id=\"generic.continue\" />\n                            </Button>\n                        </Col>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n                        if (match[1][0] !== \"4\" && match[1][0] !== \"5\") return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","Update","React","constructor","super","this","loadNotes","bind","updateServer","state","versions","errors","loading","tasks","push","loadVersions","Promise","all","setState","componentWillUnmount","timer","window","clearInterval","addError","error","prevState","Array","from","adminInfo","AdminClient","code","StatusCode","url","payload","trackedRepositoryUrl","results","exec","InternalError","ErrorCode","jsError","Error","body","version","current","old","versionInfo","GithubClient","owner","repo","context","serverInfo","match","params","console","log","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","response","ServerClient","async","UserClient","location","reload","updating","render","text","handleChange","changeEvent","target","value","selectedVersionMarkdown","replaceAll","timing","map","err","index","key","onClose","prev","newarr","onClick","id","overlay","show","disabled","xs","md","checked","onChange","as","htmlFor","variant","history","AppRoutes","contextType","GeneralContext","withRouter","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","type","tokenType","token","authStrategy","Object","assign","e","TypedEmitter","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","warn","method","retryCount","onAbuseLimit","oldversions","paginate","repos","listReleases","done","data","reduce","result","release","InternalStatus","transformPR","pr","number","title","author","user","login","merged_at","link","html_url","head","sha","tail","base","testmergelabel","labels","some","label","toLowerCase","includes","wantedPRs","pulls","list","wantedPR","find","get","pull_number","wantedCommit","extraCommit","listCommits","per_page","commit","message","split","reverse","_extraCommit","getCommit","ref","path","getContent","mediaType","format","isArray","raw","content","forEach","element","isDirectory"],"sourceRoot":""}